{
  "title": "-internal_transform_converter_test.go",
  "text": "## [[Tags]]\n[[--- ðŸ§¬ Por Clasificar]]\n\n```go\n// internal/transform/converter_test.go â€“ Tests para transform.ConvertTiddlers\n// --------------------------------------------------------------------------------\n// Estas pruebas viven en el **mismo paquete** (`transform`) para acceder al\n// helper no exportado `parseTags`.  Verifican:\n//   1. ExtracciÃ³n correcta de etiquetas.\n//   2. ConversiÃ³n completa Tiddler â†’ Record con indentado JSON.\n// --------------------------------------------------------------------------------\n\npackage transform\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/models\"\n)\n\n// write helper innecesario: los datos estÃ¡n embebidos como literales JSON.\n\n// Test_parseTags comprueba la extracciÃ³n de etiquetas, incluyendo espacios.\nfunc Test_parseTags(t *testing.T) {\n\traw := \"[[tag1]] [[tag 2]] [[tag3]]\"\n\twant := []string{\"tag1\", \"tag 2\", \"tag3\"}\n\n\tgot := parseTags(raw)\n\tif !reflect.DeepEqual(got, want) {\n\t\tt.Errorf(\"parseTags(%q) = %v, want %v\", raw, got, want)\n\t}\n}\n\n// TestConvertTiddlers verifica el flujo integral, incluyendo el pretty-print de JSON embebido.\nfunc TestConvertTiddlers(t *testing.T) {\n\ttiddlers := []models.Tiddler{\n\t\t{\n\t\t\tTitle:    \"Foo\",\n\t\t\tText:     \"plain text\",\n\t\t\tTags:     \"[[a]] [[b]]\",\n\t\t\tCreated:  \"20250101\",\n\t\t\tModified: \"20250102\",\n\t\t\tType:     \"text/plain\",\n\t\t},\n\t\t{\n\t\t\tTitle:    \"Bar\",\n\t\t\tText:     \"{\\\"key\\\":\\\"value\\\"}\",\n\t\t\tTags:     \"[[x]]\",\n\t\t\tCreated:  \"20250103\",\n\t\t\tModified: \"20250104\",\n\t\t\tType:     \"application/json\",\n\t\t},\n\t}\n\n\twant := []models.Record{\n\t\t{\n\t\t\tID:           \"Foo\",\n\t\t\tTags:         []string{\"a\", \"b\"},\n\t\t\tContentType:  \"text/plain\",\n\t\t\tTextMarkdown: \"plain text\",\n\t\t\tTextPlain:    \"plain text\",\n\t\t\tCreatedAt:    \"20250101\",\n\t\t\tModifiedAt:   \"20250102\",\n\t\t},\n\t\t{\n\t\t\tID:           \"Bar\",\n\t\t\tTags:         []string{\"x\"},\n\t\t\tContentType:  \"application/json\",\n\t\t\tTextMarkdown: \"{\\n  \\\"key\\\": \\\"value\\\"\\n}\",\n\t\t\tTextPlain:    \"{\\n  \\\"key\\\": \\\"value\\\"\\n}\",\n\t\t\tCreatedAt:    \"20250103\",\n\t\t\tModifiedAt:   \"20250104\",\n\t\t},\n\t}\n\n\tgot := ConvertTiddlers(tiddlers)\n\tif !reflect.DeepEqual(got, want) {\n\t\tt.Errorf(\"ConvertTiddlers() = %+v, want %+v\", got, want)\n\t}\n}\n\n```",
  "tags": "[[--- ðŸ§¬ Por Clasificar]]",
  "type": "text/markdown",
  "created": "20250531224148703",
  "modified": "20250531224148703"
}