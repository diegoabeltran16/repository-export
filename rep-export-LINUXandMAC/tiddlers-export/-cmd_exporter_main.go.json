{
  "title": "-cmd_exporter_main.go",
  "text": "## [[Tags]]\n[[--- üß¨ Por Clasificar]]\n\n```go\n// main.go ‚Äì Orquestador principal del pipeline\n// --------------------------------------------------------------------------------\n// Contexto pedag√≥gico\n// -------------------\n// Este archivo *amarra* los tres componentes del pipeline: *reader.go*,\n// *converter.go* y *writer.go*.\n//\n// --------------------------------------------------------------------------------\n// RESPONSABILIDAD PRINCIPAL\n// --------------------------------------------------------------------------------\n// 1. **Parsear flags**:  `-input` para el export JSON de TiddlyWiki y `-output`\n//    para el archivo destino JSONL.\n// 2. Validar que ambos argumentos existan; si no, mostrar *usage* y abortar.\n// 3. Orquestar:\n//      ‚Ä¢ Leer tiddlers       ‚Üí `ReadTiddlers`.\n//      ‚Ä¢ Convertir a records ‚Üí `ConvertTiddlers`.\n//      ‚Ä¢ Escribir JSONL      ‚Üí `WriteJSONL`.\n// 4. Reportar progreso y errores de forma amigable.\n//\n// --------------------------------------------------------------------------------\n// C√ìMO COMPILAR Y EJECUTAR\n// --------------------------------------------------------------------------------\n//   go run ./cmd/exporter \\\n//     -input /home/naveen/Documents/OpenPages-Source/data/in/tiddlers.json \\\n//     -output /home/naveen/Documents/OpenPages-Source/data/out/tiddlers.jsonl\n//\n// --------------------------------------------------------------------------------\n\n// cmd/exporter/main.go\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/internal/exporter\"\n\t\"github.com/diegoabeltran16/OpenPages-Source/internal/importer\"\n\t\"github.com/diegoabeltran16/OpenPages-Source/internal/transform\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\n\t// ------------------------------------------------------------ Flags\n\tin := flag.String(\"input\", \"\", \"JSON exportado de TiddlyWiki\")\n\tout := flag.String(\"output\", \"\", \"Archivo JSONL de salida\")\n\tmode := flag.String(\"mode\", \"v1\", \"v1 | v2  (estructura del JSONL)\")\n\tpretty := flag.Bool(\"pretty\", false, \"MarshalIndent en lugar de compacto\")\n\tflag.Parse()\n\n\tif *in == \"\" || *out == \"\" {\n\t\tfmt.Println(\"Uso: exporter -input tiddlers.json -output sal.jsonl [-mode v2]\")\n\t\tos.Exit(1)\n\t}\n\n\t// ------------------------------------------------------ Leer tiddlers\n\ttiddlers, err := importer.Read(ctx, *in)\n\tif err != nil {\n\t\tlog.Fatalf(\"‚ùå error leyendo tiddlers: %v\", err)\n\t}\n\tfmt.Printf(\"üì¶ %d tiddlers cargados\\n\", len(tiddlers))\n\n\t// -------------------------------------------------- Convertir seg√∫n modo\n\tswitch *mode {\n\tcase \"v2\":\n\t\trecs := transform.ConvertTiddlersV2(tiddlers)\n\t\tif err := exporter.WriteJSONL(ctx, *out, recs, *pretty); err != nil {\n\t\t\tlog.Fatalf(\"‚ùå escribir JSONL v2: %v\", err)\n\t\t}\n\tcase \"v1\":\n\t\trecs := transform.ConvertTiddlers(tiddlers)\n\t\tif err := exporter.WriteJSONL(ctx, *out, recs, *pretty); err != nil {\n\t\t\tlog.Fatalf(\"‚ùå escribir JSONL v1: %v\", err)\n\t\t}\n\tdefault:\n\t\tlog.Fatalf(\"modo desconocido: %s (use v1 o v2)\", *mode)\n\t}\n\n\tfmt.Printf(\"‚úÖ Exportaci√≥n completada (%s)\\n\", *out)\n}\n\n```",
  "tags": "[[--- üß¨ Por Clasificar]]",
  "type": "text/markdown",
  "created": "20250531224148699",
  "modified": "20250531224148699"
}