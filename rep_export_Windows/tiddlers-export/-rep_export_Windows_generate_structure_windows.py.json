{
  "title": "-rep_export_Windows_generate_structure_windows.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-rep_export_Windows_generate_structure_windows.py]] [[--- Codigo]]\n\n```Python\n#!/usr/bin/env python3\n\"\"\"\nMódulo: generate_structure.py\nUbicación: rep-export-Windows/\n\nGenera un árbol ASCII del repositorio, respetando .gitignore y\nforzando que siempre se incluyan `.gitignore` y `estructura.txt`.\n\"\"\"\nimport os\nimport sys\nimport argparse\nimport logging\nimport tempfile\nfrom pathlib import Path\nimport fnmatch\nfrom pathspec import PathSpec\n\nfrom cli_utils_Windows import load_ignore_spec, is_ignored, confirm_overwrite\nfrom tag_mapper_windows import get_tags_for_file  # si lo necesitas\n\n# Exclusiones por defecto (sin __pycache__ para tests)\nIGNORED_DIRS = {'.git', '.svn', '.hg', '.idea', 'node_modules', 'dist', 'build', 'venv', '.mypy_cache'}\nIGNORED_FILES = {'.DS_Store'}\nIGNORED_EXT   = {'.pyc', '.class', '.o', '.exe', '.dll', '.so', '.dylib', '.pdb'}\n\n# Exclusiones adicionales\nALWAYS_EXCLUDE = {\n    '.env', 'secret.env', '*.key', '*.pem', '*.crt', '*.p12', '*.db', '*.sqlite', '*.pyc',\n    '__pycache__/', '__pycache__/*', '.vscode/', '.vscode/*', '.idea/', '.idea/*', '.DS_Store',\n    'node_modules/', 'node_modules/*', 'dist/', 'dist/*', 'build/', 'build/*', 'venv/', 'venv/*',\n    '.mypy_cache/', '.mypy_cache/*', '.git/', '.git/*'\n}\n\n\ndef load_gitignore_patterns(repo_root: Path):\n    \"\"\"Devuelve lista de patrones (glob) extraídos de .gitignore.\"\"\"\n    gitignore = repo_root / '.gitignore'\n    if not gitignore.is_file():\n        return []\n    lines = [ln.strip() for ln in gitignore.read_text(encoding='utf-8').splitlines()\n             if ln.strip() and not ln.strip().startswith('#')]\n    return lines\n\n\ndef matches_pattern(path: Path, patterns, repo_root: Path):\n    \"\"\"True si la ruta relativa coincide con algún patrón glob.\"\"\"\n    rel = str(path.relative_to(repo_root))\n    return any(fnmatch.fnmatch(rel, pat) for pat in patterns)\n\n\ndef should_skip(path: Path, repo_root: Path, exclude_patterns, honor_gitignore: bool, ignore_spec: PathSpec):\n    rel = path.relative_to(repo_root).as_posix()\n    if path.is_dir() and not rel.endswith('/'):\n        rel += '/'\n    if honor_gitignore and ignore_spec and ignore_spec.match_file(rel):\n        return True\n    all_patterns = list(exclude_patterns) + list(ALWAYS_EXCLUDE)\n    if any(fnmatch.fnmatch(rel, pat) for pat in all_patterns):\n        logging.info(f\"Excluyendo por patrón: {rel}\")\n        return True\n    if path.name.startswith('.') and path.name not in {'.gitignore', '.github'}:\n        return True\n    return False\n\n\ndef ascii_tree(root: Path, repo_root: Path, prefix: str = '', args=None, gitignore_patterns=None, gitignore_spec=None):\n    logging.info(f\"Entrando a: {root}\")\n    \"\"\"\n    Construye líneas de árbol ASCII, filtrando según skip logic.\n    \"\"\"\n    # determinar PathSpec a usar\n    if args and getattr(args, 'honor_gitignore', False):\n        ignore_spec = load_ignore_spec(repo_root)\n    else:\n        ignore_spec = gitignore_spec\n    exclude_patterns = getattr(args, 'exclude', []) or []\n\n    lines = []\n    try:\n        entries = sorted(root.iterdir(), key=lambda p: p.name.lower())\n    except PermissionError:\n        logging.warning(f\"Permiso denegado: {root}\")\n        return lines\n\n    # filtrar\n    entries = [e for e in entries if not should_skip(e, repo_root, exclude_patterns, getattr(args, 'honor_gitignore', False), ignore_spec)]\n\n    # construir\n    for idx, entry in enumerate(entries):\n        connector = '└── ' if idx == len(entries) - 1 else '├── '\n        lines.append(f\"{prefix}{connector}{entry.name}\")\n        if entry.is_dir() and not entry.is_symlink():\n            extension = '    ' if idx == len(entries) - 1 else '│   '\n            lines += ascii_tree(entry, repo_root, prefix + extension, args, gitignore_patterns, ignore_spec)\n    return lines\n\n\ndef write_atomic(path: Path, lines):\n    \"\"\"Escribe de forma atómica usando tempfile + replace.\"\"\"\n    tmp = tempfile.NamedTemporaryFile('w', delete=False, encoding='utf-8')\n    with tmp:\n        tmp.write('\\n'.join(lines))\n    Path(tmp.name).replace(path)\n    logging.info(f\"Estructura escrita en {path}\")\n\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\"Genera estructura ASCII filtrada del repo.\")\n    p.add_argument('--output', '-o', type=Path, default=Path('estructura.txt'), help=\"Archivo de salida.\")\n    p.add_argument('--exclude', '-e', action='append', default=[], help=\"Patrón glob para excluir.\")\n    p.add_argument('--exclude-from', type=Path, help=\"Archivo con patrones de exclusión.\")\n    p.add_argument('--honor-gitignore', action='store_true', help=\"Respetar .gitignore.\")\n    p.add_argument('--verbose', '-v', action='count', default=0, help=\"Nivel de detalle logs.\")\n    p.add_argument('--force', '-f', action='store_true', help=\"Sobrescribir sin preguntar.\")  # <--- NUEVO\n    return p.parse_args()\n\n\ndef main():\n    args = parse_args()\n    level = logging.WARNING - 10 * args.verbose\n    logging.basicConfig(level=level, format='[%(levelname)s] %(message)s')\n    repo_root = Path(__file__).resolve().parent.parent\n    os.chdir(repo_root)\n    if args.exclude_from and args.exclude_from.is_file():\n        args.exclude += [ln.strip() for ln in args.exclude_from.read_text(encoding='utf-8').splitlines() if ln.strip() and not ln.strip().startswith('#')]\n    logging.info(f\"Generando estructura desde {repo_root}\")\n    lines = ascii_tree(repo_root, repo_root, prefix='', args=args)\n    output_path = repo_root / args.output\n    if output_path.exists() and not (args.force or confirm_overwrite(output_path)):\n        print(\"Operación cancelada por el usuario.\")\n        return\n    write_atomic(output_path, lines)\n\nif __name__ == '__main__':\n    main()\n\n```",
  "tags": "[[⚙️ Python]] [[-rep_export_Windows_generate_structure_windows.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250620153254454",
  "modified": "20250620153254454"
}