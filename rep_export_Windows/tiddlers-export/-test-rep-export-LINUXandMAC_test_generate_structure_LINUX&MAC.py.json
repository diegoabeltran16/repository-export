{
  "title": "-test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py]] [[--- Codigo]]\n\n```python\nimport subprocess\nimport sys\nfrom pathlib import Path\nimport pytest\n\ndef run_generate_structure(tmp_path, args=None):\n    \"\"\"\n    Ejecuta generate_structure.py con --dry-run en el directorio tmp_path.\n    Devuelve CompletedProcess.\n    \"\"\"\n    script = Path(__file__).parent.parent / 'rep-export-LINUXandMAC' / 'generate_structure.py'\n    cmd = [sys.executable, str(script), '--root', str(tmp_path), '--dry-run']\n    if args:\n        cmd.extend(args)\n    result = subprocess.run(cmd, capture_output=True, text=True)\n    return result\n\n\ndef test_default_excludes(tmp_path):\n    # Crear estructura de prueba\n    (tmp_path / 'keep_dir').mkdir()\n    (tmp_path / 'keep_dir' / 'file.txt').write_text('hello')\n\n    # Directorios y archivos que deben excluirse por defecto\n    (tmp_path / '.git').mkdir()\n    (tmp_path / '__pycache__').mkdir()\n    (tmp_path / 'node_modules').mkdir()\n    (tmp_path / 'secret.pyc').write_text('')\n    (tmp_path / '.DS_Store').write_text('')\n\n    # Ejecutar\n    result = run_generate_structure(tmp_path)\n    assert result.returncode == 0, f\"Salida inesperada: {result.stderr}\"\n    output = result.stdout\n\n    # Debemos ver keep_dir y file.txt\n    assert 'keep_dir' in output\n    assert 'file.txt' in output\n\n    # No debe aparecer ninguna exclusión por defecto\n    for excl in ['.git', '__pycache__', 'node_modules', 'secret.pyc', '.DS_Store']:\n        assert excl not in output, f\"Encontrado elemento excluido: {excl}\"  \n\n\ndef test_custom_exclude_pattern(tmp_path):\n    # Crear archivos de distintos tipos\n    (tmp_path / 'logs').mkdir()\n    (tmp_path / 'logs' / 'error.log').write_text('error')\n    (tmp_path / 'data').mkdir()\n    (tmp_path / 'data' / 'readme.md').write_text('# docs')\n\n    # Ejecutar con patrón de exclusión para logs\n    result = run_generate_structure(tmp_path, args=['-e', 'logs'])\n    assert result.returncode == 0\n    output = result.stdout\n\n    # logs debe estar excluido, pero data debe aparecer\n    assert 'logs' not in output\n    assert 'data' in output\n\ndef test_honor_gitignore(tmp_path):\n    # Crear .gitignore con patrón para temp*\n    gitignore = tmp_path / '.gitignore'\n    gitignore.write_text('temp*')\n\n    # Crear archivos/directorios\n    (tmp_path / 'temp123').mkdir()\n    (tmp_path / 'keep').mkdir()\n\n    # Ejecutar con honor-gitignore\n    result = run_generate_structure(tmp_path, args=['--honor-gitignore'])\n    assert result.returncode == 0\n    output = result.stdout\n\n    assert 'keep' in output\n    assert 'temp123' not in output\n\n```",
  "tags": "[[⚙️ Python]] [[-test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250608033205925",
  "modified": "20250608033205925"
}