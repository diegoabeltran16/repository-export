{
  "title": "-tests_test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-tests_test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py]] [[--- Codigo]]\n\n```Python\n# tests/test-rep-export-LINUXandMAC/test_generate_structure_LINUX&MAC.py\n\nimport os\nimport sys\nimport argparse\nimport importlib.util\nfrom pathlib import Path\nimport pytest\n\nproject_root = Path(__file__).resolve().parents[2]\nif str(project_root) not in sys.path:\n    sys.path.insert(0, str(project_root))\n\nwindows_dir = project_root / \"rep-export-Windows\"\nlinuxmac_dir = project_root / \"rep_export_LINUXandMAC\"\n\n# Elimina el path de Windows si está en sys.path\nif str(windows_dir) in sys.path:\n    sys.path.remove(str(windows_dir))\n\n# Elimina cli_utils del cache de módulos si ya fue importado\nif \"cli_utils\" in sys.modules:\n    del sys.modules[\"cli_utils\"]\n\n# Asegura que el path de Linux/Mac esté primero\nif str(linuxmac_dir) not in sys.path:\n    sys.path.insert(0, str(linuxmac_dir))\n\n# Ahora sí importa tus módulos\nfrom rep_export_LINUXandMAC import tag_mapper\nfrom cli_utils_UNIX import load_ignore_spec, is_ignored\n\ndef load_module():\n    \"\"\"\n    Carga dinámicamente el módulo generate_structure.py\n    desde rep_export_LINUXandMAC para poder probar sus funciones.\n    \"\"\"\n    repo_root = Path(__file__).resolve().parents[2]\n    script_path = repo_root / 'rep_export_LINUXandMAC' / 'generate_structure.py'\n    spec = importlib.util.spec_from_file_location('generate_structure', str(script_path))\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)\n    return module\n\n@pytest.fixture\ndef gs_module():\n    return load_module()\n\ndef test_ascii_tree_filters_hidden_and_ignored(gs_module, tmp_path):\n    # Prepara estructura con archivos/carpetas válidas y excluibles\n    (tmp_path / 'keep.txt').write_text('keep')\n    d = tmp_path / 'dir'\n    d.mkdir()\n    (d / 'inside.md').write_text('inside')\n\n    # Elementos que deben excluirse por defecto\n    (tmp_path / '.git').mkdir()\n    (tmp_path / '__pycache__').mkdir()\n    (tmp_path / 'node_modules').mkdir()\n    (tmp_path / 'secret.pyc').write_text('')\n    (tmp_path / '.DS_Store').write_text('')\n\n    args = argparse.Namespace(\n        exclude=[],\n        honor_gitignore=False,\n        exclude_from=None,\n        verbose=0\n    )\n\n    lines = gs_module.ascii_tree(\n        root=tmp_path,\n        repo_root=tmp_path,\n        prefix='',\n        args=args,\n        ignore_spec=None  # <-- Cambiado\n    )\n    output = \"\\n\".join(lines)\n\n    # Los válidos sí deben aparecer\n    assert 'keep.txt' in output\n    assert 'dir' in output\n    assert 'inside.md' in output\n\n    # Los excluidos no deben aparecer\n    for excl in ['.git', '__pycache__', 'node_modules', 'secret.pyc', '.DS_Store']:\n        assert excl not in output, f\"Se encontró elemento excluido: {excl}\"\n\ndef test_honor_gitignore(gs_module, tmp_path):\n    # Crea .gitignore que excluye \"keep\"\n    (tmp_path / '.gitignore').write_text('keep\\n')\n\n    # Archivos/directorios de prueba\n    (tmp_path / 'keep').mkdir()\n    (tmp_path / 'other').mkdir()\n\n    args = argparse.Namespace(\n        exclude=[],\n        honor_gitignore=True,\n        exclude_from=None,\n        verbose=0\n    )\n    ignore_spec = gs_module.load_ignore_spec(tmp_path)  # <-- Cambiado\n    lines = gs_module.ascii_tree(\n        root=tmp_path,\n        repo_root=tmp_path,\n        prefix='',\n        args=args,\n        ignore_spec=ignore_spec  # <-- Cambiado\n    )\n    output = \"\\n\".join(lines)\n\n    # \"other\" debe quedar, \"keep\" no\n    assert 'other' in output\n    assert 'keep' not in output\n\ndef test_write_atomic_creates_file(gs_module, tmp_path):\n    # Probar que write_atomic crea y escribe correctamente\n    out_file = tmp_path / 'out.txt'\n    content_lines = ['line1', 'line2', 'line3']\n\n    gs_module.write_atomic(out_file, content_lines)\n\n    # Leer y comparar contenido\n    read_back = out_file.read_text(encoding='utf-8').splitlines()\n    assert read_back == content_lines\n\n    # En Unix verificar permisos 0o600\n    if os.name != 'nt':\n        mode = out_file.stat().st_mode & 0o777\n        assert mode == 0o600\n\n```",
  "tags": "[[⚙️ Python]] [[-tests_test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250620153254475",
  "modified": "20250620153254476"
}