{
  "title": "-test-rep-export-Windows_test_generate_structure_Windows.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-test-rep-export-Windows_test_generate_structure_Windows.py]] [[--- Codigo]]\n\n```python\nimport argparse\nimport importlib.util\nfrom pathlib import Path\nimport os\n\ndef load_generate_structure_module():\n    # Ubica el script generate_structure.py en la ruta correcta\n    repo_root = Path(__file__).resolve().parents[1]\n    script_path = repo_root / 'rep-export-Windows' / 'generate_structure.py'\n    spec = importlib.util.spec_from_file_location('generate_structure', script_path)\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)\n    return module\n\n\ndef test_ascii_tree_filters_hidden_and_ignored(tmp_path):\n    # Prepara un repo dummy con elementos que deben excluirse\n    root = tmp_path\n    (root / '.git').mkdir()\n    (root / '.git' / 'config').write_text('x')\n    (root / 'node_modules').mkdir()\n    (root / 'node_modules' / 'mod.js').write_text('x')\n    (root / '.hidden').write_text('secret')\n    # Archivo con extensión ignorada\n    (root / 'file.pyc').write_text('')\n    # Archivo y directorio válidos\n    (root / 'keep.txt').write_text('keep')\n    d = root / 'dir'\n    d.mkdir()\n    (d / 'inside.md').write_text('inside')\n\n    # Carga el módulo y ejecuta ascii_tree\n    module = load_generate_structure_module()\n    args = argparse.Namespace(exclude=[], honor_gitignore=False, exclude_from=None, verbose=0)\n    lines = module.ascii_tree(root, root, prefix='', args=args, gitignore_patterns=[])\n\n    # Verifica que solo aparecen dir/inside.md y keep.txt\n    expected = [\n        '├── dir',\n        '│   └── inside.md',\n        '└── keep.txt'\n    ]\n    assert lines == expected\n\n\ndef test_honor_gitignore(tmp_path):\n    # Repo dummy con .gitignore\n    root = tmp_path\n    (root / '.gitignore').write_text('keep.txt')\n    (root / 'keep.txt').write_text('keep')\n    (root / 'other.txt').write_text('other')\n\n    module = load_generate_structure_module()\n    args = argparse.Namespace(exclude=[], honor_gitignore=True, exclude_from=None, verbose=0)\n    gitignore_patterns = module.load_gitignore_patterns(root)\n    lines = module.ascii_tree(root, root, prefix='', args=args, gitignore_patterns=gitignore_patterns)\n\n    # Solo other.txt debe quedar\n    assert lines == ['└── other.txt']\n\n\ndef test_write_atomic_creates_file(tmp_path):\n    module = load_generate_structure_module()\n    output = tmp_path / 'out.txt'\n    lines = ['line1', 'line2']\n    module.write_atomic(output, lines)\n    # Verifica contenido escrito\n    content = output.read_text(encoding='utf-8').splitlines()\n    assert content == lines\n    # Verifica permisos en Unix\n    if os.name != 'nt':\n        mode = output.stat().st_mode & 0o777\n        assert mode == 0o600\n\n```",
  "tags": "[[⚙️ Python]] [[-test-rep-export-Windows_test_generate_structure_Windows.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250608033205926",
  "modified": "20250608033205926"
}