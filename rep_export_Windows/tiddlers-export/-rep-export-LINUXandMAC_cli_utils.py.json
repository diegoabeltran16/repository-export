{
  "title": "-rep-export-LINUXandMAC_cli_utils.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_cli_utils.py]] [[--- Codigo]]\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nMódulo: cli_utils.py\nUbicación: rep-export-LINUXandMAC/\n\nUtilidades comunes para scripts CLI de Linux/macOS:\n- `safe_print`         → Imprime mensajes evitando errores de codificación (útil para emojis).\n- `prompt_yes_no`      → Preguntas interactivas Sí/No con valor por defecto.\n- `run_cmd`            → Ejecutar comandos externos capturando stdout, stderr y código de salida.\n- `get_additional_args`→ Parsear argumentos libres introducidos por el usuario.\n- `confirm_overwrite`  → Confirmar sobrescritura de archivos existentes.\n\"\"\"\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import List, Tuple, Optional\n\n\ndef safe_print(message: str) -> None:\n    \"\"\"Imprime cadena sin fallar si la consola no soporta algunos caracteres.\"\"\"\n    try:\n        print(message)\n    except UnicodeEncodeError:\n        encoding = sys.stdout.encoding or 'utf-8'\n        filtered = message.encode(encoding, errors='ignore').decode(encoding)\n        print(filtered)\n\n\ndef prompt_yes_no(question: str, default: bool = False) -> bool:\n    \"\"\"Pregunta interactiva Sí/No con valor por defecto.\"\"\"\n    default_str = 'S/n' if default else 's/N'\n    while True:\n        resp = input(f\"{question} [{default_str}]: \").strip().lower()\n        if not resp:\n            return default\n        if resp in ('s', 'si', 'y', 'yes'):\n            return True\n        if resp in ('n', 'no'):\n            return False\n        safe_print(\"❗ Respuesta inválida. Usa 's' o 'n'.\")\n\n\ndef run_cmd(cmd: List[str], cwd: Optional[Path] = None) -> Tuple[int, str, str]:\n    \"\"\"\n    Ejecuta un comando externo y retorna (exit_code, stdout, stderr).\n    \"\"\"\n    safe_print(f\"\\n▶️ Ejecutando: {' '.join(cmd)}\\n\")\n    proc = subprocess.Popen(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    out, err = proc.communicate()\n    if out:\n        safe_print(out)\n    if proc.returncode != 0:\n        safe_print(f\"❌ Error (code {proc.returncode}) al ejecutar: {cmd[0]}\")\n        if err:\n            safe_print(f\"📋 stderr:\\n{err}\")\n    return proc.returncode, out, err\n\n\ndef get_additional_args(script_name: str) -> List[str]:\n    \"\"\"Solicita al usuario argumentos adicionales para un script CLI.\"\"\"\n    extras = input(f\"Argumentos extra para {script_name} (separados por espacios), o Enter para ninguno: \").strip()\n    return extras.split() if extras else []\n\n\ndef confirm_overwrite(path: Path) -> bool:\n    \"\"\"Si `path` existe, pregunta si el usuario desea sobrescribirlo.\"\"\"\n    if path.exists():\n        return prompt_yes_no(f\"El archivo '{path.name}' ya existe. ¿Sobrescribir?\", default=False)\n    return True\n\n```",
  "tags": "[[⚙️ Python]] [[-rep-export-LINUXandMAC_cli_utils.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250609134240600",
  "modified": "20250609134240600"
}