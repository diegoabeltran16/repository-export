{
  "title": "-rep-export-LINUXandMAC_scripts_export_structure_wrapper.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_scripts_export_structure_wrapper.py]] [[--- Codigo]]\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nScript interactivo: export_structure_wrapper.py\nUbicación: rep-export-LINUXandMAC/scripts/\n\nEste script es un asistente amigable para generar la estructura de tu proyecto.\nHace preguntas sencillas y luego invoca el script principal `generate_structure.py`.\n\"\"\"\nimport subprocess\nimport sys\nfrom pathlib import Path\n\ndef prompt_yes_no(question: str, default: bool = True) -> bool:\n    yes = 'S' if default else 's'\n    no = 'n' if default else 'N'\n    prompt = f\"{question} [{yes}/{no}]: \"\n    while True:\n        resp = input(prompt).strip().lower()\n        if not resp:\n            return default\n        if resp in ('s', 'si', 'y', 'yes'):\n            return True\n        if resp in ('n', 'no'):\n            return False\n        print(\"Por favor responde 'S' o 'n'.\")\n\ndef main():\n    print(\"\\n¡Bienvenido al asistente de generación de estructura!\\n\")\n    print(\"Este asistente te ayudará a crear un listado filtrado de carpetas y archivos de tu proyecto.\")\n    print(\"Puedes:\")\n    print(\"  - Ver una vista previa sin guardar (dry-run)\")\n    print(\"  - Generar un archivo de texto con la estructura\")\n    print(\"  - Excluir elementos según .gitignore o patrones personalizados\\n\")\n\n    # Rutas\n    base = Path(__file__).resolve().parent.parent\n    script = base / 'generate_structure.py'\n    if not script.exists():\n        print(f\"❌ No encontré generate_structure.py en {script}\")\n        sys.exit(1)\n\n    # Opciones\n    dry_run = prompt_yes_no(\"¿Quieres una vista previa (dry-run)?\", default=True)\n    honor_gitignore = prompt_yes_no(\"¿Respetar .gitignore?\", default=False)\n    custom_patterns = input(\"Ingresa patrones a excluir separados por comas, o Enter para ninguno: \").strip()\n    exclude_args = []\n    if custom_patterns:\n        for pat in [p.strip() for p in custom_patterns.split(',') if p.strip()]:\n            exclude_args.extend(['-e', pat])\n\n    # Salida\n    print(\"\\n¿Dónde quieres que se guarde la salida?\")\n    print(\"  1) Solo mostrar en pantalla\")\n    print(\"  2) Guardar en 'estructura.txt'\")\n    print(\"  3) Guardar en nombre personalizado\")\n    choice = input(\"Selecciona una opción [1/2/3]: \").strip()\n    if choice == '3':\n        filename = input(\"Nombre de archivo (ej: mi_estructura.txt): \").strip()\n        output_args = ['--output', filename]\n    elif choice == '2':\n        output_args = []\n    else:\n        # para solo mostrar, forzamos dry-run\n        if not dry_run:\n            dry_run = True\n        output_args = []\n\n    # Construir comando\n    cmd = [sys.executable, str(script)]\n    if dry_run:\n        cmd.append('--dry-run')\n    if honor_gitignore:\n        cmd.append('--honor-gitignore')\n    cmd += exclude_args\n    cmd += output_args\n\n    print(f\"\\nEjecutando: {' '.join(cmd)}\\n\")\n    proc = subprocess.run(cmd, cwd=base)\n    if proc.returncode == 0:\n        if dry_run or choice == '1':\n            print(\"\\n✅ Vista previa completada.\")\n        else:\n            out_file = output_args[1] if choice == '3' else 'estructura.txt'\n            print(f\"\\n✅ Estructura guardada en: {out_file}\")\n    else:\n        print(\"\\n❌ Ocurrió un error. Por favor revisa los mensajes anteriores.\")\n        sys.exit(proc.returncode)\n\nif __name__ == '__main__':\n    main()\n\n```",
  "tags": "[[⚙️ Python]] [[-rep-export-LINUXandMAC_scripts_export_structure_wrapper.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250608033205914",
  "modified": "20250608033205914"
}