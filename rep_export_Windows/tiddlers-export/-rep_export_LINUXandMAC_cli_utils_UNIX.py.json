{
  "title": "-rep_export_LINUXandMAC_cli_utils_UNIX.py",
  "text": "RELATIONS:\n{\n  \"parte_de\": [\n    \"--- Codigo\",\n    \"rep_export_LINUXandMAC\"\n  ],\n  \"usa\": [\n    \"List\",\n    \"Optional\",\n    \"Path\",\n    \"PathSpec\",\n    \"Tuple\",\n    \"pathlib\",\n    \"pathspec\",\n    \"subprocess\",\n    \"sys\",\n    \"typing\"\n  ]\n}\n\n```Python\n#!/usr/bin/env python3\n\"\"\"\nMódulo: cli_utils_UNIX.py\nUbicación: rep-export-LINUXandMAC/\n\nUtilidades comunes para scripts CLI de Linux/macOS:\n- safe_print         → Imprime mensajes evitando errores de codificación (emojis).\n- prompt_yes_no      → Preguntas interactivas Sí/No con valor por defecto.\n- run_cmd            → Ejecutar comandos externos mostrando stdout en vivo.\n- get_additional_args→ Parsear argumentos libres introducidos por el usuario.\n- confirm_overwrite  → Confirmar sobrescritura de archivos existentes.\n- load_ignore_spec   → Cargar patrones de .gitignore (opcional).\n- is_ignored         → Verifica si una ruta debe ser ignorada por .gitignore (opcional).\n\"\"\"\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import List, Tuple, Optional\n\ndef safe_print(message: str) -> None:\n    \"\"\"Imprime cadena sin fallar si la consola no soporta algunos caracteres.\"\"\"\n    try:\n        print(message)\n    except UnicodeEncodeError:\n        encoding = sys.stdout.encoding or 'utf-8'\n        filtered = message.encode(encoding, errors='ignore').decode(encoding)\n        print(filtered)\n\ndef prompt_yes_no(question: str, default: bool = False) -> bool:\n    \"\"\"Pregunta interactiva Sí/No con valor por defecto.\"\"\"\n    default_str = 'S/n' if default else 's/N'\n    while True:\n        resp = input(f\"{question} [{default_str}]: \").strip().lower()\n        if not resp:\n            return default\n        if resp in ('s', 'si', 'y', 'yes'):\n            return True\n        if resp in ('n', 'no'):\n            return False\n        safe_print(\"❗ Respuesta inválida. Usa 's' o 'n'.\")\n\ndef run_cmd(cmd: List[str], cwd: Optional[Path] = None) -> Tuple[int, str, str]:\n    \"\"\"\n    Ejecuta un comando externo y muestra la salida en tiempo real.\n    Retorna (exit_code, None, None) para compatibilidad.\n    \"\"\"\n    safe_print(f\"\\n▶️ Ejecutando: {' '.join(cmd)}\\n\")\n    process = subprocess.Popen(\n        cmd,\n        cwd=cwd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        text=True,\n        bufsize=1\n    )\n    for line in process.stdout:\n        print(line, end='')  # Muestra cada línea en tiempo real\n    process.wait()\n    return process.returncode, None, None\n\ndef get_additional_args(script_name: str) -> List[str]:\n    \"\"\"Solicita al usuario argumentos adicionales para un script CLI.\"\"\"\n    extras = input(f\"Argumentos extra para {script_name} (separados por espacios), o Enter para ninguno: \").strip()\n    return extras.split() if extras else []\n\ndef confirm_overwrite(path: Path) -> bool:\n    \"\"\"Si `path` existe, pregunta si el usuario desea sobrescribirlo.\"\"\"\n    if path.exists():\n        return prompt_yes_no(f\"El archivo '{path.name}' ya existe. ¿Sobrescribir?\", default=False)\n    return True\n\n# Opcional: Si quieres máxima paridad con Windows, agrega:\ntry:\n    from pathspec import PathSpec\nexcept ImportError:\n    PathSpec = None\n\ndef load_ignore_spec(repo_root: Path):\n    \"\"\"\n    Carga y compila los patrones de `.gitignore` desde el directorio raíz.\n    Devuelve un PathSpec usable para match_file(path).\n    \"\"\"\n    if PathSpec is None:\n        return None\n    gitignore = repo_root / '.gitignore'\n    if not gitignore.is_file():\n        return None\n    lines = [\n        ln.strip() for ln in gitignore.read_text(encoding='utf-8').splitlines()\n        if ln.strip() and not ln.strip().startswith('#')\n    ]\n    if not lines:\n        return None\n    return PathSpec.from_lines('gitwildmatch', lines)\n\ndef is_ignored(path: Path, ignore_spec):\n    \"\"\"\n    Verifica si una ruta debe ser ignorada por `.gitignore`.\n    Path debe ser relativo o absoluto dentro de repo_root.\n    \"\"\"\n    if ignore_spec is None:\n        return False\n    rel = str(path)\n    return ignore_spec.match_file(rel)\n\n```",
  "type": "text",
  "tags": "[[⚙️ Python]] [[-rep_export_LINUXandMAC_cli_utils_UNIX.py]] [[--- Codigo]] [[parte_de:--- Codigo]] [[parte_de:rep_export_LINUXandMAC]] [[usa:List]] [[usa:Optional]] [[usa:Path]] [[usa:PathSpec]] [[usa:Tuple]] [[usa:pathlib]] [[usa:pathspec]] [[usa:subprocess]] [[usa:sys]] [[usa:typing]]",
  "tags_list": [
    "[[⚙️ Python]]",
    "[[-rep_export_LINUXandMAC_cli_utils_UNIX.py]]",
    "[[--- Codigo]]",
    "[[parte_de:--- Codigo]]",
    "[[parte_de:rep_export_LINUXandMAC]]",
    "[[usa:List]]",
    "[[usa:Optional]]",
    "[[usa:Path]]",
    "[[usa:PathSpec]]",
    "[[usa:Tuple]]",
    "[[usa:pathlib]]",
    "[[usa:pathspec]]",
    "[[usa:subprocess]]",
    "[[usa:sys]]",
    "[[usa:typing]]"
  ],
  "relations": {
    "parte_de": [
      "--- Codigo",
      "rep_export_LINUXandMAC"
    ],
    "usa": [
      "List",
      "Optional",
      "Path",
      "PathSpec",
      "Tuple",
      "pathlib",
      "pathspec",
      "subprocess",
      "sys",
      "typing"
    ]
  }
}