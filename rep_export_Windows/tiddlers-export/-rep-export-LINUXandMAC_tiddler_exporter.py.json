{
  "title": "-rep-export-LINUXandMAC_tiddler_exporter.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_tiddler_exporter.py]] [[--- Codigo]]\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nScript: tiddler_exporter.py (Linux/macOS)\nPlataforma: Linux, macOS\n\nEste script recorre los archivos del repositorio y genera archivos JSON (tiddlers) para TiddlyWiki.\nMejoras:\n- Ignora patrones de .gitignore (salvo `estructura.txt`).\n- Exporta solo archivos con extensiones válidas o nombres especiales.\n- Detecta cambios usando hashes para exportar solo archivos modificados.\n- Añade tags semánticos con `tag_mapper.get_tags_for_file`:\n  * Tag de tipo con emoji ⚙️ (p.ej. ⚙️ Python).\n  * Tag basado en nombre `-ruta_con_underscores` sin emoji.\n  * Tag de grupo `--- Codigo`.\n- Genera bloque Markdown con syntax highlighting adecuado desde `tag_mapper.detect_language`.\n- Soporta `--dry-run` para simulación.\n\nUso:\n  python3 generate_structure.py && python3 tiddler_exporter.py [--dry-run]\n\"\"\"\nimport os\nimport json\nimport hashlib\nimport sys\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nimport tag_mapper\n\n# ===== Configuración =====\nROOT_DIR = Path(__file__).resolve().parents[1]\nSCRIPT_DIR = Path(__file__).parent\nOUTPUT_DIR = SCRIPT_DIR / \"tiddlers-export\"\nHASH_FILE = SCRIPT_DIR / \".hashes.json\"\nIGNORE_SPEC = tag_mapper.load_ignore_spec(ROOT_DIR)\n\n# Extensiones y nombres permitidos\nVALID_EXT = set(tag_mapper.EXTENSION_TAG_MAP.keys())\nALLOWED_NAMES = set(tag_mapper.SPECIAL_FILENAMES.keys())\n\n# ===========================\ndef get_all_files():\n    \"\"\"\n    Recorre ROOT_DIR y devuelve archivos a exportar:\n    - Siempre incluye `estructura.txt`.\n    - Excluye según .gitignore (IGNORE_SPEC).\n    - Filtra por extensiones y nombres especiales.\n    \"\"\"\n    for dirpath, dirnames, filenames in os.walk(ROOT_DIR):\n        dirnames[:] = [d for d in dirnames if d not in ('tiddler_tag_doc', 'tiddlers-export')]\n        for name in filenames:\n            path = Path(dirpath) / name\n            rel = str(path.relative_to(ROOT_DIR))\n            # Incluir estructura.txt siempre\n            if rel == 'estructura.txt':\n                yield path\n                continue\n            # Ignorar según .gitignore\n            if IGNORE_SPEC.match_file(rel):\n                continue\n            # Filtrar extensiones o nombres especiales\n            if path.suffix.lower() in VALID_EXT or name in ALLOWED_NAMES:\n                yield path\n\n\ndef calc_hash(content: str) -> str:\n    return hashlib.sha1(content.encode('utf-8')).hexdigest()\n\n\ndef safe_title(path: Path) -> str:\n    \"\"\"Convierte ruta en título: `-ruta_con_guiones`.\"\"\"\n    return '-' + str(path.relative_to(ROOT_DIR)).replace(os.sep, '_')\n\n\ndef export_tiddlers(dry_run: bool = False):\n    \"\"\"\n    Exporta tiddlers JSON para archivos nuevos o modificados.\n    \"\"\"\n    OUTPUT_DIR.mkdir(exist_ok=True)\n    # Cargar hashes previos\n    old_hashes = {}\n    if HASH_FILE.exists():\n        try:\n            old_hashes = json.loads(HASH_FILE.read_text(encoding='utf-8'))\n        except Exception:\n            old_hashes = {}\n    new_hashes = {}\n    changed = []\n\n    for file in get_all_files():\n        rel = str(file.relative_to(ROOT_DIR))\n        content = file.read_text(encoding='utf-8', errors='replace')\n        h = calc_hash(content)\n        new_hashes[rel] = h\n        # Saltar si no cambió\n        if old_hashes.get(rel) == h:\n            continue\n        # Construir tiddler\n        title = safe_title(file)\n        tags = tag_mapper.get_tags_for_file(file)\n        lang = tag_mapper.detect_language(file)\n        text_md = (\n            \"## [[Tags]]\\n\"\n            f\"{' '.join(tags)}\\n\\n\"\n            f\"```{lang}\\n{content}\\n```\"\n        )\n        tiddler = {\n            'title': title,\n            'text': text_md,\n            'tags': ' '.join(tags),\n            'type': 'text/markdown',\n            'created': datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\n            'modified': datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17]\n        }\n        out_file = OUTPUT_DIR / f\"{title}.json\"\n        if dry_run:\n            # Simulación\n            print(f\"[dry-run] {rel}\")\n        else:\n            out_file.write_text(json.dumps(tiddler, ensure_ascii=False, indent=2), encoding='utf-8')\n            print(f\"Exported: {rel}\")\n        changed.append(rel)\n\n    # Guardar nuevos hashes\n    if not dry_run:\n        HASH_FILE.write_text(json.dumps(new_hashes, indent=2), encoding='utf-8')\n\n    # Resumen final\n    print(f\"\\nTotal cambios: {len(changed)}\")\n    for c in changed:\n        print(f\"  - {c}\")\n\n\nif __name__ == '__main__':\n    dry = '--dry-run' in sys.argv\n    export_tiddlers(dry_run=dry)\n\n```",
  "tags": "[[⚙️ Python]] [[-rep-export-LINUXandMAC_tiddler_exporter.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250609134240606",
  "modified": "20250609134240606"
}