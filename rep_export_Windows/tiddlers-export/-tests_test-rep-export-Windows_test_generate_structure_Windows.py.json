{
  "title": "-tests_test-rep-export-Windows_test_generate_structure_Windows.py",
  "text": "RELATIONS:\n{\n  \"parte_de\": [\n    \"--- Codigo\",\n    \"tests\"\n  ],\n  \"usa\": [\n    \"Namespace\",\n    \"Path\",\n    \"argparse\",\n    \"añadido\",\n    \"cli_utils_Windows\",\n    \"is_ignored\",\n    \"load_ignore_spec\",\n    \"para\",\n    \"pathlib\",\n    \"pytest\",\n    \"sys\"\n  ]\n}\n\n```Python\n# tests/test-rep-export-Windows/test_generate_structure_Windows.py\n\nimport sys\nfrom pathlib import Path\n\nsys.path.insert(0, str(Path(__file__).resolve().parents[2] / \"rep_export_Windows\"))\n\nimport importlib.util\nimport argparse               # ⬅️ añadido para Namespace\n\nimport pytest\nfrom cli_utils_Windows import load_ignore_spec, is_ignored\n\n\ndef load_module():\n    \"\"\"\n    Carga dinámicamente rep-export-Windows/generate_structure.py\n    y asegura que la carpeta rep-export-Windows/ esté en sys.path\n    para que 'import cli_utils' funcione correctamente.\n    \"\"\"\n    project_root = Path(__file__).resolve().parents[2]\n    module_path = project_root / \"rep_export_Windows\" / \"generate_structure_windows.py\"\n\n    # Asegurarnos de poder importar cli_utils desde rep-export-Windows/\n    windows_pkg = project_root / \"rep-export-Windows\"\n    if str(windows_pkg) not in sys.path:\n        sys.path.insert(0, str(windows_pkg))\n\n    spec = importlib.util.spec_from_file_location(\"generate_structure\", str(module_path))\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)\n    return module\n\n\n@pytest.fixture\ndef gs_module():\n    return load_module()\n\n\ndef test_ascii_tree_filters_hidden_and_ignored(gs_module, tmp_path):\n    gen = gs_module\n    repo = tmp_path / \"repo\"\n    repo.mkdir()\n\n    # Preparamos árbol con .gitignore que oculta __pycache__/ y secret.txt\n    (repo / \".gitignore\").write_text(\"__pycache__/\\nsecret.txt\\n\")\n    (repo / \"visible.txt\").write_text(\"ok\")\n    (repo / \"secret.txt\").write_text(\"no\")\n    (repo / \"__pycache__\").mkdir()\n    (repo / \"__pycache__\" / \"ignored.pyc\").write_text(\"\")\n\n    # 1) Sin honor-gitignore -> secret.txt aparece, __pycache__ NO aparece\n    lines_raw = gen.ascii_tree(\n        repo,\n        repo,\n        args=argparse.Namespace(exclude=[], honor_gitignore=False),\n        gitignore_spec=None\n    )\n    assert any(\"secret.txt\" in l for l in lines_raw)\n    assert all(\"__pycache__\" not in l for l in lines_raw)\n\n    # 2) Con honor-gitignore -> ambos deben desaparecer\n    spec = gen.load_ignore_spec(repo)\n    lines_clean = gen.ascii_tree(\n        repo,\n        repo,\n        args=argparse.Namespace(exclude=[], honor_gitignore=True),\n        gitignore_spec=spec\n    )\n    print(\"DEBUG lines_clean:\", lines_clean)  # <-- aquí\n    assert all(\"secret.txt\" not in l for l in lines_clean)\n    assert all(\"__pycache__\" not in l for l in lines_clean)\n\n\ndef test_honor_gitignore(gs_module, tmp_path):\n    gen = gs_module\n    repo = tmp_path / \"repo2\"\n    repo.mkdir()\n\n    # .gitignore que ignora *.log\n    (repo / \".gitignore\").write_text(\"*.log\\n\")\n    (repo / \"a.log\").write_text(\"data\")\n    (repo / \"b.txt\").write_text(\"data\")\n\n    spec = gen.load_ignore_spec(repo)\n    lines_clean = gen.ascii_tree(\n        repo,\n        repo,\n        args=argparse.Namespace(exclude=[], honor_gitignore=True),\n        gitignore_spec=spec\n    )\n    assert all(\"a.log\" not in l for l in lines_clean)\n    assert any(\"b.txt\" in l for l in lines_clean)\n\n\ndef test_write_atomic_creates_file(gs_module, tmp_path):\n    gen = gs_module\n    out_file = tmp_path / \"estructura.txt\"\n    # Generamos un archivo provisional\n    gen.write_atomic(out_file, [\"root\", \"└── file.txt\"])\n\n    assert out_file.exists()\n    content = out_file.read_text(encoding=\"utf-8\")\n    assert \"root\" in content and \"file.txt\" in content\n\n```",
  "type": "text",
  "tags": "[[⚙️ Python]] [[-tests_test-rep-export-Windows_test_generate_structure_Windows.py]] [[--- Codigo]] [[parte_de:--- Codigo]] [[parte_de:tests]] [[usa:Namespace]] [[usa:Path]] [[usa:argparse]] [[usa:añadido]] [[usa:cli_utils_Windows]] [[usa:is_ignored]] [[usa:load_ignore_spec]] [[usa:para]] [[usa:pathlib]] [[usa:pytest]] [[usa:sys]]",
  "tags_list": [
    "[[⚙️ Python]]",
    "[[-tests_test-rep-export-Windows_test_generate_structure_Windows.py]]",
    "[[--- Codigo]]",
    "[[parte_de:--- Codigo]]",
    "[[parte_de:tests]]",
    "[[usa:Namespace]]",
    "[[usa:Path]]",
    "[[usa:argparse]]",
    "[[usa:añadido]]",
    "[[usa:cli_utils_Windows]]",
    "[[usa:is_ignored]]",
    "[[usa:load_ignore_spec]]",
    "[[usa:para]]",
    "[[usa:pathlib]]",
    "[[usa:pytest]]",
    "[[usa:sys]]"
  ],
  "relations": {
    "parte_de": [
      "--- Codigo",
      "tests"
    ],
    "usa": [
      "Namespace",
      "Path",
      "argparse",
      "añadido",
      "cli_utils_Windows",
      "is_ignored",
      "load_ignore_spec",
      "para",
      "pathlib",
      "pytest",
      "sys"
    ]
  }
}