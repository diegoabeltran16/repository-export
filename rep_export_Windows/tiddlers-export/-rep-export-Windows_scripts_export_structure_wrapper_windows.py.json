{
  "title": "-rep-export-Windows_scripts_export_structure_wrapper_windows.py",
  "text": "## [[Tags]]\n[[‚öôÔ∏è Python]] [[-rep-export-Windows_scripts_export_structure_wrapper_windows.py]] [[--- Codigo]]\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nü§ñ Asistente interactivo de exportaci√≥n para Windows\nUbicaci√≥n: rep-export-Windows/scripts/export_structure_wrapper_windows.py\n\nGu√≠a paso a paso para:\n 1) Generar estructura ASCII\n 2) Exportar tiddlers JSON\n 3) Ejecutar ambos secuencialmente\n 4) Mostrar ayuda\n 5) Salir\n\nUtiliza `cli_utils.py` para:\n- prompt_yes_no, confirm_overwrite\n- run_cmd con salida detallada\n- get_additional_args\n- safe_print para evitar errores Unicode\n\"\"\"\nimport sys\nfrom pathlib import Path\n\n# Incluir carpeta padre en path para importar cli_utils\nsys.path.insert(0, str(Path(__file__).resolve().parent.parent))\nfrom cli_utils import (\n    prompt_yes_no,\n    run_cmd,\n    get_additional_args,\n    confirm_overwrite,\n    safe_print\n)\n\n\ndef show_help():\n    safe_print(__doc__)\n    safe_print(\"Ejemplo: opci√≥n 3 ejecuta los dos pasos en secuencia.\")\n\n\ndef get_menu_choice() -> str:\n    choice = input(\"Selecciona [1-5]: \").strip()\n    if choice not in ('1','2','3','4','5'):\n        safe_print(\"‚ùå Opci√≥n inv√°lida. Debe ser 1-5.\")\n        return get_menu_choice()\n    return choice\n\n\ndef main():\n    base = Path(__file__).resolve().parent.parent\n    struct = base / 'generate_structure.py'\n    export = base / 'tiddler_exporter.py'\n\n    # Verificar scripts\n    missing = [s for s in (struct, export) if not s.is_file()]\n    if missing:\n        safe_print(f\"‚ùå No se encontraron: {', '.join(str(m) for m in missing)}\")\n        sys.exit(1)\n\n    while True:\n        safe_print(\"\\n=== Men√∫ de Opciones ===\")\n        safe_print(\"1) Generar estructura ASCII\")\n        safe_print(\"2) Exportar tiddlers JSON\")\n        safe_print(\"3) Generar estructura y exportar tiddlers\")\n        safe_print(\"4) Ayuda\")\n        safe_print(\"5) Salir\")\n        choice = get_menu_choice()\n\n        if choice == '5':\n            safe_print(\"üëã ¬°Hasta luego!\")\n            break\n        if choice == '4':\n            show_help()\n            continue\n\n        # Paso 1: Generar estructura\n        if choice in ('1','3'):\n            safe_print(\"\\nüõ†Ô∏è Configuraci√≥n Estructura ASCII\")\n            args = []\n            if prompt_yes_no(\"¬øExcluir patrones de .gitignore? (no oculta .gitignore)\", default=False):\n                args.append('--honor-gitignore')\n            args += get_additional_args('generate_structure.py')\n            out_name = input(\"Nombre de salida [estructura.txt]: \").strip() or 'estructura.txt'\n            out_path = base / out_name\n            if confirm_overwrite(out_path):\n                args += ['--output', out_name]\n                code, _, _ = run_cmd([sys.executable, str(struct)] + args, cwd=base)\n                if code != 0:\n                    if prompt_yes_no(\"Error al generar. Volver al men√∫?\", default=True):\n                        continue\n                    sys.exit(code)\n            else:\n                safe_print(\"üî∏ Generaci√≥n de estructura cancelada.\")\n\n        # Paso 2: Exportar tiddlers\n        if choice in ('2','3'):\n            safe_print(\"\\nüõ†Ô∏è Configuraci√≥n Exportaci√≥n Tiddlers\")\n            exp_args = []\n            if prompt_yes_no(\"¬øSimulaci√≥n (dry-run)?\", default=False):\n                exp_args.append('--dry-run')\n            exp_args += get_additional_args('tiddler_exporter.py')\n            code, _, _ = run_cmd([sys.executable, str(export)] + exp_args, cwd=base)\n            if code != 0:\n                if prompt_yes_no(\"Error al exportar. Volver al men√∫?\", default=True):\n                    continue\n                sys.exit(code)\n            if '--dry-run' in exp_args and prompt_yes_no(\"Dry-run completado. Ejecutar real?\", default=True):\n                real_args = [a for a in exp_args if a != '--dry-run']\n                code, _, _ = run_cmd([sys.executable, str(export)] + real_args, cwd=base)\n                if code != 0:\n                    sys.exit(code)\n\n        safe_print(\"\\n‚úÖ Operaci√≥n completada con √©xito.\")\n\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        safe_print(\"\\n‚ö†Ô∏è Interrupci√≥n por usuario. Saliendo...\")\n        sys.exit(1)\n\n```",
  "tags": "[[‚öôÔ∏è Python]] [[-rep-export-Windows_scripts_export_structure_wrapper_windows.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250608033205923",
  "modified": "20250608033205923"
}