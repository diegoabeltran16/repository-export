{
  "title": "-rep_export_Windows_tiddler_exporter_windows.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-rep_export_Windows_tiddler_exporter_windows.py]] [[--- Codigo]]\n\n```Python\n#!/usr/bin/env python3\n\"\"\"\nScript: tiddler_exporter.py (Windows)\nPlataforma: Windows\n\nEste script recorre los archivos del repositorio y crea archivos JSON (tiddlers) para TiddlyWiki.\nMejoras:\n- Ignora patrones de .gitignore (salvo `estructura.txt` y `.gitignore`).\n- Exporta solo archivos con extensión válida o nombres especiales, incluyendo `.toml`.\n- Detecta cambios usando hashes para exportar únicamente archivos modificados.\n- Añade tags semánticos con `tag_mapper.get_tags_for_file`:\n  * Tag basado en ruta (`-[ruta_con_underscores]`).\n  * Tag de grupo `--- Codigo`.\n  * Etiqueta de tipo de código con emoji (⚙️ Python, ⚙️ TOML, etc.).\n- Genera bloque Markdown con syntax highlighting adecuado.\n- Soporta `--dry-run` para simulación.\n\nUso:\n  python rep-export-Windows/tiddler_exporter.py [--dry-run]\n\"\"\"\nimport os\nimport sys\nimport json\nimport hashlib\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nimport tag_mapper_windows as tag_mapper\nfrom cli_utils_Windows import safe_print, load_ignore_spec, is_ignored\n\n# ===== Configuración =====\nROOT_DIR = Path(__file__).resolve().parents[1]\nSCRIPT_DIR = Path(__file__).parent\nOUTPUT_DIR = SCRIPT_DIR / \"tiddlers-export\"\nHASH_FILE = SCRIPT_DIR / \".hashes.json\"\n# Carga spec de .gitignore\nIGNORE_SPEC = load_ignore_spec(ROOT_DIR)\n\n# Extensiones válidas: mapea etiquetas y agrega .toml\nVALID_EXT = set(tag_mapper.EXTENSION_TAG_MAP.keys()) | {'.toml'}\nALLOWED_NAMES = set(tag_mapper.SPECIAL_FILENAMES.keys())\n\n# ============================\ndef get_all_files():\n    \"\"\"\n    Genera todos los archivos a exportar:\n    - Siempre incluye 'estructura.txt' y '.gitignore'.\n    - Excluye archivos según .gitignore.\n    - Filtra por extensiones válidas o nombres especiales.\n    \"\"\"\n    for dirpath, dirnames, filenames in os.walk(ROOT_DIR):\n        # Evitar directorios de export/data\n        dirnames[:] = [d for d in dirnames if d not in ('tiddlers-export', 'tiddler_tag_doc')]\n        for name in filenames:\n            path = Path(dirpath) / name\n            rel = str(path.relative_to(ROOT_DIR))\n            # Siempre incluir estos\n            if rel in ('estructura.txt', '.gitignore'):\n                yield path\n                continue\n            # Skip según .gitignore\n            if IGNORE_SPEC and IGNORE_SPEC.match_file(rel):\n                continue\n            # Extensiones y nombres permitidos\n            if path.suffix.lower() in VALID_EXT or name in ALLOWED_NAMES:\n                yield path\n\ndef calc_hash(content: str) -> str:\n    return hashlib.sha1(content.encode('utf-8')).hexdigest()\n\ndef safe_title(path: Path) -> str:\n    \"\"\"\n    Convierte ruta en título: prefijo '-' y '_' en lugar de separadores.\n    \"\"\"\n    return '-' + str(path.relative_to(ROOT_DIR)).replace(os.sep, '_')\n\n\ndef detect_language(path: Path) -> str:\n    \"\"\"\n    Detecta lenguaje para syntax highlighting.\n    \"\"\"\n    ext = path.suffix.lower().lstrip('.')\n    # Toml, Python, etc.\n    return tag_mapper.EXTENSION_TAG_MAP.get(path.suffix.lower(), ext)\n\n\ndef export_tiddlers(dry_run: bool = False):\n    \"\"\"\n    Exporta tiddlers JSON para archivos modificados.\n    \"\"\"\n    OUTPUT_DIR.mkdir(exist_ok=True)\n    # Carga hashes previos\n    old_hashes = {}\n    if HASH_FILE.exists():\n        try:\n            old_hashes = json.loads(HASH_FILE.read_text(encoding='utf-8'))\n        except Exception:\n            old_hashes = {}\n    new_hashes = {}\n    changed = []\n\n    for file in get_all_files():\n        rel = str(file.relative_to(ROOT_DIR))\n        try:\n            content = file.read_text(encoding='utf-8', errors='replace')\n        except Exception:\n            continue\n        h = calc_hash(content)\n        new_hashes[rel] = h\n        if old_hashes.get(rel) == h:\n            continue\n        title = safe_title(file)\n        tags = tag_mapper.get_tags_for_file(file)\n        lang = detect_language(file)\n        text_md = (\n            \"## [[Tags]]\\n\"\n            f\"{' '.join(tags)}\\n\\n\"\n            f\"```{lang}\\n{content}\\n```\"\n        )\n        tiddler = {\n            'title': title,\n            'text': text_md,\n            'tags': ' '.join(tags),\n            'type': 'text/markdown',\n            'created': datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\n            'modified': datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17]\n        }\n        out = OUTPUT_DIR / f\"{title}.json\"\n        if dry_run:\n            safe_print(f\"[dry-run] {rel}\")\n        else:\n            out.write_text(json.dumps(tiddler, ensure_ascii=False, indent=2), encoding='utf-8')\n            safe_print(f\"Exported: {rel}\")\n        changed.append(rel)\n\n    if not dry_run:\n        HASH_FILE.write_text(json.dumps(new_hashes, indent=2), encoding='utf-8')\n\n    # Reporte final\n    safe_print(f\"\\nTotal cambios: {len(changed)}\")\n    for c in changed:\n        safe_print(f\"  - {c}\")\n\n\nif __name__ == '__main__':\n    dry = '--dry-run' in sys.argv\n    module_path = Path(__file__).parents[1] / \"rep-export-Windows\" / \"tiddler_exporter.py\"\n    export_tiddlers(dry_run=dry)\n\n```",
  "tags": "[[⚙️ Python]] [[-rep_export_Windows_tiddler_exporter_windows.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250620153254460",
  "modified": "20250620153254460"
}