{
  "title": "-rep_export_Windows_tiddler_tag_doc_windows_(Estudiar)(Repository Export).json",
  "text": "## [[Tags]]\n[[⚙️ JSON]] [[-rep_export_Windows_tiddler_tag_doc_windows_(Estudiar)(Repository Export).json]] [[--- Codigo]]\n\n```JSON\n[{\"created\":\"20250531001441132\",\"text\":\"{\\n  \\\"id\\\": \\\"--- 🎯 Detalles del proyecto\\\",\\n  \\\"title\\\": \\\"--- 🎯 Detalles del proyecto\\\",\\n  \\\"rol\\\": \\\"documental\\\",\\n  \\\"tags\\\": [\\\"--- 🎯 Detalles del proyecto\\\", \\\"--- 🗂 Principios de programación\\\", \\\"--- 🌀 Desarrollo y Evolucion\\\", \\\"--- Codigo\\\"],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🎯 1. Objetivos\\\", \\\"🎯 2. Requisitos\\\", \\\"🎯 3. DOFA\\\", \\\"🎯 4. Flujo de interaccion\\\", \\\"🎯 5. Arquitectura\\\", \\\"🎯 6. Componentes\\\", \\\"🎯 7. Algoritmos y matematicas\\\"\\n    ],\\n    \\\"requiere\\\": [\\\"--- 🗂 Principios de programación\\\", \\\"--- 🌀 Desarrollo y Evolucion\\\"],\\n    \\\"usa\\\": [\\\"🎯 4. Flujo de interaccion\\\", \\\"🎯 5. Arquitectura\\\"],\\n    \\\"parte_de\\\": [\\\"repository-export\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Define propósito, arquitectura y algoritmos de repository-export basado en la auditoría técnica.\\\",\\n    \\\"markdown\\\": \\\"## 🎯 Detalles del proyecto – repository-export\\\\n\\\\n- **Objetivo funcional**: exportar la estructura jerárquica de archivos y sus hashes SHA-256 desde un repositorio, generando salidas verificables como `estructura.txt` y `*.hashes.json`, y opcionalmente `tiddlers.jsonl`.\\\\n\\\\n- **Arquitectura**: estructura CLI con scripts separados por sistema operativo. Núcleo común (`generate_structure.py`, `cli_utils.py`) + wrappers por OS (Unix, Windows). Complementado con exportadores de tiddlers (`tiddler_exporter.py`).\\\\n\\\\n- **Algoritmos**: recorrido de árbol (`pathlib`), hashing con `hashlib`, mapeo de rutas a etiquetas (`tag_mapper.py`).\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Vector de certeza\\\": \\\"3\\\",\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"baja: los propósitos están claramente expresados\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"las salidas se integran en pipelines posteriores\\\",\\n    \\\"Adaptabilidad\\\": \\\"alta portabilidad y separación de sistemas\\\"\\n  }\\n}\\n\",\"tags\":\"[[--- 🌀 Desarrollo y Evolucion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] ___repository-export\",\"title\":\"___repository-export\",\"modified\":\"20250619183118767\",\"tmap.id\":\"0b5b1111-22d6-441a-aa08-aaaf5cd6520d\",\"color\":\"#fffafa\",\"type\":\"application/json\",\"source\":\"\"},{\"created\":\"20250417160412249\",\"text\":\"{\\n  \\\"id\\\": \\\"--- 🌀 Desarrollo y Evolucion\\\",\\n  \\\"title\\\": \\\"--- 🌀 Desarrollo y Evolucion\\\",\\n  \\\"rol\\\": \\\"evolutivo\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🌀 Desarrollo y Evolucion\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🗂 Estructura de commits\\\",\\n      \\\"🗂 Evolución Semántica\\\"\\n    ],\\n    \\\"parte_de\\\": [\\\"___repository-export\\\"],\\n    \\\"usa\\\": [\\n      \\\"rep-export-LINUXandMAC_generate_structure.py\\\",\\n      \\\"rep-export-Windows_generate_structure.py\\\",\\n      \\\"rep-export-LINUXandMAC_cli_utils.py\\\",\\n      \\\"rep-export-Windows_cli_utils.py\\\",\\n      \\\"tests/\\\",\\n      \\\".github/workflows/\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\",\\n      \\\"--- Codigo\\\"\\n    ]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Análisis de la evolución del repositorio repository-export: desde su división por sistemas operativos hasta la implementación de pruebas automatizadas y la consolidación de funciones comunes.\\\",\\n    \\\"markdown\\\": \\\"## 🌀 Desarrollo y Evolución – `repository-export`\\\\n\\\\nEste nodo examina cómo ha cambiado y madurado el proyecto a lo largo del tiempo.\\\\n\\\\n### 📅 Ciclos de evolución detectados\\\\n- **División inicial por OS**:\\\\n  - Scripts separados para Linux/Mac y Windows desde el inicio.\\\\n  - Reflejo de compatibilidad desde la arquitectura base.\\\\n\\\\n- **Aparición de módulos comunes (`cli_utils.py`, `tag_mapper.py`)**:\\\\n  - Reducción de duplicación mediante consolidación de funciones.\\\\n\\\\n- **Adición de pruebas automatizadas (`pytest` + CI)**:\\\\n  - Tests básicos para `generate_structure.py`.\\\\n  - Workflows GitHub Actions por plataforma.\\\\n\\\\n- **Salida formal como tiddlers JSON**:\\\\n  - Transición de output técnico → documentación semántica.\\\\n\\\\n- **Enfoque de mantenibilidad y portabilidad**:\\\\n  - Separación explícita por OS.\\\\n  - Scripts principales contienen opciones interactivas y CLI defensivo.\\\\n\\\\n### 📈 Patrones detectables\\\\n- El repositorio evoluciona por **capas funcionales**, no por reescritura.\\\\n- Cada nueva 'vuelta' agrega capacidades sin romper compatibilidad previa.\\\\n- Es un diseño **helicoidal**, acumulativo, modular.\\\\n\\\\n### 🔄 Composición y cambios\\\\n- Tests añadidos tras la funcionalidad.\\\\n- Arquitectura CLI adaptada progresivamente a la multiplataforma.\\\\n- Documentación evolucionó de README → estructura.txt → tiddlers.\\\\n\\\\n> Esta trayectoria sugiere un proyecto con visión de largo plazo, más allá del uso puntual de scripts.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media: no todos los cambios están versionados, pero los patrones emergen del código.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: el sistema mantiene cohesión funcional al agregar nuevas partes.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: el proyecto ha evolucionado sin perder claridad técnica.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.9\\\"\\n  }\\n}\\n\",\"tags\":\"[[--- 🌀 Desarrollo y Evolucion]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] ___repository-export\",\"title\":\"--- 🌀 Desarrollo y Evolucion\",\"modified\":\"20250619190301300\",\"tmap.id\":\"72b16a8d-534f-4d73-95e1-d0b3eacc1136\",\"color\":\"#00db70\",\"type\":\"application/json\"},{\"created\":\"20250417031939761\",\"text\":\"{\\n  \\\"id\\\": \\\"--- 🎯 Detalles del proyecto\\\",\\n  \\\"title\\\": \\\"--- 🎯 Detalles del proyecto\\\",\\n  \\\"rol\\\": \\\"documental\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🌀 Desarrollo y Evolución\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🎯 1. Objetivos\\\",\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 3. DOFA\\\",\\n      \\\"🎯 4. Flujo de interaccion\\\",\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 7. Algoritmos y matematicas\\\"\\n    ],\\n    \\\"requiere\\\": [\\\"--- 🗂 Principios de programación\\\", \\\"--- 🌀 Desarrollo y Evolución\\\"],\\n    \\\"parte_de\\\": [\\\"repository-export\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Describe propósito, arquitectura, componentes y trazabilidad de repository-export: scripts multiplataforma que generan estructura.txt, hashes SHA-256 y tiddlers JSON a partir de cualquier repositorio.\\\",\\n    \\\"markdown\\\": \\\"## 🧠 Propósito central\\\\nExportar la *estructura jerárquica* de un repositorio y los *hashes SHA-256* de cada archivo, generando artefactos (`estructura.txt`, `*.hashes.json`, `tiddlers.jsonl`) listos para auditoría, documentación y navegación en TiddlyWiki/OpenPages.\\\\n\\\\n## 📌 Nombre y naturaleza\\\\n- **Nombre completo**: repository-export\\\\n- **Tipo de proyecto**: CLI multiplataforma (Python)\\\\n- **Licencia**: Apache License 2.0 (ver archivo `LICENSE`)\\\\n- **Inspiración**: filosofía KISS, documentación viva, DevOps checksums\\\\n- **Relación**: primer paso en pipelines de verificación/documentación\\\\n- **Metáfora**: \\\\\\\"escáner de ADN\\\\\\\" de un repo\\\\n\\\\n## 🧬 Función en el ecosistema\\\\n| Actor                     | Rol                                                   |\\\\n|---------------------------|--------------------------------------------------------|\\\\n| Proyecto fuente           | Proporciona archivos a recorrer                       |\\\\n| **repository-export**     | Genera snapshot verificable (estructura + hashes)      |\\\\n| Herramientas aguas-abajo  | Verifican integridad o generan documentación semántica |\\\\n\\\\n## ⚙️ Detalles técnicos\\\\n- **Lenguaje**: Python ≥ 3.7\\\\n- **Dependencias**: solo librería estándar + `pytest` para tests\\\\n- **Entrada CLI**: `--repo <ruta>` (oblig.) · `--output` · `--exclude`\\\\n- **Scripts núcleo**:\\\\n  - `generate_structure.py` → estructura y hashes\\\\n  - `cli_utils.py` → helpers/validación\\\\n  - `tag_mapper.py` → etiquetas semánticas\\\\n  - `tiddler_exporter.py` → salida tiddlers JSONL\\\\n- **Wrappers**: Unix (`export_structure_wrapper_unix.py`) y Windows (`export_structure_wrapper_windows.py`)\\\\n- **Salida**: carpeta `tiddlers-export/` con JSON por archivo\\\\n\\\\n## 🧪 Validaciones incluidas\\\\n| Verificación                           | Objetivo                     |\\\\n|----------------------------------------|------------------------------|\\\\n| SHA-256 por archivo                    | Detectar cambios reales      |\\\\n| Tests PyTest por plataforma            | Coherencia multiplataforma   |\\\\n| Workflow CI `python-tests.yml`         | Automatizar verificación     |\\\\n\\\\n## 📦 Distribución esperada\\\\n- Scripts Python prefijo `rep-export-<OS>_`\\\\n- Artefactos `.txt`, `.hashes.json`, `tiddlers.jsonl` en carpeta destino\\\\n- Badge de CI en README (estado de pruebas)\\\\n\\\\n## 🔐 Seguridad y privacidad\\\\n- Solo lee y escribe archivos locales\\\\n- No ejecuta código externo ni llama a APIs\\\\n- Sin datos sensibles almacenados\\\\n\\\\n## 🧬 Trazabilidad helicoidal\\\\n- **V1** – Scripts Linux/Mac iniciales\\\\n- **V2** – Wrapper Windows añadido\\\\n- **V3** – Integración CI + Dependabot\\\\n\\\\n---\\\\n*Vector de certeza global*: **2.9 / 3** (basado en README, scripts y licencia)\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media: ruta de entrada puede variar; límites para symlinks no documentados.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: cada módulo enlaza con etapas aguas-abajo (hash → verificación → documentación).\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: wrappers por OS y CLI flexible.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.9\\\"\\n  }\\n}\\n\",\"title\":\"--- 🎯 Detalles del proyecto\",\"color\":\"#002bdb\",\"modified\":\"20250619185055194\",\"type\":\"application/json\",\"tags\":\"[[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Desarrollo y Evolucion]] [[--- Codigo]] [[🎯 1. Objetivos]] [[🎯 2. Requisitos]] [[🎯 3. DOFA]] [[🎯 4. Flujo de interaccion]] [[🎯 5. Arquitectura]] [[🎯 6. Componentes]] [[🎯 7. Algoritmos y matematicas]] ___repository-export\",\"tmap.id\":\"517da0ac-fcff-4a05-b0e4-4ad331b49c10\"},{\"created\":\"20250417132020369\",\"text\":\"{\\n  \\\"id\\\": \\\"--- 🗂 Principios de programación\\\",\\n  \\\"title\\\": \\\"--- 🗂 Principios de programación\\\",\\n  \\\"rol\\\": \\\"principios\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🌀 Desarrollo y Evolucion\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Modularidad y Estado\\\",\\n      \\\"🗂 Estructura de commits\\\",\\n      \\\"🗂 Usabilidad y Robustez\\\",\\n      \\\"🗂 Epigenética Computacional\\\",\\n      \\\"🗂 Evolución Semántica\\\"\\n    ],\\n    \\\"requiere\\\": [\\\"--- 🎯 Detalles del proyecto\\\"],\\n    \\\"usa\\\": [\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 7. Algoritmos y matematicas\\\"\\n    ],\\n    \\\"parte_de\\\": [\\\"___repository-export\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Este tiddler consolida los principios evolutivos, estructurales y semánticos que guían el diseño técnico de `repository-export`, como modularidad, robustez, claridad semántica y simplicidad multiplataforma.\\\",\\n    \\\"markdown\\\": \\\"## 🗂 Principios de Programación – `repository-export`\\\\n\\\\nEste nodo sintetiza los principios que guían el diseño técnico de `repository-export`:\\\\n\\\\n### 🧱 Diseño\\\\n- Separación de responsabilidades por script.\\\\n- Interfaz CLI clara y centrada en casos de uso específicos.\\\\n\\\\n### ✅ Calidad del Código\\\\n- Legibilidad alta por convención (`snake_case`, funciones pequeñas).\\\\n- Lógica explícita, sin ambigüedades ni side effects ocultos.\\\\n\\\\n### ♻️ Modularidad y Estado\\\\n- Componentes desacoplados por responsabilidad y plataforma.\\\\n- Sin dependencias mutuas entre scripts.\\\\n- Estado mínimo, controlado por archivo y contexto.\\\\n\\\\n### 🧪 Usabilidad y Robustez\\\\n- CLI simplificada.\\\\n- Uso de hashes para evitar procesamientos redundantes.\\\\n- Validaciones previas y salidas seguras.\\\\n\\\\n### 🔁 Epigenética Computacional\\\\n- Diseño que permite crecer por capas: wrappers → lógica → exportador.\\\\n- Capacidad de adaptación a nuevas plataformas o formatos sin perder lo existente.\\\\n\\\\n### 🧠 Evolución Semántica\\\\n- Misma intención mantenida a pesar de los refactors.\\\\n- Significado estable en entradas, salidas y estructura de tiddlers.\\\\n\\\\n### 🔎 Evidencias Técnicas\\\\n- Estructura modular por carpeta (`rep-export-LINUXandMAC/`, `rep-export-Windows/`).\\\\n- Scripts reutilizables (`cli_utils.py`, `tag_mapper.py`).\\\\n- Tiddlers generados coherentes y comparables entre ejecuciones.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Baja: cada módulo tiene responsabilidad única y clara.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: los principios se reflejan tanto en diseño como en salidas.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: puede crecer en complejidad sin perder estabilidad.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.9\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"--- 🗂 Principios de programación\",\"modified\":\"20250619185638224\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Diseño]] [[🗂 Estructura de commits]] [[🗂 Modularidad y Estado]] [[🗂 Calidad del Código]] [[🗂 Usabilidad y Robustez]] [[🗂 Evolución Semántica]] [[🗂 Epigenética Computacional]] ___repository-export\",\"color\":\"#dbbe00\",\"tmap.id\":\"fb77e866-d7bd-4e8b-9d29-7459616658a9\",\"tmap.edges\":\"{\\\"1ed8d863-af9e-4653-b52a-7170ffb2c31c\\\":{\\\"to\\\":\\\"a30a6844-bece-4f9c-add6-6f2d45090b42\\\",\\\"type\\\":\\\"unknown\\\"}}\"},{\"created\":\"20250417170811837\",\"text\":\"{\\n  \\\"id\\\": \\\"--- Codigo\\\",\\n  \\\"title\\\": \\\"--- Codigo\\\",\\n  \\\"rol\\\": \\\"codigo\\\",\\n  \\\"tags\\\": [\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"⚙️🛠 scripts\\\",\\n      \\\"⚙️🤖 Automatización\\\",\\n      \\\"⚙️📘 Documentacion\\\",\\n      \\\"⚙️🛡️ Seguridad\\\",\\n      \\\"⚙️🧪 tests\\\"\\n    ],\\n    \\\"parte_de\\\": [\\\"___repository-export\\\"],\\n    \\\"requiere\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\",\\n      \\\"--- 🗂 Principios de programación\\\"\\n    ]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Inventario técnico del repositorio repository-export, donde cada subcomponente del sistema está desglosado como tiddler hijo: scripts, pruebas, automatización CI, documentación embebida y medidas de seguridad.\\\",\\n    \\\"markdown\\\": \\\"## --- Código – `repository-export`\\\\n\\\\nEste nodo agrupa la **implementación técnica** del repositorio bajo una estructura por funciones:\\\\n\\\\n### 🧩 Subcomponentes definidos\\\\n| Tiddler | Descripción breve |\\\\n|--------|--------------------|\\\\n| ⚙️🛠 scripts | Scripts núcleo del flujo de exportación multiplataforma (Linux/Mac/Windows). |\\\\n| ⚙️🧪 tests | Pruebas automáticas con `pytest` + CI por GitHub Actions. |\\\\n| ⚙️🤖 Automatización | Orquestación de exportaciones controladas por cambios reales. |\\\\n| ⚙️📘 Documentacion | README, estructura y tiddlers generados como salida formal. |\\\\n| ⚙️🛡️ Seguridad | Consideraciones de acceso local, no conectividad, y bajo riesgo de evaluación remota. |\\\\n\\\\n### 📦 Organización general\\\\n```plaintext\\\\nrep-export-LINUXandMAC/      ← versión Unix\\\\nrep-export-Windows/          ← versión Windows\\\\n└── scripts/                 ← punto de entrada CLI\\\\n    └── export_structure_wrapper*.py\\\\n    └── generate_structure.py\\\\n    └── cli_utils.py\\\\n    └── tag_mapper.py\\\\n    └── tiddler_exporter.py\\\\n\\\\n.github/                     ← acciones de CI y dependabot\\\\n/tests/                      ← pruebas unitarias `pytest`\\\\n```\\\\n\\\\n### 📁 Formatos\\\\n- Scripts en Python 3.x (paradigma funcional/procedural).\\\\n- Salidas `.json` compatibles con TiddlyWiki.\\\\n- Entrada vía CLI según sistema operativo.\\\\n\\\\n### 🧠 Comentario general\\\\nEl código se divide en **núcleo común** + **wrappers por OS**. La modularidad facilita mantenimiento, y los puntos de entrada son lo suficientemente claros para escalar o automatizar el sistema.\\\\n\\\\n> Para ampliar cada parte, consulta sus respectivos tiddlers definidos arriba.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media-baja: la estructura es explícita, pero las duplicaciones por OS pueden inducir confusión.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: cada componente cumple una función definida en el pipeline de análisis/exportación.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: la arquitectura permite modificar scripts o añadir entornos fácilmente.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"--- Codigo\",\"modified\":\"20250619190208021\",\"tags\":\"[[--- Codigo]] [[--- 🌀 Desarrollo y Evolucion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] ___repository-export [[🗂 Calidad del Código]] [[🗂 Diseño]] [[🗂 Epigenética Computacional]] [[🗂 Estructura de commits]] [[🗂 Evolución Semántica]] [[🗂 Modularidad y Estado]] [[🗂 Usabilidad y Robustez]]\",\"tmap.id\":\"6a302a06-5761-4a66-b58d-d79b5638d4b9\",\"color\":\"#dc1800\"},{\"title\":\"-.github_dependabot.yml\",\"text\":\"## [[Tags]]\\n[[⚙️ YAML]] [[-.github_dependabot.yml]] [[--- Codigo]]\\n\\n```yaml\\nversion: 2\\n\\nupdates:\\n  - package-ecosystem: \\\"pip\\\"\\n    directory: \\\"/\\\"                # donde vive tu pyproject.toml\\n    schedule:\\n      interval: \\\"daily\\\"\\n      time: \\\"02:00\\\"               # hora UTC\\n    open-pull-requests-limit: 5\\n\\n    # Grupos válidos (solo se permiten 'patterns' y/o 'exclude')\\n    groups:\\n      security-updates:\\n        patterns:\\n          - \\\"*\\\"\\n      routine-updates:\\n        patterns:\\n          - \\\"*\\\"\\n        exclude:\\n          - \\\"pip\\\"                 # evita PRs para pip en sí mismo\\n\\n```\",\"tags\":\"[[⚙️ YAML]] -.github_dependabot.yml [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240595\",\"modified\":\"20250609134240595\",\"tmap.id\":\"c938b0a6-31da-42ae-af95-183ab547f7c2\"},{\"title\":\"-.github_workflows_python-tests.yml\",\"text\":\"## [[Tags]]\\n[[⚙️ YAML]] [[-.github_workflows_python-tests.yml]] [[--- Codigo]]\\n\\n```YAML\\nname: CI - Run Tests\\n\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\n\\npermissions:\\n  contents: read\\n\\njobs:\\n  test:\\n    name: Run all tests\\n    runs-on: ${{ matrix.os }}\\n    strategy:\\n      matrix:\\n        os: [ ubuntu-latest, windows-latest ]\\n        python-version: [ '3.9', '3.10', '3.11' ]\\n\\n    steps:\\n      # 1) Checkout código\\n      - name: Checkout repository\\n        uses: actions/checkout@v4\\n\\n      # 2) Configurar Python\\n      - name: Set up Python ${{ matrix.python-version }}\\n        uses: actions/setup-python@v4\\n        with:\\n          python-version: ${{ matrix.python-version }}\\n          cache: pip\\n\\n      # 3) Instalar proyecto + extras (dev, gitignore)\\n      - name: Install project with dev & gitignore extras\\n        run: |\\n          python -m pip install --upgrade pip\\n          # Instala en editable con extras; incluye pytest y pathspec\\n          pip install \\\".[dev,gitignore]\\\"\\n\\n      # 4) Ejecutar tests\\n      - name: Run pytest\\n        run: pytest tests --maxfail=1 --disable-warnings -q\\n\\n```\",\"tags\":\"[[⚙️ YAML]] -.github_workflows_python-tests.yml [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619220233443\",\"modified\":\"20250619220233443\",\"tmap.id\":\"9d0dd744-2a22-4876-a56f-44798a382ff8\"},{\"title\":\"-.gitignore\",\"text\":\"## [[Tags]]\\n[[--- 🧬 Por Clasificar]] [[-.gitignore]] [[--- Codigo]]\\n\\n```\\n/__pycache__\\nrep-export-LINUXandMAC\\\\__pycache__\\n# Ignore Python cache files\\n\\n\\n# Estructura\\nestructura.txt\\n\\nrep-export-LINUXandMAC/.hashes.json\\nrep-export-LINUXandMAC/tiddlers-export\\n\\nrep-export-Windows/tiddlers-export\\nrep-export-Windows/.hashes.json\\n\\n# Python backend for club management\\n__pycache__/\\n__pycache__\\n*.py[cod]      # Python compiled files\\n*$py.class\\n*.so\\n.Python\\nenv/\\n.env           # Where database passwords are stored\\nvenv/          # Virtual environment for testing\\n.venv\\n\\n# Teacher IDE settings\\n.vscode/       # Ms. Rodriguez uses VS Code\\n.idea/         # Mr. Chen uses PyCharm\\n\\n# Local development & testing\\ninstance/\\n.pytest_cache/\\n.coverage      # Test coverage reports\\nhtmlcov/\\n\\n# Staff computer files\\n.DS_Store      # For teachers with Macs\\nThumbs.db      # For teachers with Windows\\n\\nvenv\\nvenv/\\n.venv\\n.venv/\\n\\nrepository_export.egg-info\\n\\nsecret.txt\\n\\n```\",\"tags\":\"[[--- 🧬 Por Clasificar]] -.gitignore [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619220233417\",\"modified\":\"20250619220233417\",\"tmap.id\":\"510dd6d7-bc02-4e77-9a05-733789ec2b17\"},{\"title\":\"-.pytest_cache_README.md\",\"text\":\"## [[Tags]]\\n[[⚙️ Markdown]] [[-.pytest_cache_README.md]] [[--- Codigo]]\\n\\n```markdown\\n# pytest cache directory #\\n\\nThis directory contains data from the pytest's cache plugin,\\nwhich provides the `--lf` and `--ff` options, as well as the `cache` fixture.\\n\\n**Do not** commit this to version control.\\n\\nSee [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.\\n\\n```\",\"tags\":\"[[⚙️ Markdown]] -.pytest_cache_README.md [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240598\",\"modified\":\"20250609134240598\",\"tmap.id\":\"a141df3a-c703-4a97-b490-cfaea9bfa6fb\"},{\"title\":\"-estructura.txt\",\"text\":\"## [[Tags]]\\n[[⚙️ Text]] [[-estructura.txt]] [[--- Codigo]]\\n\\n```text\\n├── .gitignore\\n├── CODEOWNERS\\n├── estructura.txt\\n├── LICENSE\\n├── pyproject.toml\\n├── README.md\\n├── rep-export-LINUXandMAC\\n│   ├── cli_utils.py\\n│   ├── generate_structure.py\\n│   ├── scripts\\n│   │   └── export_structure_wrapper_unix.py\\n│   ├── tag_mapper.py\\n│   ├── tiddler_exporter.py\\n│   └── tiddler_tag_doc\\n├── rep-export-Windows\\n│   ├── cli_utils.py\\n│   ├── estructura.txt\\n│   ├── generate_structure.py\\n│   ├── scripts\\n│   │   └── export_structure_wrapper_windows.py\\n│   ├── tag_mapper.py\\n│   ├── tiddler_exporter.py\\n│   └── tiddler_tag_doc\\n└── tests\\n    ├── test-rep-export-LINUXandMAC\\n    │   └── test_generate_structure_LINUX&MAC.py\\n    └── test-rep-export-Windows\\n        └── test_generate_structure_Windows.py\\n```\",\"tags\":\"[[⚙️ Text]] -estructura.txt [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240547\",\"modified\":\"20250609134240547\",\"tmap.id\":\"7109cd0e-65e6-4c6d-b58b-b9855796e340\"},{\"title\":\"-LICENSE\",\"text\":\"## [[Tags]]\\n[[⚙️ License]] [[-LICENSE]] [[--- Codigo]]\\n\\n```text\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \\\"Source\\\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \\\"Object\\\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \\\"Contribution\\\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n      \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \\\"[]\\\"\\n      replaced with your own identifying information. (Don't include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \\\"printed page\\\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n\\n```\",\"tags\":\"[[⚙️ License]] -LICENSE [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250608033205885\",\"modified\":\"20250608033205885\",\"tmap.id\":\"fa75fc57-1ced-435a-a8b1-2743afa09692\"},{\"title\":\"-pyproject.toml\",\"text\":\"## [[Tags]]\\n[[--- 🧬 Por Clasificar]] [[-pyproject.toml]] [[--- Codigo]]\\n\\n```text\\n[build-system]\\nrequires = [\\\"setuptools>=61.0\\\"]\\nbuild-backend = \\\"setuptools.build_meta\\\"\\n\\n[project]\\nname = \\\"repository-export\\\"\\nversion = \\\"0.3.0\\\"  # bump por integración de .gitignore\\ndescription = \\\"Automatiza la creación de documentación semántica desde repositorios de código, generando tiddlers para TiddlyWiki.\\\"\\nreadme = \\\"README.md\\\"\\nrequires-python = \\\">=3.7\\\"\\nauthors = [\\n  { name = \\\"Diego Beltrán\\\", email = \\\"tu.email@example.com\\\" }\\n]\\ndependencies = []\\n\\nclassifiers = [\\n  \\\"Development Status :: 4 - Beta\\\",\\n  \\\"Intended Audience :: Developers\\\",\\n  \\\"Topic :: Software Development :: Documentation\\\",\\n  \\\"License :: OSI Approved :: Apache Software License\\\",\\n  \\\"Programming Language :: Python :: 3.7\\\",\\n  \\\"Programming Language :: Python :: 3.8\\\",\\n  \\\"Programming Language :: Python :: 3.9\\\",\\n  \\\"Programming Language :: Python :: 3.10\\\",\\n  \\\"Programming Language :: Python :: 3.11\\\",\\n  \\\"Operating System :: OS Independent\\\"\\n]\\n\\n[project.urls]\\n\\\"Home\\\" = \\\"https://github.com/diegoabeltran16/repository-export\\\"\\n\\\"Repository\\\" = \\\"https://github.com/diegoabeltran16/repository-export\\\"\\n\\\"License\\\" = \\\"https://github.com/diegoabeltran16/repository-export/blob/main/LICENSE\\\"\\n\\n[project.optional-dependencies]\\ndev        = [\\\"pytest\\\"]\\ncli        = [\\\"rich\\\"]\\ngitignore  = [\\\"pathspec>=0.10.1\\\"]  # para soportar carga de .gitignore\\n\\n[tool.setuptools.packages.find]\\nwhere = [\\\".\\\"]\\n\\n```\",\"tags\":\"[[--- 🧬 Por Clasificar]] -pyproject.toml [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619203152401\",\"modified\":\"20250619203152401\",\"tmap.id\":\"d239398e-67cd-4e71-a90d-dc772d5a8788\"},{\"title\":\"-README.md\",\"text\":\"## [[Tags]]\\n[[⚙️ Markdown]] [[-README.md]] [[--- Codigo]]\\n\\n```markdown\\n# 🧠 repository-export\\n\\n[![CI - Run Tests](https://github.com/diegoabeltran16/repository-export/actions/workflows/python-tests.yml/badge.svg)](https://github.com/diegoabeltran16/repository-export/actions/workflows/python-tests.yml)\\n\\n\\n> Repositorio multiplataforma para exportar estructuras de proyectos y generar tiddlers TiddlyWiki con control de versiones y pruebas automatizadas.\\n**Automatiza la creación de documentación semántica a partir de cualquier repositorio de código.**\\nConvierte cada archivo fuente en un tiddler compatible con [TiddlyWiki](https://tiddlywiki.com), con etiquetas, fechas y contenido listo para navegar, estudiar o versionar.\\n\\n---\\n\\n## 🎯 Propósito del proyecto\\n\\nPermite:\\n- Documentar código automáticamente\\n- Clasificar archivos por tipo o contexto semántico\\n- Versionar documentación sin esfuerzo\\n- Estudiar repositorios de terceros de forma estructurada\\n\\n---\\n\\n## 🛠️ ¿Qué hace?\\n\\n✔️ Recorre todo el proyecto<br>\\n✔️ Detecta cambios reales en archivos<br>\\n✔️ Genera un archivo `.json` por cada archivo válido<br>\\n✔️ Cada archivo se convierte en un tiddler TiddlyWiki con:\\n- Título basado en su ruta\\n- Tags (por tipo de archivo o definidos por plantilla)\\n- Bloque de código con resaltado (`markdown`, `python`, `go`, etc.)\\n- Fecha de creación y modificación\\n\\n---\\n\\n## 💻 Uso básico\\n\\n1. Clona el repositorio que deseas escanear y exportar\\n2. Dependiendo de tu sistema operativo (OS) descarga la carpeta \\nrep-export-LINUXandMAC o rep-export-Windows\\n3. Pega la carpeta en tu repositorio y asegurate de tener:\\n**✅ Requisitos**\\n- Python 3.7+\\n- Comando `tree` instalado (`sudo apt install tree` o `brew install tree`)\\n- PowerShell (Windows) o bash/zsh (Unix)\\n4. (Opcional) Si tienes una estructura de tags en tu Tiddler puedes pegar la exportacion en formato .JSON en la carpeta: \\\\tiddler_tag_doc\\n5. Corre el comando que se ajuste a tus OS y elije el menu de opciones que se ajuste a tus necesidades\\n\\n### Linux / macOS\\n```bash\\npython3 rep-export-LINUXandMAC/scripts/export_structure_wrapper_unix.py\\n```\\n\\n### Windows\\n\\n```bash\\npython rep-export-Windows/scripts/export_structure_wrapper_windows.py\\n```\\n6. Revisa la carpeta \\\\tiddlers-export que debio crearse automaticamente , alli encontraras los tiddlers convertidos en formato .JSON\\n\\n---\\n\\n## 🧭 ¿Para qué sirve?\\n\\n| Caso | Beneficio |\\n|------|-----------|\\n| Estudiar un repo ajeno | Documentación viva lista para navegar |\\n| Auditar bugs o deuda técnica | Filtra por tags o analiza estructura |\\n| Enseñar con ejemplos reales | Cada archivo es una unidad didáctica |\\n| Automatizar CI/CD | Exportación controlada por cambios reales |\\n| Crear datasets para LLM | Markdown estructurado + semántica limpia |\\n\\n---\\n\\n## 🔎 Filosofía\\n\\n- 🧱 Modularidad\\n- 🧠 Simplicidad (KISS)\\n- 📚 Documentación como parte del código\\n- 💡 Mantenibilidad multiplataforma\\n\\n> “Cualquiera puede hablar, muestrame el codigo” — Linus Torvalds\\n\\n---\\n\\n## 🚀 Contribuir\\nEste proyecto está hecho para crecer contigo.  \\nÚsalo, modifícalo, exprímelo.  \\nY si lo mejoras: compártelo.\\n\\n---\\n\\n## 📄 Licencia\\nApache 2.0 — Puedes usarlo, modificarlo y distribuirlo libremente, siempre que mantengas el aviso de licencia y las condiciones incluidas.\\n\\n```\",\"tags\":\"[[⚙️ Markdown]] -README.md [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240555\",\"modified\":\"20250609134240555\",\"tmap.id\":\"30fa26c1-cec1-46a9-8b60-3aa8528a965f\"},{\"title\":\"-rep-export-LINUXandMAC_.hashes.json\",\"text\":\"## [[Tags]]\\n[[⚙️ JSON]] [[-rep-export-LINUXandMAC_.hashes.json]] [[--- Codigo]]\\n\\n```json\\n\\n```\",\"tags\":\"[[⚙️ JSON]] -rep-export-LINUXandMAC_.hashes.json [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250608033205908\",\"modified\":\"20250608033205908\",\"tmap.id\":\"955215f3-ac46-47e2-afdc-b3e598cb9663\"},{\"title\":\"-rep-export-LINUXandMAC_cli_utils.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_cli_utils.py]] [[--- Codigo]]\\n\\n```python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nMódulo: cli_utils.py\\nUbicación: rep-export-LINUXandMAC/\\n\\nUtilidades comunes para scripts CLI de Linux/macOS:\\n- `safe_print`         → Imprime mensajes evitando errores de codificación (útil para emojis).\\n- `prompt_yes_no`      → Preguntas interactivas Sí/No con valor por defecto.\\n- `run_cmd`            → Ejecutar comandos externos capturando stdout, stderr y código de salida.\\n- `get_additional_args`→ Parsear argumentos libres introducidos por el usuario.\\n- `confirm_overwrite`  → Confirmar sobrescritura de archivos existentes.\\n\\\"\\\"\\\"\\nimport subprocess\\nimport sys\\nfrom pathlib import Path\\nfrom typing import List, Tuple, Optional\\n\\n\\ndef safe_print(message: str) -> None:\\n    \\\"\\\"\\\"Imprime cadena sin fallar si la consola no soporta algunos caracteres.\\\"\\\"\\\"\\n    try:\\n        print(message)\\n    except UnicodeEncodeError:\\n        encoding = sys.stdout.encoding or 'utf-8'\\n        filtered = message.encode(encoding, errors='ignore').decode(encoding)\\n        print(filtered)\\n\\n\\ndef prompt_yes_no(question: str, default: bool = False) -> bool:\\n    \\\"\\\"\\\"Pregunta interactiva Sí/No con valor por defecto.\\\"\\\"\\\"\\n    default_str = 'S/n' if default else 's/N'\\n    while True:\\n        resp = input(f\\\"{question} [{default_str}]: \\\").strip().lower()\\n        if not resp:\\n            return default\\n        if resp in ('s', 'si', 'y', 'yes'):\\n            return True\\n        if resp in ('n', 'no'):\\n            return False\\n        safe_print(\\\"❗ Respuesta inválida. Usa 's' o 'n'.\\\")\\n\\n\\ndef run_cmd(cmd: List[str], cwd: Optional[Path] = None) -> Tuple[int, str, str]:\\n    \\\"\\\"\\\"\\n    Ejecuta un comando externo y retorna (exit_code, stdout, stderr).\\n    \\\"\\\"\\\"\\n    safe_print(f\\\"\\\\n▶️ Ejecutando: {' '.join(cmd)}\\\\n\\\")\\n    proc = subprocess.Popen(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\\n    out, err = proc.communicate()\\n    if out:\\n        safe_print(out)\\n    if proc.returncode != 0:\\n        safe_print(f\\\"❌ Error (code {proc.returncode}) al ejecutar: {cmd[0]}\\\")\\n        if err:\\n            safe_print(f\\\"📋 stderr:\\\\n{err}\\\")\\n    return proc.returncode, out, err\\n\\n\\ndef get_additional_args(script_name: str) -> List[str]:\\n    \\\"\\\"\\\"Solicita al usuario argumentos adicionales para un script CLI.\\\"\\\"\\\"\\n    extras = input(f\\\"Argumentos extra para {script_name} (separados por espacios), o Enter para ninguno: \\\").strip()\\n    return extras.split() if extras else []\\n\\n\\ndef confirm_overwrite(path: Path) -> bool:\\n    \\\"\\\"\\\"Si `path` existe, pregunta si el usuario desea sobrescribirlo.\\\"\\\"\\\"\\n    if path.exists():\\n        return prompt_yes_no(f\\\"El archivo '{path.name}' ya existe. ¿Sobrescribir?\\\", default=False)\\n    return True\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-LINUXandMAC_cli_utils.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240600\",\"modified\":\"20250609134240600\",\"tmap.id\":\"a54ea574-3599-45c2-8b60-50a1cd9caa72\"},{\"title\":\"-rep-export-LINUXandMAC_generate_structure.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_generate_structure.py]] [[--- Codigo]]\\n\\n```python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nScript: generate_structure.py\\nPlataformas objetivo: Linux y macOS\\n\\nEste script genera un archivo `estructura.txt` que muestra el árbol completo\\nfiltrado del repositorio usando solo caracteres ASCII y codificado en UTF-8.\\nAdmite exclusiones sensibles y respetar .gitignore, así como ejecución en \\\"dry-run\\\".\\n\\nUso:\\n  python3 generate_structure.py [--root PATH] [--output PATH]\\n                               [--honor-gitignore]\\n                               [-e PATTERN ...] [--exclude-from FILE]\\n                               [--dry-run] [-v]\\n\\nEjemplo:\\n  python3 generate_structure.py --honor-gitignore -e node_modules -e '*.log' --dry-run\\n\\\"\\\"\\\"\\nimport os\\nimport sys\\nimport argparse\\nimport logging\\nimport tempfile\\nfrom pathlib import Path\\nimport fnmatch\\n\\n# Exclusiones por defecto\\nIGNORED_DIRS = {\\n    '.git', '.svn', '.hg', '.idea', '__pycache__', 'node_modules',\\n    'dist', 'build', 'venv', '.mypy_cache'\\n}\\nIGNORED_FILES = {'.DS_Store'}\\nIGNORED_EXT = {\\n    '.pyc', '.class', '.o', '.exe', '.dll', '.so', '.dylib', '.pdb'\\n}\\n\\n\\ndef load_gitignore_patterns(repo_root: Path):\\n    \\\"\\\"\\\"Carga patrones desde .gitignore\\\"\\\"\\\"\\n    patterns = []\\n    gitignore = repo_root / '.gitignore'\\n    if gitignore.is_file():\\n        for line in gitignore.read_text(encoding='utf-8').splitlines():\\n            line = line.strip()\\n            if not line or line.startswith('#'):\\n                continue\\n            patterns.append(line)\\n    return patterns\\n\\n\\ndef matches_pattern(path: Path, patterns, repo_root: Path):\\n    rel = str(path.relative_to(repo_root))\\n    return any(fnmatch.fnmatch(rel, pat) for pat in patterns)\\n\\n\\ndef should_skip(path: Path, repo_root: Path, exclude_patterns, honor_gitignore, gitignore_patterns):\\n    name = path.name\\n    if name in IGNORED_DIRS or name in IGNORED_FILES:\\n        return True\\n    if path.suffix.lower() in IGNORED_EXT:\\n        return True\\n    # Ocultos (excepto .gitignore)\\n    if name.startswith('.') and name != '.gitignore':\\n        return True\\n    # Patrones extra\\n    if exclude_patterns and matches_pattern(path, exclude_patterns, repo_root):\\n        return True\\n    # Patrones de .gitignore\\n    if honor_gitignore and gitignore_patterns and matches_pattern(path, gitignore_patterns, repo_root):\\n        # Excepciones: siempre incluir .gitignore y estructura.txt\\n        rel = str(path.relative_to(repo_root))\\n        if rel in ('.gitignore', 'estructura.txt'):\\n            return False\\n        return True\\n    return False\\n\\n\\ndef ascii_tree(root: Path, repo_root: Path, prefix='', args=None, gitignore_patterns=None):\\n    \\\"\\\"\\\"Construye lista de líneas con árbol ASCII filtrado\\\"\\\"\\\"\\n    lines = []\\n    try:\\n        entries = sorted(root.iterdir(), key=lambda p: p.name.lower())\\n    except PermissionError:\\n        logging.warning(f\\\"Permiso denegado: {root}\\\")\\n        return lines\\n\\n    entries = [\\n        e for e in entries\\n        if not should_skip(e, repo_root, args.exclude, args.honor_gitignore, gitignore_patterns)\\n    ]\\n\\n    for idx, entry in enumerate(entries):\\n        connector = '└── ' if idx == len(entries) - 1 else '├── '\\n        lines.append(f\\\"{prefix}{connector}{entry.name}\\\")\\n        if entry.is_dir() and not entry.is_symlink():\\n            extension = '    ' if idx == len(entries) - 1 else '│   '\\n            lines += ascii_tree(entry, repo_root, prefix + extension, args, gitignore_patterns)\\n\\n    return lines\\n\\n\\ndef write_atomic(path: Path, lines):\\n    \\\"\\\"\\\"Escribe de forma atómica reemplazando el archivo destino.\\\"\\\"\\\"\\n    # Crear temporal en la misma carpeta para evitar cross-device errors\\n    tmp = tempfile.NamedTemporaryFile(\\n        'w',\\n        delete=False,\\n        encoding='utf-8',\\n        dir=path.parent\\n    )\\n    with tmp:\\n        tmp.write('\\\\n'.join(lines))\\n    tmp_path = Path(tmp.name)\\n    tmp_path.replace(path)\\n    logging.info(f\\\"Estructura escrita en {path}\\\")\\n\\n\\ndef parse_args():\\n    p = argparse.ArgumentParser(\\n        description=\\\"Genera un árbol ASCII del proyecto con exclusiones de privacidad.\\\"\\n    )\\n    p.add_argument(\\n        '--root', type=Path,\\n        help=\\\"Ruta raíz del proyecto (por defecto: repo root)\\\"\\n    )\\n    p.add_argument(\\n        '--output', '-o', type=Path, default=Path('estructura.txt'),\\n        help=\\\"Archivo de destino (por defecto: <root>/estructura.txt)\\\"\\n    )\\n    p.add_argument(\\n        '--honor-gitignore', action='store_true',\\n        help=\\\"Excluir patrones listados en .gitignore\\\"\\n    )\\n    p.add_argument(\\n        '-e', '--exclude', action='append', default=[],\\n        help=\\\"Patrón glob adicional a excluir (repetible)\\\"\\n    )\\n    p.add_argument(\\n        '--exclude-from', type=Path,\\n        help=\\\"Archivo con patrones glob a excluir (uno por línea)\\\"\\n    )\\n    p.add_argument(\\n        '--dry-run', action='store_true',\\n        help=\\\"Imprime árbol sin escribir archivo\\\"\\n    )\\n    p.add_argument(\\n        '-v', '--verbose', action='count', default=0,\\n        help=\\\"Aumenta nivel de detalle en logs\\\"\\n    )\\n    return p.parse_args()\\n\\n\\ndef main():\\n    args = parse_args()\\n    level = logging.WARNING - (10 * args.verbose)\\n    logging.basicConfig(level=level, format='[%(levelname)s] %(message)s')\\n\\n    repo_root = args.root or Path(__file__).resolve().parents[1]\\n    os.chdir(repo_root)\\n\\n    gitignore_patterns = (\\n        load_gitignore_patterns(repo_root)\\n        if args.honor_gitignore else []\\n    )\\n\\n    if args.exclude_from and args.exclude_from.is_file():\\n        extra = [\\n            line.strip() for line in\\n            args.exclude_from.read_text(encoding='utf-8').splitlines()\\n            if line.strip() and not line.startswith('#')\\n        ]\\n        args.exclude.extend(extra)\\n\\n    logging.info(f\\\"Generando estructura desde {repo_root}\\\")\\n    lines = ascii_tree(\\n        repo_root, repo_root, prefix='',\\n        args=args, gitignore_patterns=gitignore_patterns\\n    )\\n\\n    if args.dry_run:\\n        print('\\\\n'.join(lines))\\n        logging.info(\\\"[dry-run] no se escribió archivo\\\")\\n        return\\n\\n    output_path = args.output if args.output.is_absolute() else repo_root / args.output\\n    write_atomic(output_path, lines)\\n    print(f\\\"\\\\n📂 Estructura exportada a: {output_path}\\\")\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-LINUXandMAC_generate_structure.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240602\",\"modified\":\"20250609134240602\",\"tmap.id\":\"b5ba4670-db23-47aa-a8f4-25d8f0c63c34\"},{\"title\":\"-rep-export-LINUXandMAC_scripts_export_structure_wrapper_unix.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_scripts_export_structure_wrapper_unix.py]] [[--- Codigo]]\\n\\n```python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\n🤖 Asistente interactivo de exportación para Linux/macOS\\nUbicación: rep-export-LINUXandMAC/scripts/export_structure_wrapper_unix.py\\n\\nGuía paso a paso para:\\n 1) Generar estructura ASCII\\n 2) Exportar tiddlers JSON\\n 3) Ejecutar ambos secuencialmente\\n 4) Mostrar ayuda\\n 5) Salir\\n\\nUtiliza `cli_utils.py` para:\\n- prompt_yes_no, confirm_overwrite\\n- run_cmd con salida detallada\\n- get_additional_args\\n- safe_print para evitar errores Unicode\\n\\\"\\\"\\\"\\nimport sys\\nfrom pathlib import Path\\n\\n# Incluir carpeta padre para importar cli_utils\\nsys.path.insert(0, str(Path(__file__).resolve().parent.parent))\\nfrom cli_utils import (\\n    prompt_yes_no,\\n    run_cmd,\\n    get_additional_args,\\n    confirm_overwrite,\\n    safe_print\\n)\\n\\n\\ndef show_help():\\n    safe_print(__doc__)\\n    safe_print(\\\"Ejemplo: opción 3 ejecuta ambos pasos en secuencia.\\\")\\n\\n\\ndef get_menu_choice() -> str:\\n    choice = input(\\\"Selecciona [1-5]: \\\").strip()\\n    if choice not in ('1','2','3','4','5'):\\n        safe_print(\\\"❌ Opción inválida. Debe ser 1-5.\\\")\\n        return get_menu_choice()\\n    return choice\\n\\n\\ndef main():\\n    base = Path(__file__).resolve().parent.parent\\n    struct = base / 'generate_structure.py'\\n    export = base / 'tiddler_exporter.py'\\n\\n    # Verificar scripts\\n    missing = [s for s in (struct, export) if not s.is_file()]\\n    if missing:\\n        safe_print(f\\\"❌ No se encontraron: {', '.join(str(m) for m in missing)}\\\")\\n        sys.exit(1)\\n\\n    while True:\\n        safe_print(\\\"\\\\n=== Menú de Opciones ===\\\")\\n        safe_print(\\\"1) Generar estructura ASCII\\\")\\n        safe_print(\\\"2) Exportar tiddlers JSON\\\")\\n        safe_print(\\\"3) Generar estructura y exportar tiddlers\\\")\\n        safe_print(\\\"4) Ayuda\\\")\\n        safe_print(\\\"5) Salir\\\")\\n        choice = get_menu_choice()\\n\\n        if choice == '5':\\n            safe_print(\\\"👋 ¡Hasta luego!\\\")\\n            break\\n        if choice == '4':\\n            show_help()\\n            continue\\n\\n        # Paso 1: Generar estructura\\n        if choice in ('1','3'):\\n            safe_print(\\\"\\\\n🛠️ Configuración Estructura ASCII\\\")\\n            args = []\\n            if prompt_yes_no(\\\"¿Excluir patrones de .gitignore? (no oculta .gitignore)\\\", default=False):\\n                args.append('--honor-gitignore')\\n            args += get_additional_args('generate_structure.py')\\n            out_name = input(\\\"Nombre de salida [estructura.txt]: \\\").strip() or 'estructura.txt'\\n            out_path = base / out_name\\n            if confirm_overwrite(out_path):\\n                args += ['--output', out_name]\\n                code, _, _ = run_cmd([sys.executable, str(struct)] + args, cwd=base)\\n                if code != 0:\\n                    if prompt_yes_no(\\\"Error al generar. Volver al menú?\\\", default=True):\\n                        continue\\n                    sys.exit(code)\\n            else:\\n                safe_print(\\\"🔸 Generación de estructura cancelada.\\\")\\n\\n        # Paso 2: Exportar tiddlers\\n        if choice in ('2','3'):\\n            safe_print(\\\"\\\\n🛠️ Configuración Exportación Tiddlers\\\")\\n            exp_args = []\\n            if prompt_yes_no(\\\"¿Simulación (dry-run)?\\\", default=False):\\n                exp_args.append('--dry-run')\\n            exp_args += get_additional_args('tiddler_exporter.py')\\n            code, _, _ = run_cmd([sys.executable, str(export)] + exp_args, cwd=base)\\n            if code != 0:\\n                if prompt_yes_no(\\\"Error al exportar. Volver al menú?\\\", default=True):\\n                    continue\\n                sys.exit(code)\\n            if '--dry-run' in exp_args and prompt_yes_no(\\\"Dry-run completado. Ejecutar real?\\\", default=True):\\n                real_args = [a for a in exp_args if a != '--dry-run']\\n                code, _, _ = run_cmd([sys.executable, str(export)] + real_args, cwd=base)\\n                if code != 0:\\n                    sys.exit(code)\\n\\n        safe_print(\\\"\\\\n✅ Operación completada con éxito.\\\")\\n\\nif __name__ == '__main__':\\n    try:\\n        main()\\n    except KeyboardInterrupt:\\n        safe_print(\\\"\\\\n⚠️ Interrupción por usuario. Saliendo...\\\")\\n        sys.exit(1)\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-LINUXandMAC_scripts_export_structure_wrapper_unix.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240607\",\"modified\":\"20250609134240607\",\"tmap.id\":\"f832d0bf-5e4b-42be-bdd5-40e2d3164791\"},{\"title\":\"-rep-export-LINUXandMAC_scripts_export_structure_wrapper.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_scripts_export_structure_wrapper.py]] [[--- Codigo]]\\n\\n```python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nScript interactivo: export_structure_wrapper.py\\nUbicación: rep-export-LINUXandMAC/scripts/\\n\\nEste script es un asistente amigable para generar la estructura de tu proyecto.\\nHace preguntas sencillas y luego invoca el script principal `generate_structure.py`.\\n\\\"\\\"\\\"\\nimport subprocess\\nimport sys\\nfrom pathlib import Path\\n\\ndef prompt_yes_no(question: str, default: bool = True) -> bool:\\n    yes = 'S' if default else 's'\\n    no = 'n' if default else 'N'\\n    prompt = f\\\"{question} [{yes}/{no}]: \\\"\\n    while True:\\n        resp = input(prompt).strip().lower()\\n        if not resp:\\n            return default\\n        if resp in ('s', 'si', 'y', 'yes'):\\n            return True\\n        if resp in ('n', 'no'):\\n            return False\\n        print(\\\"Por favor responde 'S' o 'n'.\\\")\\n\\ndef main():\\n    print(\\\"\\\\n¡Bienvenido al asistente de generación de estructura!\\\\n\\\")\\n    print(\\\"Este asistente te ayudará a crear un listado filtrado de carpetas y archivos de tu proyecto.\\\")\\n    print(\\\"Puedes:\\\")\\n    print(\\\"  - Ver una vista previa sin guardar (dry-run)\\\")\\n    print(\\\"  - Generar un archivo de texto con la estructura\\\")\\n    print(\\\"  - Excluir elementos según .gitignore o patrones personalizados\\\\n\\\")\\n\\n    # Rutas\\n    base = Path(__file__).resolve().parent.parent\\n    script = base / 'generate_structure.py'\\n    if not script.exists():\\n        print(f\\\"❌ No encontré generate_structure.py en {script}\\\")\\n        sys.exit(1)\\n\\n    # Opciones\\n    dry_run = prompt_yes_no(\\\"¿Quieres una vista previa (dry-run)?\\\", default=True)\\n    honor_gitignore = prompt_yes_no(\\\"¿Respetar .gitignore?\\\", default=False)\\n    custom_patterns = input(\\\"Ingresa patrones a excluir separados por comas, o Enter para ninguno: \\\").strip()\\n    exclude_args = []\\n    if custom_patterns:\\n        for pat in [p.strip() for p in custom_patterns.split(',') if p.strip()]:\\n            exclude_args.extend(['-e', pat])\\n\\n    # Salida\\n    print(\\\"\\\\n¿Dónde quieres que se guarde la salida?\\\")\\n    print(\\\"  1) Solo mostrar en pantalla\\\")\\n    print(\\\"  2) Guardar en 'estructura.txt'\\\")\\n    print(\\\"  3) Guardar en nombre personalizado\\\")\\n    choice = input(\\\"Selecciona una opción [1/2/3]: \\\").strip()\\n    if choice == '3':\\n        filename = input(\\\"Nombre de archivo (ej: mi_estructura.txt): \\\").strip()\\n        output_args = ['--output', filename]\\n    elif choice == '2':\\n        output_args = []\\n    else:\\n        # para solo mostrar, forzamos dry-run\\n        if not dry_run:\\n            dry_run = True\\n        output_args = []\\n\\n    # Construir comando\\n    cmd = [sys.executable, str(script)]\\n    if dry_run:\\n        cmd.append('--dry-run')\\n    if honor_gitignore:\\n        cmd.append('--honor-gitignore')\\n    cmd += exclude_args\\n    cmd += output_args\\n\\n    print(f\\\"\\\\nEjecutando: {' '.join(cmd)}\\\\n\\\")\\n    proc = subprocess.run(cmd, cwd=base)\\n    if proc.returncode == 0:\\n        if dry_run or choice == '1':\\n            print(\\\"\\\\n✅ Vista previa completada.\\\")\\n        else:\\n            out_file = output_args[1] if choice == '3' else 'estructura.txt'\\n            print(f\\\"\\\\n✅ Estructura guardada en: {out_file}\\\")\\n    else:\\n        print(\\\"\\\\n❌ Ocurrió un error. Por favor revisa los mensajes anteriores.\\\")\\n        sys.exit(proc.returncode)\\n\\nif __name__ == '__main__':\\n    main()\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-LINUXandMAC_scripts_export_structure_wrapper.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250608033205914\",\"modified\":\"20250608033205914\",\"tmap.id\":\"fe8f04ca-c2fc-4c05-bdb9-fadf81fa87fe\"},{\"title\":\"-rep-export-LINUXandMAC_tag_mapper.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_tag_mapper.py]] [[--- Codigo]]\\n\\n```python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\n📦 Módulo: tag_mapper.py — Linux/macOS alineado a Windows\\n🎯 Plataforma: Linux / macOS\\n\\nFunción:\\n- Asigna tags semánticos a cada archivo del repositorio.\\n- Orden de precedencia:\\n  1. Tags personalizados desde JSON en `tiddler_tag_doc/`.\\n  2. Tag derivado por extensión o nombre especial, con emoji ⚙️.\\n  3. Fallback `--- 🧬 Por Clasificar`.\\n- Además provee:\\n  - `load_ignore_spec(repo_root)` para interpretar `.gitignore`.\\n  - `detect_language(path)` para syntax highlighting.\\n\\nSalida:\\n- `List[str]` con tags en sintaxis TiddlyWiki (`[[Tag]]`).\\n\\\"\\\"\\\"\\nimport json\\nimport os\\nfrom pathlib import Path\\nfrom typing import List, Dict, Any\\n\\n# Intentar importar pathspec para .gitignore\\ntry:\\n    import pathspec  # type: ignore\\nexcept ImportError:\\n    pathspec = None  # type: ignore\\n\\n# ========================================\\n# Rutas y carga de JSON personalizados\\n# ========================================\\nTIDDLER_TAG_DIR = Path(__file__).resolve().parent / \\\"tiddler_tag_doc\\\"\\ntitle_to_tags: Dict[str, List[str]] = {}\\nif TIDDLER_TAG_DIR.is_dir():\\n    for json_file in sorted(TIDDLER_TAG_DIR.glob(\\\"*.json\\\")):\\n        try:\\n            data = json.loads(json_file.read_text(encoding=\\\"utf-8\\\"))\\n            if isinstance(data, list):\\n                for item in data:\\n                    title = item.get(\\\"title\\\", \\\"\\\").strip()\\n                    tags_str = item.get(\\\"tags\\\", \\\"\\\").strip()\\n                    if title and tags_str:\\n                        title_to_tags[title] = tags_str.split()\\n        except Exception as e:\\n            print(f\\\"⚠️ Error leyendo {json_file.name}: {e}\\\")\\n\\n# ========================================\\n# Mapeo extensión → Tag y nombres especiales\\n# ========================================\\nEXTENSION_TAG_MAP: Dict[str, str] = {\\n    # Code\\n    \\\".py\\\": \\\"Python\\\", \\\".js\\\": \\\"JavaScript\\\", \\\".ts\\\": \\\"TypeScript\\\", \\\".go\\\": \\\"Go\\\", \\\".rs\\\": \\\"Rust\\\",\\n    \\\".java\\\": \\\"Java\\\", \\\".c\\\": \\\"C\\\", \\\".cpp\\\": \\\"C++\\\", \\\".cc\\\": \\\"C++\\\", \\\".hpp\\\": \\\"C++\\\",\\n    \\\".rb\\\": \\\"Ruby\\\", \\\".php\\\": \\\"PHP\\\", \\\".kt\\\": \\\"Kotlin\\\", \\\".swift\\\": \\\"Swift\\\",\\n    # Scripting\\n    \\\".sh\\\": \\\"Shell\\\", \\\".bash\\\": \\\"Shell\\\", \\\".ps1\\\": \\\"PowerShell\\\", \\\".bat\\\": \\\"Batch\\\",\\n    # Markup / data\\n    \\\".md\\\": \\\"Markdown\\\", \\\".rst\\\": \\\"Markdown\\\", \\\".html\\\": \\\"HTML\\\", \\\".css\\\": \\\"CSS\\\",\\n    \\\".json\\\": \\\"JSON\\\", \\\".yml\\\": \\\"YAML\\\", \\\".yaml\\\": \\\"YAML\\\", \\\".toml\\\": \\\"TOML\\\",\\n    \\\".csv\\\": \\\"CSV\\\", \\\".xml\\\": \\\"XML\\\", \\\".sql\\\": \\\"SQL\\\", \\\".txt\\\": \\\"Text\\\"\\n}\\n\\nSPECIAL_FILENAMES: Dict[str, str] = {\\n    \\\"Dockerfile\\\": \\\"Dockerfile\\\",\\n    \\\"Makefile\\\": \\\"Makefile\\\",\\n    \\\"README\\\": \\\"README\\\",\\n    \\\"LICENSE\\\": \\\"License\\\",\\n    \\\".gitignore\\\": \\\"Git\\\"\\n}\\n\\nDEFAULT_TAG = \\\"--- 🧬 Por Clasificar\\\"\\n\\n# ========================================\\n# Función para interpretar .gitignore\\n# ========================================\\ndef load_ignore_spec(repo_root: Path) -> Any:\\n    \\\"\\\"\\\"\\n    Retorna un PathSpec para ignorar según .gitignore.\\n    Si pathspec no está disponible, no ignora nada.\\n    \\\"\\\"\\\"\\n    if pathspec:\\n        gitignore = repo_root / '.gitignore'\\n        if gitignore.is_file():\\n            patterns = gitignore.read_text(encoding='utf-8').splitlines()\\n            return pathspec.PathSpec.from_lines('gitwildmatch', patterns)\\n    class DummySpec:\\n        def match_file(self, file_path: str) -> bool:\\n            return False\\n    return DummySpec()\\n\\n# ========================================\\n# Mapeo para syntax highlighting\\n# ========================================\\nHIGHLIGHT_MAP: Dict[str, str] = {\\n    '.py': 'python', '.js': 'javascript', '.ts': 'typescript', '.go': 'go', '.rs': 'rust',\\n    '.java': 'java', '.c': 'c', '.cpp': 'cpp', '.txt': 'text', '.md': 'markdown',\\n    '.json': 'json', '.html': 'html', '.css': 'css', '.yml': 'yaml', '.xml': 'xml'\\n}\\n\\nSPECIAL_HIGHLIGHT: Dict[str, str] = {\\n    '.gitignore': 'gitignore', 'Dockerfile': 'dockerfile', 'Makefile': 'makefile',\\n    'README': 'markdown', 'LICENSE': 'text'\\n}\\n\\n# ========================================\\n# Funciones principales\\n# ========================================\\n\\ndef detect_language(file_path: Path) -> str:\\n    \\\"\\\"\\\"Devuelve la etiqueta de lenguaje para bloques Markdown.\\\"\\\"\\\"\\n    name = file_path.name\\n    if name in SPECIAL_HIGHLIGHT:\\n        return SPECIAL_HIGHLIGHT[name]\\n    return HIGHLIGHT_MAP.get(file_path.suffix.lower(), 'text')\\n\\n\\ndef get_tags_for_file(file_path: Path) -> List[str]:\\n    \\\"\\\"\\\"Devuelve lista de tags TiddlyWiki para `file_path`.\\\"\\\"\\\"\\n    # Construir título basado en ruta\\n    try:\\n        repo_root = Path(__file__).resolve().parents[1]\\n        rel = file_path.relative_to(repo_root)\\n        title = '-' + str(rel).replace(os.sep, '_')\\n    except Exception:\\n        title = '-' + file_path.name\\n\\n    # 1) Tags personalizados\\n    if title in title_to_tags:\\n        tags = title_to_tags[title].copy()\\n    else:\\n        # 2) Derivar tag de tipo con emoji\\n        name = file_path.name\\n        ext = file_path.suffix.lower()\\n        if name in SPECIAL_FILENAMES:\\n            base = SPECIAL_FILENAMES[name]\\n        elif ext in EXTENSION_TAG_MAP:\\n            base = EXTENSION_TAG_MAP[ext]\\n        else:\\n            base = DEFAULT_TAG\\n        if base == DEFAULT_TAG:\\n            tags = [f\\\"[[{base}]]\\\"]\\n        else:\\n            tags = [f\\\"[[⚙️ {base}]]\\\"]\\n\\n    # 3) Tag basado en título (sin emoji)\\n    tags.append(f\\\"[[{title}]]\\\")\\n    # 4) Tag de grupo sin emoji\\n    tags.append(\\\"[[--- Codigo]]\\\")\\n\\n    return tags\\n\\n# CLI de prueba\\nif __name__ == '__main__':\\n    import sys\\n    for arg in sys.argv[1:]:\\n        p = Path(arg)\\n        print(p, '->', get_tags_for_file(p))\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-LINUXandMAC_tag_mapper.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240604\",\"modified\":\"20250609134240604\",\"tmap.id\":\"5d2f1a6e-d103-44c5-acaa-d8cde13a53d5\"},{\"title\":\"-rep-export-LINUXandMAC_tiddler_exporter.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-LINUXandMAC_tiddler_exporter.py]] [[--- Codigo]]\\n\\n```python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nScript: tiddler_exporter.py (Linux/macOS)\\nPlataforma: Linux, macOS\\n\\nEste script recorre los archivos del repositorio y genera archivos JSON (tiddlers) para TiddlyWiki.\\nMejoras:\\n- Ignora patrones de .gitignore (salvo `estructura.txt`).\\n- Exporta solo archivos con extensiones válidas o nombres especiales.\\n- Detecta cambios usando hashes para exportar solo archivos modificados.\\n- Añade tags semánticos con `tag_mapper.get_tags_for_file`:\\n  * Tag de tipo con emoji ⚙️ (p.ej. ⚙️ Python).\\n  * Tag basado en nombre `-ruta_con_underscores` sin emoji.\\n  * Tag de grupo `--- Codigo`.\\n- Genera bloque Markdown con syntax highlighting adecuado desde `tag_mapper.detect_language`.\\n- Soporta `--dry-run` para simulación.\\n\\nUso:\\n  python3 generate_structure.py && python3 tiddler_exporter.py [--dry-run]\\n\\\"\\\"\\\"\\nimport os\\nimport json\\nimport hashlib\\nimport sys\\nfrom datetime import datetime, timezone\\nfrom pathlib import Path\\nimport tag_mapper\\n\\n# ===== Configuración =====\\nROOT_DIR = Path(__file__).resolve().parents[1]\\nSCRIPT_DIR = Path(__file__).parent\\nOUTPUT_DIR = SCRIPT_DIR / \\\"tiddlers-export\\\"\\nHASH_FILE = SCRIPT_DIR / \\\".hashes.json\\\"\\nIGNORE_SPEC = tag_mapper.load_ignore_spec(ROOT_DIR)\\n\\n# Extensiones y nombres permitidos\\nVALID_EXT = set(tag_mapper.EXTENSION_TAG_MAP.keys())\\nALLOWED_NAMES = set(tag_mapper.SPECIAL_FILENAMES.keys())\\n\\n# ===========================\\ndef get_all_files():\\n    \\\"\\\"\\\"\\n    Recorre ROOT_DIR y devuelve archivos a exportar:\\n    - Siempre incluye `estructura.txt`.\\n    - Excluye según .gitignore (IGNORE_SPEC).\\n    - Filtra por extensiones y nombres especiales.\\n    \\\"\\\"\\\"\\n    for dirpath, dirnames, filenames in os.walk(ROOT_DIR):\\n        dirnames[:] = [d for d in dirnames if d not in ('tiddler_tag_doc', 'tiddlers-export')]\\n        for name in filenames:\\n            path = Path(dirpath) / name\\n            rel = str(path.relative_to(ROOT_DIR))\\n            # Incluir estructura.txt siempre\\n            if rel == 'estructura.txt':\\n                yield path\\n                continue\\n            # Ignorar según .gitignore\\n            if IGNORE_SPEC.match_file(rel):\\n                continue\\n            # Filtrar extensiones o nombres especiales\\n            if path.suffix.lower() in VALID_EXT or name in ALLOWED_NAMES:\\n                yield path\\n\\n\\ndef calc_hash(content: str) -> str:\\n    return hashlib.sha1(content.encode('utf-8')).hexdigest()\\n\\n\\ndef safe_title(path: Path) -> str:\\n    \\\"\\\"\\\"Convierte ruta en título: `-ruta_con_guiones`.\\\"\\\"\\\"\\n    return '-' + str(path.relative_to(ROOT_DIR)).replace(os.sep, '_')\\n\\n\\ndef export_tiddlers(dry_run: bool = False):\\n    \\\"\\\"\\\"\\n    Exporta tiddlers JSON para archivos nuevos o modificados.\\n    \\\"\\\"\\\"\\n    OUTPUT_DIR.mkdir(exist_ok=True)\\n    # Cargar hashes previos\\n    old_hashes = {}\\n    if HASH_FILE.exists():\\n        try:\\n            old_hashes = json.loads(HASH_FILE.read_text(encoding='utf-8'))\\n        except Exception:\\n            old_hashes = {}\\n    new_hashes = {}\\n    changed = []\\n\\n    for file in get_all_files():\\n        rel = str(file.relative_to(ROOT_DIR))\\n        content = file.read_text(encoding='utf-8', errors='replace')\\n        h = calc_hash(content)\\n        new_hashes[rel] = h\\n        # Saltar si no cambió\\n        if old_hashes.get(rel) == h:\\n            continue\\n        # Construir tiddler\\n        title = safe_title(file)\\n        tags = tag_mapper.get_tags_for_file(file)\\n        lang = tag_mapper.detect_language(file)\\n        text_md = (\\n            \\\"## [[Tags]]\\\\n\\\"\\n            f\\\"{' '.join(tags)}\\\\n\\\\n\\\"\\n            f\\\"```{lang}\\\\n{content}\\\\n```\\\"\\n        )\\n        tiddler = {\\n            'title': title,\\n            'text': text_md,\\n            'tags': ' '.join(tags),\\n            'type': 'text/markdown',\\n            'created': datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\\n            'modified': datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17]\\n        }\\n        out_file = OUTPUT_DIR / f\\\"{title}.json\\\"\\n        if dry_run:\\n            # Simulación\\n            print(f\\\"[dry-run] {rel}\\\")\\n        else:\\n            out_file.write_text(json.dumps(tiddler, ensure_ascii=False, indent=2), encoding='utf-8')\\n            print(f\\\"Exported: {rel}\\\")\\n        changed.append(rel)\\n\\n    # Guardar nuevos hashes\\n    if not dry_run:\\n        HASH_FILE.write_text(json.dumps(new_hashes, indent=2), encoding='utf-8')\\n\\n    # Resumen final\\n    print(f\\\"\\\\nTotal cambios: {len(changed)}\\\")\\n    for c in changed:\\n        print(f\\\"  - {c}\\\")\\n\\n\\nif __name__ == '__main__':\\n    dry = '--dry-run' in sys.argv\\n    export_tiddlers(dry_run=dry)\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-LINUXandMAC_tiddler_exporter.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240606\",\"modified\":\"20250609134240606\",\"tmap.id\":\"afb3e012-e2e2-4fc9-bdad-9efc60977aa5\"},{\"title\":\"-rep-export-Windows_.hashes.json\",\"text\":\"## [[Tags]]\\n[[⚙️ JSON]] [[-rep-export-Windows_.hashes.json]] [[--- Codigo]]\\n\\n```json\\n{\\n  \\\"estructura.txt\\\": \\\"d65bd0a6cc55cfa6cae9401f84f201ee5be83565\\\",\\n  \\\"LICENSE\\\": \\\"7df059597099bb7dcf25d2a9aedfaf4465f72d8d\\\",\\n  \\\"README.md\\\": \\\"a17e65fe4b1ccf04179a5daf7743a7ea05a833bc\\\",\\n  \\\".github\\\\\\\\dependabot.yml\\\": \\\"e77e6853e4c539c4a0e069e1296a58f210f2776e\\\",\\n  \\\".github\\\\\\\\workflows\\\\\\\\python-tests.yml\\\": \\\"c54eb8c4799c0ffb23cb476816abd07b4f5a0861\\\",\\n  \\\".pytest_cache\\\\\\\\README.md\\\": \\\"54be9e578952c88d983b7d92c5f96579869575a3\\\",\\n  \\\"rep-export-LINUXandMAC\\\\\\\\.hashes.json\\\": \\\"da39a3ee5e6b4b0d3255bfef95601890afd80709\\\",\\n  \\\"rep-export-LINUXandMAC\\\\\\\\cli_utils.py\\\": \\\"71034fc1ca217b9c3579e994e395c7103c376b2b\\\",\\n  \\\"rep-export-LINUXandMAC\\\\\\\\generate_structure.py\\\": \\\"186a55efc9148504f84439c0b1673dc6cf3716b1\\\",\\n  \\\"rep-export-LINUXandMAC\\\\\\\\tag_mapper.py\\\": \\\"d0d880fd8b5b31eb594efba5e2fbca61a5752f51\\\",\\n  \\\"rep-export-LINUXandMAC\\\\\\\\tiddler_exporter.py\\\": \\\"5cc9f423791312f5b3d1362f184b05858d4fc027\\\",\\n  \\\"rep-export-LINUXandMAC\\\\\\\\scripts\\\\\\\\export_structure_wrapper_unix.py\\\": \\\"787d0cd85f87d5677e64aa454cbd91a30e59616b\\\",\\n  \\\"rep-export-Windows\\\\\\\\.hashes.json\\\": \\\"67fbccdffb1b814a13fc7aa1b8302a6c4863a310\\\",\\n  \\\"rep-export-Windows\\\\\\\\cli_utils.py\\\": \\\"44603700df11e8760ac3472a76abab842fbe0588\\\",\\n  \\\"rep-export-Windows\\\\\\\\estructura.txt\\\": \\\"e22973ede969aa29f3aab5ae5e18be5f148ac566\\\",\\n  \\\"rep-export-Windows\\\\\\\\generate_structure.py\\\": \\\"23bff4cb5d55b1ecf9eed00712e236646dcba17a\\\",\\n  \\\"rep-export-Windows\\\\\\\\tag_mapper.py\\\": \\\"576500b7c53d3888f18e1b89825a2006c8381936\\\",\\n  \\\"rep-export-Windows\\\\\\\\tiddler_exporter.py\\\": \\\"12df2a8e3e09bc3f6a6c629cd8defd49db0376f2\\\",\\n  \\\"rep-export-Windows\\\\\\\\scripts\\\\\\\\export_structure_wrapper_windows.py\\\": \\\"07b73eb643166ab3040dd197f7ba01b5b108a3cb\\\",\\n  \\\"tests\\\\\\\\test-rep-export-LINUXandMAC\\\\\\\\test_generate_structure_LINUX&MAC.py\\\": \\\"ca20d40c668291de5e2a16145d32a213513e1574\\\",\\n  \\\"tests\\\\\\\\test-rep-export-Windows\\\\\\\\test_generate_structure_Windows.py\\\": \\\"b00696c86ffd552d505bebe901c65290f6a4f40d\\\"\\n}\\n```\",\"tags\":\"[[⚙️ JSON]] -rep-export-Windows_.hashes.json [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619180629799\",\"modified\":\"20250619180629800\",\"tmap.id\":\"98991316-a25f-4ccc-8681-8b38ed3952a1\"},{\"title\":\"-rep-export-Windows_cli_utils.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-Windows_cli_utils.py]] [[--- Codigo]]\\n\\n```Python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nMódulo: cli_utils.py\\nUbicación: rep-export-Windows/\\n\\nUtilidades comunes para scripts CLI:\\n- `prompt_yes_no`  → Preguntas sí/no con valor por defecto.\\n- `run_cmd`        → Ejecutar subprocesos con captura de stdout, stderr y código.\\n- `get_additional_args` → Parsear argumentos libres del usuario.\\n- `confirm_overwrite`   → Confirmar sobreescritura de archivos existentes.\\n- `safe_print`     → Imprime mensajes evitando errores de codificación (emojis).\\n- `load_ignore_spec` → Carga y compila patrones de `.gitignore`.\\n- `is_ignored`     → Verifica si una ruta debe ser ignorada según `.gitignore`.\\n\\\"\\\"\\\"\\nimport subprocess\\nimport sys\\nfrom pathlib import Path\\nfrom typing import List, Tuple, Optional\\nfrom pathspec import PathSpec\\n\\n\\ndef safe_print(message: str) -> None:\\n    \\\"\\\"\\\"Imprime evitando errores de codificación en consolas con encoding limitado.\\\"\\\"\\\"\\n    try:\\n        print(message)\\n    except UnicodeEncodeError:\\n        encoding = sys.stdout.encoding or 'utf-8'\\n        filtered = message.encode(encoding, errors='ignore').decode(encoding)\\n        print(filtered)\\n\\n\\ndef prompt_yes_no(question: str, default: bool = False) -> bool:\\n    \\\"\\\"\\\"Pregunta interactiva sí/no con valor por defecto.\\\"\\\"\\\"\\n    default_str = 'S/n' if default else 's/N'\\n    while True:\\n        resp = input(f\\\"{question} [{default_str}]: \\\").strip().lower()\\n        if not resp:\\n            return default\\n        if resp in ('s', 'si', 'y', 'yes'):\\n            return True\\n        if resp in ('n', 'no'):\\n            return False\\n        safe_print(\\\"❗ Respuesta inválida. Usa 's' o 'n'.\\\")\\n\\n\\ndef run_cmd(cmd: List[str], cwd: Optional[Path] = None) -> Tuple[int, str, str]:\\n    \\\"\\\"\\\"\\n    Ejecuta un comando externo y captura salida.\\n\\n    Returns:\\n        exit_code: Código de salida del proceso\\n        stdout:   Salida estándar capturada\\n        stderr:   Salida de error capturada\\n    \\\"\\\"\\\"\\n    safe_print(f\\\"\\\\n▶️ Ejecutando: {' '.join(cmd)}\\\\n\\\")\\n    proc = subprocess.Popen(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\\n    out, err = proc.communicate()\\n    if out:\\n        safe_print(out)\\n    if proc.returncode != 0:\\n        safe_print(f\\\"❌ Error (code {proc.returncode}) al ejecutar: {cmd[0]}\\\")\\n        if err:\\n            safe_print(f\\\"📋 stderr:\\\\n{err}\\\")\\n    return proc.returncode, out, err\\n\\n\\ndef get_additional_args(script_name: str) -> List[str]:\\n    \\\"\\\"\\\"Solicita argumentos adicionales para un script (retorna lista).\\\"\\\"\\\"\\n    extras = input(f\\\"Argumentos extra para {script_name} (separados por espacios), o Enter para ninguno: \\\").strip()\\n    return extras.split() if extras else []\\n\\n\\ndef confirm_overwrite(path: Path) -> bool:\\n    \\\"\\\"\\\"Verifica si el usuario acepta sobrescribir el archivo si ya existe.\\\"\\\"\\\"\\n    if path.exists():\\n        return prompt_yes_no(f\\\"El archivo '{path.name}' ya existe. ¿Sobrescribir?\\\", default=False)\\n    return True\\n\\n\\ndef load_ignore_spec(repo_root: Path) -> PathSpec:\\n    \\\"\\\"\\\"\\n    Carga y compila los patrones de `.gitignore` desde el directorio raíz.\\n    Devuelve un PathSpec usable para match_file(path).\\n    \\\"\\\"\\\"\\n    gitignore_path = repo_root / \\\".gitignore\\\"\\n    if not gitignore_path.exists():\\n        return PathSpec.from_lines(\\\"gitwildmatch\\\", [])\\n\\n    lines = []\\n    with gitignore_path.open(\\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n        for line in f:\\n            ln = line.strip()\\n            if not ln or ln.startswith('#'):\\n                continue\\n            lines.append(ln)\\n    return PathSpec.from_lines(\\\"gitwildmatch\\\", lines)\\n\\n\\ndef is_ignored(path: Path, repo_root: Path, ignore_spec: PathSpec) -> bool:\\n    \\\"\\\"\\\"\\n    Verifica si una ruta debe ser ignorada por `.gitignore`.\\n    Path debe ser relativo o absoluto dentro de repo_root.\\n    \\\"\\\"\\\"\\n    rel = str(path.relative_to(repo_root))\\n    return ignore_spec.match_file(rel)\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-Windows_cli_utils.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619220233447\",\"modified\":\"20250619220233447\",\"tmap.id\":\"cc36f1e2-35fc-4e58-9efd-d6a707a6e846\"},{\"title\":\"-rep-export-Windows_estructura.txt\",\"text\":\"## [[Tags]]\\n[[⚙️ Text]] [[-rep-export-Windows_estructura.txt]] [[--- Codigo]]\\n\\n```text\\n├── estructura.txt\\n├── generate_structure.py\\n├── scripts\\n│   └── export_structure_wrapper_windows.py\\n├── tag_mapper.py\\n├── tiddler_exporter.py\\n├── tiddler_tag_doc\\n└── tiddlers-export\\n    ├── -.github_dependabot.yml.json\\n    ├── -.github_workflows_python-tests.yml.json\\n    ├── -estructura.txt.json\\n    ├── -LICENSE.json\\n    ├── -README.md.json\\n    ├── -rep-export-LINUXandMAC_.hashes.json.json\\n    ├── -rep-export-LINUXandMAC_generate_structure.py.json\\n    ├── -rep-export-LINUXandMAC_scripts_export_structure_wrapper.py.json\\n    ├── -rep-export-LINUXandMAC_tag_mapper.py.json\\n    ├── -rep-export-LINUXandMAC_tiddler_exporter.py.json\\n    ├── -rep-export-Windows_.hashes.json.json\\n    ├── -rep-export-Windows_generate_structure.py.json\\n    ├── -rep-export-Windows_scripts_export_structure_wrapper_windows.py.json\\n    ├── -rep-export-Windows_tag_mapper.py.json\\n    ├── -rep-export-Windows_tiddler_exporter.py.json\\n    ├── -test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py.json\\n    └── -test-rep-export-Windows_test_generate_structure_Windows.py.json\\n```\",\"tags\":\"[[⚙️ Text]] -rep-export-Windows_estructura.txt [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250608033205918\",\"modified\":\"20250608033205918\",\"tmap.id\":\"6c3b41da-310e-4e87-81ee-223612fc38e2\"},{\"title\":\"-rep-export-Windows_generate_structure.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-Windows_generate_structure.py]] [[--- Codigo]]\\n\\n```Python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nMódulo: generate_structure.py\\nUbicación: rep-export-Windows/\\n\\nGenera un árbol ASCII del repositorio, respetando .gitignore y\\nforzando que siempre se incluyan `.gitignore` y `estructura.txt`.\\n\\\"\\\"\\\"\\nimport os\\nimport sys\\nimport argparse\\nimport logging\\nimport tempfile\\nfrom pathlib import Path\\nimport fnmatch\\nfrom pathspec import PathSpec\\n\\n# Import absoluto: cli_utils debe estar en sys.path (añadido por tests)\\nimport cli_utils\\nfrom cli_utils import load_ignore_spec, is_ignored\\n\\n# Exclusiones por defecto (sin __pycache__ para tests)\\nIGNORED_DIRS = {'.git', '.svn', '.hg', '.idea', 'node_modules', 'dist', 'build', 'venv', '.mypy_cache'}\\nIGNORED_FILES = {'.DS_Store'}\\nIGNORED_EXT   = {'.pyc', '.class', '.o', '.exe', '.dll', '.so', '.dylib', '.pdb'}\\n\\n\\ndef load_gitignore_patterns(repo_root: Path):\\n    \\\"\\\"\\\"Devuelve lista de patrones (glob) extraídos de .gitignore.\\\"\\\"\\\"\\n    gitignore = repo_root / '.gitignore'\\n    if not gitignore.is_file():\\n        return []\\n    lines = [ln.strip() for ln in gitignore.read_text(encoding='utf-8').splitlines()\\n             if ln.strip() and not ln.strip().startswith('#')]\\n    return lines\\n\\n\\ndef matches_pattern(path: Path, patterns, repo_root: Path):\\n    \\\"\\\"\\\"True si la ruta relativa coincide con algún patrón glob.\\\"\\\"\\\"\\n    rel = str(path.relative_to(repo_root))\\n    return any(fnmatch.fnmatch(rel, pat) for pat in patterns)\\n\\n\\ndef should_skip(path: Path, repo_root: Path, exclude_patterns, honor_gitignore: bool, ignore_spec: PathSpec):\\n    rel = str(path.relative_to(repo_root))\\n    # Quita barra final para directorios\\n    if path.is_dir() and not rel.endswith('/'):\\n        rel += '/'\\n    # Excluye por .gitignore\\n    if honor_gitignore and ignore_spec and ignore_spec.match_file(rel):\\n        return True\\n    # Excluye por patrones extra\\n    if exclude_patterns and any(p in rel for p in exclude_patterns):\\n        return True\\n    return False\\n\\n\\ndef ascii_tree(root: Path, repo_root: Path, prefix: str = '', args=None, gitignore_patterns=None, gitignore_spec=None):\\n    \\\"\\\"\\\"\\n    Construye líneas de árbol ASCII, filtrando según skip logic.\\n    \\\"\\\"\\\"\\n    # determinar PathSpec a usar\\n    if args and getattr(args, 'honor_gitignore', False):\\n        ignore_spec = load_ignore_spec(repo_root)\\n    else:\\n        ignore_spec = gitignore_spec\\n    exclude_patterns = getattr(args, 'exclude', []) or []\\n\\n    lines = []\\n    try:\\n        entries = sorted(root.iterdir(), key=lambda p: p.name.lower())\\n    except PermissionError:\\n        logging.warning(f\\\"Permiso denegado: {root}\\\")\\n        return lines\\n\\n    # filtrar\\n    entries = [e for e in entries if not should_skip(e, repo_root, exclude_patterns, getattr(args, 'honor_gitignore', False), ignore_spec)]\\n\\n    # construir\\n    for idx, entry in enumerate(entries):\\n        connector = '└── ' if idx == len(entries) - 1 else '├── '\\n        lines.append(f\\\"{prefix}{connector}{entry.name}\\\")\\n        if entry.is_dir() and not entry.is_symlink():\\n            extension = '    ' if idx == len(entries) - 1 else '│   '\\n            lines += ascii_tree(entry, repo_root, prefix + extension, args, gitignore_patterns, ignore_spec)\\n    return lines\\n\\n\\ndef write_atomic(path: Path, lines):\\n    \\\"\\\"\\\"Escribe de forma atómica usando tempfile + replace.\\\"\\\"\\\"\\n    tmp = tempfile.NamedTemporaryFile('w', delete=False, encoding='utf-8')\\n    with tmp:\\n        tmp.write('\\\\n'.join(lines))\\n    Path(tmp.name).replace(path)\\n    logging.info(f\\\"Estructura escrita en {path}\\\")\\n\\n\\ndef parse_args():\\n    p = argparse.ArgumentParser(description=\\\"Genera estructura ASCII filtrada del repo.\\\")\\n    p.add_argument('--output', '-o', type=Path, default=Path('estructura.txt'), help=\\\"Archivo de salida.\\\")\\n    p.add_argument('--exclude', '-e', action='append', default=[], help=\\\"Patrón glob para excluir.\\\")\\n    p.add_argument('--exclude-from', type=Path, help=\\\"Archivo con patrones de exclusión.\\\")\\n    p.add_argument('--honor-gitignore', action='store_true', help=\\\"Respetar .gitignore.\\\")\\n    p.add_argument('--verbose', '-v', action='count', default=0, help=\\\"Nivel de detalle logs.\\\")\\n    return p.parse_args()\\n\\n\\ndef main():\\n    args = parse_args()\\n    level = logging.WARNING - 10 * args.verbose\\n    logging.basicConfig(level=level, format='[%(levelname)s] %(message)s')\\n    repo_root = Path(__file__).resolve().parent\\n    os.chdir(repo_root)\\n    if args.exclude_from and args.exclude_from.is_file():\\n        args.exclude += [ln.strip() for ln in args.exclude_from.read_text(encoding='utf-8').splitlines() if ln.strip() and not ln.strip().startswith('#')]\\n    logging.info(f\\\"Generando estructura desde {repo_root}\\\")\\n    lines = ascii_tree(repo_root, repo_root, prefix='', args=args)\\n    write_atomic(repo_root / args.output, lines)\\n\\nif __name__ == '__main__':\\n    main()\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-Windows_generate_structure.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619220233448\",\"modified\":\"20250619220233448\",\"tmap.id\":\"cc6bb391-cad3-4dfa-96ce-e5fa9859574d\"},{\"title\":\"-rep-export-Windows_scripts_export_structure_wrapper_windows.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-Windows_scripts_export_structure_wrapper_windows.py]] [[--- Codigo]]\\n\\n```python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\n🤖 Asistente interactivo de exportación para Windows\\nUbicación: rep-export-Windows/scripts/export_structure_wrapper_windows.py\\n\\nGuía paso a paso para:\\n 1) Generar estructura ASCII\\n 2) Exportar tiddlers JSON\\n 3) Ejecutar ambos secuencialmente\\n 4) Mostrar ayuda\\n 5) Salir\\n\\nUtiliza `cli_utils.py` para:\\n- prompt_yes_no, confirm_overwrite\\n- run_cmd con salida detallada\\n- get_additional_args\\n- safe_print para evitar errores Unicode\\n\\\"\\\"\\\"\\nimport sys\\nfrom pathlib import Path\\n\\n# Incluir carpeta padre en path para importar cli_utils\\nsys.path.insert(0, str(Path(__file__).resolve().parent.parent))\\nfrom cli_utils import (\\n    prompt_yes_no,\\n    run_cmd,\\n    get_additional_args,\\n    confirm_overwrite,\\n    safe_print\\n)\\n\\n\\ndef show_help():\\n    safe_print(__doc__)\\n    safe_print(\\\"Ejemplo: opción 3 ejecuta los dos pasos en secuencia.\\\")\\n\\n\\ndef get_menu_choice() -> str:\\n    choice = input(\\\"Selecciona [1-5]: \\\").strip()\\n    if choice not in ('1','2','3','4','5'):\\n        safe_print(\\\"❌ Opción inválida. Debe ser 1-5.\\\")\\n        return get_menu_choice()\\n    return choice\\n\\n\\ndef main():\\n    base = Path(__file__).resolve().parent.parent\\n    struct = base / 'generate_structure.py'\\n    export = base / 'tiddler_exporter.py'\\n\\n    # Verificar scripts\\n    missing = [s for s in (struct, export) if not s.is_file()]\\n    if missing:\\n        safe_print(f\\\"❌ No se encontraron: {', '.join(str(m) for m in missing)}\\\")\\n        sys.exit(1)\\n\\n    while True:\\n        safe_print(\\\"\\\\n=== Menú de Opciones ===\\\")\\n        safe_print(\\\"1) Generar estructura ASCII\\\")\\n        safe_print(\\\"2) Exportar tiddlers JSON\\\")\\n        safe_print(\\\"3) Generar estructura y exportar tiddlers\\\")\\n        safe_print(\\\"4) Ayuda\\\")\\n        safe_print(\\\"5) Salir\\\")\\n        choice = get_menu_choice()\\n\\n        if choice == '5':\\n            safe_print(\\\"👋 ¡Hasta luego!\\\")\\n            break\\n        if choice == '4':\\n            show_help()\\n            continue\\n\\n        # Paso 1: Generar estructura\\n        if choice in ('1','3'):\\n            safe_print(\\\"\\\\n🛠️ Configuración Estructura ASCII\\\")\\n            args = []\\n            if prompt_yes_no(\\\"¿Excluir patrones de .gitignore? (no oculta .gitignore)\\\", default=False):\\n                args.append('--honor-gitignore')\\n            args += get_additional_args('generate_structure.py')\\n            out_name = input(\\\"Nombre de salida [estructura.txt]: \\\").strip() or 'estructura.txt'\\n            out_path = base / out_name\\n            if confirm_overwrite(out_path):\\n                args += ['--output', out_name]\\n                code, _, _ = run_cmd([sys.executable, str(struct)] + args, cwd=base)\\n                if code != 0:\\n                    if prompt_yes_no(\\\"Error al generar. Volver al menú?\\\", default=True):\\n                        continue\\n                    sys.exit(code)\\n            else:\\n                safe_print(\\\"🔸 Generación de estructura cancelada.\\\")\\n\\n        # Paso 2: Exportar tiddlers\\n        if choice in ('2','3'):\\n            safe_print(\\\"\\\\n🛠️ Configuración Exportación Tiddlers\\\")\\n            exp_args = []\\n            if prompt_yes_no(\\\"¿Simulación (dry-run)?\\\", default=False):\\n                exp_args.append('--dry-run')\\n            exp_args += get_additional_args('tiddler_exporter.py')\\n            code, _, _ = run_cmd([sys.executable, str(export)] + exp_args, cwd=base)\\n            if code != 0:\\n                if prompt_yes_no(\\\"Error al exportar. Volver al menú?\\\", default=True):\\n                    continue\\n                sys.exit(code)\\n            if '--dry-run' in exp_args and prompt_yes_no(\\\"Dry-run completado. Ejecutar real?\\\", default=True):\\n                real_args = [a for a in exp_args if a != '--dry-run']\\n                code, _, _ = run_cmd([sys.executable, str(export)] + real_args, cwd=base)\\n                if code != 0:\\n                    sys.exit(code)\\n\\n        safe_print(\\\"\\\\n✅ Operación completada con éxito.\\\")\\n\\nif __name__ == '__main__':\\n    try:\\n        main()\\n    except KeyboardInterrupt:\\n        safe_print(\\\"\\\\n⚠️ Interrupción por usuario. Saliendo...\\\")\\n        sys.exit(1)\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-Windows_scripts_export_structure_wrapper_windows.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250608033205923\",\"modified\":\"20250608033205923\",\"tmap.id\":\"e231b2bf-102f-4469-84b0-65bd23823038\"},{\"title\":\"-rep-export-Windows_tag_mapper.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-Windows_tag_mapper.py]] [[--- Codigo]]\\n\\n```python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\n📦 Módulo: tag_mapper.py (Windows)\\n🎯 Plataforma: Windows\\n\\nFunción:\\nGenera tags semánticos para archivos del repositorio.\\nOrden de precedencia:\\n1. Tags personalizados desde JSON en `tiddler_tag_doc/`.\\n2. Tag derivado por extensión o nombre especial.\\n3. Fallback `--- 🧬 Por Clasificar`.\\n\\nTambién provee:\\n- `load_ignore_spec(repo_root)` para interpretar `.gitignore`.\\n- `detect_language(file_path)` para syntax highlighting.\\n\\nSalida:\\nList[str] con tags en sintaxis TiddlyWiki (`[[TagName]]`).\\n\\\"\\\"\\\"\\nimport json\\nimport os\\nfrom pathlib import Path\\nfrom typing import List, Dict, Any\\n\\n# Intentar importar pathspec para respetar .gitignore\\ntry:\\n    import pathspec  # type: ignore\\nexcept ImportError:\\n    pathspec = None  # type: ignore\\n\\n# ========================================\\n# Rutas y carga de JSON personalizados\\n# ========================================\\nTIDDLER_TAG_DIR = Path(__file__).resolve().parent / \\\"tiddler_tag_doc\\\"\\n\\n# Mapa de título a tags personalizados\\ntitle_to_tags: Dict[str, List[str]] = {}\\nif TIDDLER_TAG_DIR.is_dir():\\n    for json_file in sorted(TIDDLER_TAG_DIR.glob(\\\"*.json\\\")):\\n        try:\\n            data = json.loads(json_file.read_text(encoding=\\\"utf-8\\\"))\\n            if isinstance(data, list):\\n                for item in data:\\n                    title = item.get(\\\"title\\\", \\\"\\\").strip()\\n                    tags_str = item.get(\\\"tags\\\", \\\"\\\").strip()\\n                    if title and tags_str:\\n                        title_to_tags[title] = tags_str.split()\\n        except Exception as e:\\n            print(f\\\"⚠️ Error leyendo {json_file.name}: {e}\\\")\\n\\n# ========================================\\n# Mapeo extensión → Tag\\n# ========================================\\nEXTENSION_TAG_MAP: Dict[str, str] = {\\n    # Code\\n    \\\".py\\\": \\\"Python\\\", \\\".js\\\": \\\"JavaScript\\\", \\\".ts\\\": \\\"TypeScript\\\", \\\".go\\\": \\\"Go\\\", \\\".rs\\\": \\\"Rust\\\",\\n    \\\".java\\\": \\\"Java\\\", \\\".c\\\": \\\"C\\\", \\\".cpp\\\": \\\"C++\\\", \\\".cc\\\": \\\"C++\\\", \\\".hpp\\\": \\\"C++\\\",\\n    \\\".rb\\\": \\\"Ruby\\\", \\\".php\\\": \\\"PHP\\\", \\\".kt\\\": \\\"Kotlin\\\", \\\".swift\\\": \\\"Swift\\\",\\n    # Scripting\\n    \\\".sh\\\": \\\"Shell\\\", \\\".bash\\\": \\\"Shell\\\", \\\".ps1\\\": \\\"PowerShell\\\", \\\".bat\\\": \\\"Batch\\\",\\n    # Markup/data\\n    \\\".md\\\": \\\"Markdown\\\", \\\".html\\\": \\\"HTML\\\", \\\".css\\\": \\\"CSS\\\", \\\".xml\\\": \\\"XML\\\",\\n    \\\".json\\\": \\\"JSON\\\", \\\".yml\\\": \\\"YAML\\\", \\\".yaml\\\": \\\"YAML\\\", \\\".txt\\\": \\\"Text\\\"\\n}\\n\\nSPECIAL_FILENAMES: Dict[str, str] = {\\n    \\\"Dockerfile\\\": \\\"Dockerfile\\\",\\n    \\\"Makefile\\\": \\\"Makefile\\\",\\n    \\\"README\\\": \\\"README\\\",\\n    \\\"LICENSE\\\": \\\"License\\\"\\n}\\n\\nDEFAULT_TAG = \\\"--- 🧬 Por Clasificar\\\"\\n\\n# ========================================\\n# Función para interpretar .gitignore\\n# ========================================\\ndef load_ignore_spec(repo_root: Path) -> Any:\\n    \\\"\\\"\\\"\\n    Retorna un PathSpec para ignorar rutas según .gitignore.\\n    Si pathspec no está disponible, nunca ignora nada.\\n    \\\"\\\"\\\"\\n    if pathspec:\\n        gitignore = repo_root / '.gitignore'\\n        if gitignore.is_file():\\n            patterns = gitignore.read_text(encoding='utf-8').splitlines()\\n            return pathspec.PathSpec.from_lines('gitwildmatch', patterns)\\n    # Dummy spec que no ignora\\n    class DummySpec:\\n        def match_file(self, file_path: str) -> bool:\\n            return False\\n    return DummySpec()\\n\\n# ========================================\\n# Mapeo para syntax highlighting\\n# ========================================\\nHIGHLIGHT_MAP: Dict[str, str] = {\\n    '.py': 'python', '.js': 'javascript', '.ts': 'typescript', '.go': 'go', '.rs': 'rust',\\n    '.java': 'java', '.c': 'c', '.cpp': 'cpp', '.txt': 'text', '.md': 'markdown',\\n    '.json': 'json', '.html': 'html', '.css': 'css', '.yml': 'yaml', '.xml': 'xml'\\n}\\n\\nSPECIAL_HIGHLIGHT: Dict[str, str] = {\\n    '.gitignore': 'gitignore',\\n    'Dockerfile': 'dockerfile',\\n    'Makefile': 'makefile',\\n    'README': 'markdown',\\n    'LICENSE': 'text'\\n}\\n\\n# ========================================\\n# Funciones principales\\n# ========================================\\n\\ndef detect_language(file_path: Path) -> str:\\n    \\\"\\\"\\\"Devuelve la etiqueta de lenguaje para bloques Markdown.\\\"\\\"\\\"\\n    name = file_path.name\\n    if name in SPECIAL_HIGHLIGHT:\\n        return SPECIAL_HIGHLIGHT[name]\\n    return HIGHLIGHT_MAP.get(file_path.suffix.lower(), 'text')\\n\\n\\ndef get_tags_for_file(file_path: Path) -> List[str]:\\n    \\\"\\\"\\\"Devuelve lista de tags TiddlyWiki para `file_path`.\\\"\\\"\\\"\\n    # Construir título basado en ruta\\n    try:\\n        repo_root = Path(__file__).resolve().parents[1]\\n        rel = file_path.relative_to(repo_root)\\n        title = '-' + str(rel).replace(os.sep, '_')\\n    except Exception:\\n        title = '-' + file_path.name\\n\\n    # Cargar tags personalizados si existen\\n    if title in title_to_tags:\\n        tags = title_to_tags[title].copy()\\n    else:\\n        # Derivar tag de tipo con emoji\\n        name = file_path.name\\n        ext = file_path.suffix.lower()\\n        if name in SPECIAL_FILENAMES:\\n            base = SPECIAL_FILENAMES[name]\\n        elif ext in EXTENSION_TAG_MAP:\\n            base = EXTENSION_TAG_MAP[ext]\\n        else:\\n            base = DEFAULT_TAG\\n        if base == DEFAULT_TAG:\\n            tags = [f\\\"[[{base}]]\\\"]\\n        else:\\n            tags = [f\\\"[[⚙️ {base}]]\\\"]\\n\\n    # Tag basado en nombre de archivo (sin emoji)\\n    tags.append(f\\\"[[{title}]]\\\")\\n    # Tag de grupo sin emoji\\n    tags.append(\\\"[[--- Codigo]]\\\")\\n\\n    return tags\\n\\n# CLI para pruebas rápidas\\nif __name__ == \\\"__main__\\\":\\n    import sys\\n    if len(sys.argv) < 2:\\n        print(\\\"Uso: python tag_mapper.py <ruta_archivo>\\\")\\n        sys.exit(1)\\n    result = get_tags_for_file(Path(sys.argv[1]))\\n    print(result)\\n# Fin del código\\n# Fin del módulo tag_mapper.py\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-Windows_tag_mapper.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250608033205921\",\"modified\":\"20250608033205921\",\"tmap.id\":\"1a334f50-5be4-4699-acf3-85ec5b09005f\"},{\"title\":\"-rep-export-Windows_tiddler_exporter.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-rep-export-Windows_tiddler_exporter.py]] [[--- Codigo]]\\n\\n```Python\\n#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nScript: tiddler_exporter.py (Windows)\\nPlataforma: Windows\\n\\nEste script recorre los archivos del repositorio y crea archivos JSON (tiddlers) para TiddlyWiki.\\nMejoras:\\n- Ignora patrones de .gitignore (salvo `estructura.txt` y `.gitignore`).\\n- Exporta solo archivos con extensión válida o nombres especiales, incluyendo `.toml`.\\n- Detecta cambios usando hashes para exportar únicamente archivos modificados.\\n- Añade tags semánticos con `tag_mapper.get_tags_for_file`:\\n  * Tag basado en ruta (`-[ruta_con_underscores]`).\\n  * Tag de grupo `--- Codigo`.\\n  * Etiqueta de tipo de código con emoji (⚙️ Python, ⚙️ TOML, etc.).\\n- Genera bloque Markdown con syntax highlighting adecuado.\\n- Soporta `--dry-run` para simulación.\\n\\nUso:\\n  python rep-export-Windows/tiddler_exporter.py [--dry-run]\\n\\\"\\\"\\\"\\nimport os\\nimport sys\\nimport json\\nimport hashlib\\nfrom datetime import datetime, timezone\\nfrom pathlib import Path\\nimport tag_mapper\\nfrom tag_mapper import load_ignore_spec\\nfrom cli_utils import safe_print\\n\\n# ===== Configuración =====\\nROOT_DIR = Path(__file__).resolve().parents[1]\\nSCRIPT_DIR = Path(__file__).parent\\nOUTPUT_DIR = SCRIPT_DIR / \\\"tiddlers-export\\\"\\nHASH_FILE = SCRIPT_DIR / \\\".hashes.json\\\"\\n# Carga spec de .gitignore\\nIGNORE_SPEC = load_ignore_spec(ROOT_DIR)\\n\\n# Extensiones válidas: mapea etiquetas y agrega .toml\\nVALID_EXT = set(tag_mapper.EXTENSION_TAG_MAP.keys()) | {'.toml'}\\nALLOWED_NAMES = set(tag_mapper.SPECIAL_FILENAMES.keys())\\n\\n# ============================\\ndef get_all_files():\\n    \\\"\\\"\\\"\\n    Genera todos los archivos a exportar:\\n    - Siempre incluye 'estructura.txt' y '.gitignore'.\\n    - Excluye archivos según .gitignore.\\n    - Filtra por extensiones válidas o nombres especiales.\\n    \\\"\\\"\\\"\\n    for dirpath, dirnames, filenames in os.walk(ROOT_DIR):\\n        # Evitar directorios de export/data\\n        dirnames[:] = [d for d in dirnames if d not in ('tiddlers-export', 'tiddler_tag_doc')]\\n        for name in filenames:\\n            path = Path(dirpath) / name\\n            rel = str(path.relative_to(ROOT_DIR))\\n            # Siempre incluir estos\\n            if rel in ('estructura.txt', '.gitignore'):\\n                yield path\\n                continue\\n            # Skip según .gitignore\\n            if IGNORE_SPEC and IGNORE_SPEC.match_file(rel):\\n                continue\\n            # Extensiones y nombres permitidos\\n            if path.suffix.lower() in VALID_EXT or name in ALLOWED_NAMES:\\n                yield path\\n\\ndef calc_hash(content: str) -> str:\\n    return hashlib.sha1(content.encode('utf-8')).hexdigest()\\n\\ndef safe_title(path: Path) -> str:\\n    \\\"\\\"\\\"\\n    Convierte ruta en título: prefijo '-' y '_' en lugar de separadores.\\n    \\\"\\\"\\\"\\n    return '-' + str(path.relative_to(ROOT_DIR)).replace(os.sep, '_')\\n\\n\\ndef detect_language(path: Path) -> str:\\n    \\\"\\\"\\\"\\n    Detecta lenguaje para syntax highlighting.\\n    \\\"\\\"\\\"\\n    ext = path.suffix.lower().lstrip('.')\\n    # Toml, Python, etc.\\n    return tag_mapper.EXTENSION_TAG_MAP.get(path.suffix.lower(), ext)\\n\\n\\ndef export_tiddlers(dry_run: bool = False):\\n    \\\"\\\"\\\"\\n    Exporta tiddlers JSON para archivos modificados.\\n    \\\"\\\"\\\"\\n    OUTPUT_DIR.mkdir(exist_ok=True)\\n    # Carga hashes previos\\n    old_hashes = {}\\n    if HASH_FILE.exists():\\n        try:\\n            old_hashes = json.loads(HASH_FILE.read_text(encoding='utf-8'))\\n        except Exception:\\n            old_hashes = {}\\n    new_hashes = {}\\n    changed = []\\n\\n    for file in get_all_files():\\n        rel = str(file.relative_to(ROOT_DIR))\\n        try:\\n            content = file.read_text(encoding='utf-8', errors='replace')\\n        except Exception:\\n            continue\\n        h = calc_hash(content)\\n        new_hashes[rel] = h\\n        if old_hashes.get(rel) == h:\\n            continue\\n        title = safe_title(file)\\n        tags = tag_mapper.get_tags_for_file(file)\\n        lang = detect_language(file)\\n        text_md = (\\n            \\\"## [[Tags]]\\\\n\\\"\\n            f\\\"{' '.join(tags)}\\\\n\\\\n\\\"\\n            f\\\"```{lang}\\\\n{content}\\\\n```\\\"\\n        )\\n        tiddler = {\\n            'title': title,\\n            'text': text_md,\\n            'tags': ' '.join(tags),\\n            'type': 'text/markdown',\\n            'created': datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\\n            'modified': datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17]\\n        }\\n        out = OUTPUT_DIR / f\\\"{title}.json\\\"\\n        if dry_run:\\n            safe_print(f\\\"[dry-run] {rel}\\\")\\n        else:\\n            out.write_text(json.dumps(tiddler, ensure_ascii=False, indent=2), encoding='utf-8')\\n            safe_print(f\\\"Exported: {rel}\\\")\\n        changed.append(rel)\\n\\n    if not dry_run:\\n        HASH_FILE.write_text(json.dumps(new_hashes, indent=2), encoding='utf-8')\\n\\n    # Reporte final\\n    safe_print(f\\\"\\\\nTotal cambios: {len(changed)}\\\")\\n    for c in changed:\\n        safe_print(f\\\"  - {c}\\\")\\n\\n\\nif __name__ == '__main__':\\n    dry = '--dry-run' in sys.argv\\n    module_path = Path(__file__).parents[1] / \\\"rep-export-Windows\\\" / \\\"tiddler_exporter.py\\\"\\n    export_tiddlers(dry_run=dry)\\n\\n```\",\"tags\":\"[[⚙️ Python]] -rep-export-Windows_tiddler_exporter.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619220233449\",\"modified\":\"20250619220233449\",\"tmap.id\":\"0b759f8c-cc80-4115-8f15-b77989ced532\"},{\"title\":\"-test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py]] [[--- Codigo]]\\n\\n```python\\nimport subprocess\\nimport sys\\nfrom pathlib import Path\\nimport pytest\\n\\ndef run_generate_structure(tmp_path, args=None):\\n    \\\"\\\"\\\"\\n    Ejecuta generate_structure.py con --dry-run en el directorio tmp_path.\\n    Devuelve CompletedProcess.\\n    \\\"\\\"\\\"\\n    script = Path(__file__).parent.parent / 'rep-export-LINUXandMAC' / 'generate_structure.py'\\n    cmd = [sys.executable, str(script), '--root', str(tmp_path), '--dry-run']\\n    if args:\\n        cmd.extend(args)\\n    result = subprocess.run(cmd, capture_output=True, text=True)\\n    return result\\n\\n\\ndef test_default_excludes(tmp_path):\\n    # Crear estructura de prueba\\n    (tmp_path / 'keep_dir').mkdir()\\n    (tmp_path / 'keep_dir' / 'file.txt').write_text('hello')\\n\\n    # Directorios y archivos que deben excluirse por defecto\\n    (tmp_path / '.git').mkdir()\\n    (tmp_path / '__pycache__').mkdir()\\n    (tmp_path / 'node_modules').mkdir()\\n    (tmp_path / 'secret.pyc').write_text('')\\n    (tmp_path / '.DS_Store').write_text('')\\n\\n    # Ejecutar\\n    result = run_generate_structure(tmp_path)\\n    assert result.returncode == 0, f\\\"Salida inesperada: {result.stderr}\\\"\\n    output = result.stdout\\n\\n    # Debemos ver keep_dir y file.txt\\n    assert 'keep_dir' in output\\n    assert 'file.txt' in output\\n\\n    # No debe aparecer ninguna exclusión por defecto\\n    for excl in ['.git', '__pycache__', 'node_modules', 'secret.pyc', '.DS_Store']:\\n        assert excl not in output, f\\\"Encontrado elemento excluido: {excl}\\\"  \\n\\n\\ndef test_custom_exclude_pattern(tmp_path):\\n    # Crear archivos de distintos tipos\\n    (tmp_path / 'logs').mkdir()\\n    (tmp_path / 'logs' / 'error.log').write_text('error')\\n    (tmp_path / 'data').mkdir()\\n    (tmp_path / 'data' / 'readme.md').write_text('# docs')\\n\\n    # Ejecutar con patrón de exclusión para logs\\n    result = run_generate_structure(tmp_path, args=['-e', 'logs'])\\n    assert result.returncode == 0\\n    output = result.stdout\\n\\n    # logs debe estar excluido, pero data debe aparecer\\n    assert 'logs' not in output\\n    assert 'data' in output\\n\\ndef test_honor_gitignore(tmp_path):\\n    # Crear .gitignore con patrón para temp*\\n    gitignore = tmp_path / '.gitignore'\\n    gitignore.write_text('temp*')\\n\\n    # Crear archivos/directorios\\n    (tmp_path / 'temp123').mkdir()\\n    (tmp_path / 'keep').mkdir()\\n\\n    # Ejecutar con honor-gitignore\\n    result = run_generate_structure(tmp_path, args=['--honor-gitignore'])\\n    assert result.returncode == 0\\n    output = result.stdout\\n\\n    assert 'keep' in output\\n    assert 'temp123' not in output\\n\\n```\",\"tags\":\"[[⚙️ Python]] -test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250608033205925\",\"modified\":\"20250608033205925\",\"tmap.id\":\"14a843b8-afd4-4333-85b3-822b2ca44b98\"},{\"title\":\"-test-rep-export-Windows_test_generate_structure_Windows.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-test-rep-export-Windows_test_generate_structure_Windows.py]] [[--- Codigo]]\\n\\n```python\\nimport argparse\\nimport importlib.util\\nfrom pathlib import Path\\nimport os\\n\\ndef load_generate_structure_module():\\n    # Ubica el script generate_structure.py en la ruta correcta\\n    repo_root = Path(__file__).resolve().parents[1]\\n    script_path = repo_root / 'rep-export-Windows' / 'generate_structure.py'\\n    spec = importlib.util.spec_from_file_location('generate_structure', script_path)\\n    module = importlib.util.module_from_spec(spec)\\n    spec.loader.exec_module(module)\\n    return module\\n\\n\\ndef test_ascii_tree_filters_hidden_and_ignored(tmp_path):\\n    # Prepara un repo dummy con elementos que deben excluirse\\n    root = tmp_path\\n    (root / '.git').mkdir()\\n    (root / '.git' / 'config').write_text('x')\\n    (root / 'node_modules').mkdir()\\n    (root / 'node_modules' / 'mod.js').write_text('x')\\n    (root / '.hidden').write_text('secret')\\n    # Archivo con extensión ignorada\\n    (root / 'file.pyc').write_text('')\\n    # Archivo y directorio válidos\\n    (root / 'keep.txt').write_text('keep')\\n    d = root / 'dir'\\n    d.mkdir()\\n    (d / 'inside.md').write_text('inside')\\n\\n    # Carga el módulo y ejecuta ascii_tree\\n    module = load_generate_structure_module()\\n    args = argparse.Namespace(exclude=[], honor_gitignore=False, exclude_from=None, verbose=0)\\n    lines = module.ascii_tree(root, root, prefix='', args=args, gitignore_patterns=[])\\n\\n    # Verifica que solo aparecen dir/inside.md y keep.txt\\n    expected = [\\n        '├── dir',\\n        '│   └── inside.md',\\n        '└── keep.txt'\\n    ]\\n    assert lines == expected\\n\\n\\ndef test_honor_gitignore(tmp_path):\\n    # Repo dummy con .gitignore\\n    root = tmp_path\\n    (root / '.gitignore').write_text('keep.txt')\\n    (root / 'keep.txt').write_text('keep')\\n    (root / 'other.txt').write_text('other')\\n\\n    module = load_generate_structure_module()\\n    args = argparse.Namespace(exclude=[], honor_gitignore=True, exclude_from=None, verbose=0)\\n    gitignore_patterns = module.load_gitignore_patterns(root)\\n    lines = module.ascii_tree(root, root, prefix='', args=args, gitignore_patterns=gitignore_patterns)\\n\\n    # Solo other.txt debe quedar\\n    assert lines == ['└── other.txt']\\n\\n\\ndef test_write_atomic_creates_file(tmp_path):\\n    module = load_generate_structure_module()\\n    output = tmp_path / 'out.txt'\\n    lines = ['line1', 'line2']\\n    module.write_atomic(output, lines)\\n    # Verifica contenido escrito\\n    content = output.read_text(encoding='utf-8').splitlines()\\n    assert content == lines\\n    # Verifica permisos en Unix\\n    if os.name != 'nt':\\n        mode = output.stat().st_mode & 0o777\\n        assert mode == 0o600\\n\\n```\",\"tags\":\"[[⚙️ Python]] -test-rep-export-Windows_test_generate_structure_Windows.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250608033205926\",\"modified\":\"20250608033205926\",\"tmap.id\":\"601711a7-8368-4483-83d8-efc317b66910\"},{\"title\":\"-tests_test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-tests_test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py]] [[--- Codigo]]\\n\\n```python\\n# tests/test-rep-export-LINUXandMAC/test_generate_structure_LINUX&MAC.py\\n\\nimport os\\nimport sys\\nimport argparse\\nimport importlib.util\\nfrom pathlib import Path\\nimport pytest\\n\\ndef load_module():\\n    \\\"\\\"\\\"\\n    Carga dinámicamente el módulo generate_structure.py\\n    desde rep-export-LINUXandMAC para poder probar sus funciones.\\n    \\\"\\\"\\\"\\n    repo_root = Path(__file__).resolve().parents[2]\\n    script_path = repo_root / 'rep-export-LINUXandMAC' / 'generate_structure.py'\\n    spec = importlib.util.spec_from_file_location('generate_structure', str(script_path))\\n    module = importlib.util.module_from_spec(spec)\\n    spec.loader.exec_module(module)\\n    return module\\n\\n@pytest.fixture\\ndef gs_module():\\n    return load_module()\\n\\ndef test_ascii_tree_filters_hidden_and_ignored(gs_module, tmp_path):\\n    # Prepara estructura con archivos/carpetas válidas y excluibles\\n    (tmp_path / 'keep.txt').write_text('keep')\\n    d = tmp_path / 'dir'\\n    d.mkdir()\\n    (d / 'inside.md').write_text('inside')\\n\\n    # Elementos que deben excluirse por defecto\\n    (tmp_path / '.git').mkdir()\\n    (tmp_path / '__pycache__').mkdir()\\n    (tmp_path / 'node_modules').mkdir()\\n    (tmp_path / 'secret.pyc').write_text('')\\n    (tmp_path / '.DS_Store').write_text('')\\n\\n    args = argparse.Namespace(\\n        exclude=[],\\n        honor_gitignore=False,\\n        exclude_from=None,\\n        verbose=0\\n    )\\n    gitignore_patterns = []\\n\\n    lines = gs_module.ascii_tree(\\n        root=tmp_path,\\n        repo_root=tmp_path,\\n        prefix='',\\n        args=args,\\n        gitignore_patterns=gitignore_patterns\\n    )\\n    output = \\\"\\\\n\\\".join(lines)\\n\\n    # Los válidos sí deben aparecer\\n    assert 'keep.txt' in output\\n    assert 'dir' in output\\n    assert 'inside.md' in output\\n\\n    # Los excluidos no deben aparecer\\n    for excl in ['.git', '__pycache__', 'node_modules', 'secret.pyc', '.DS_Store']:\\n        assert excl not in output, f\\\"Se encontró elemento excluido: {excl}\\\"\\n\\ndef test_honor_gitignore(gs_module, tmp_path):\\n    # Crea .gitignore que excluye \\\"keep\\\"\\n    (tmp_path / '.gitignore').write_text('keep\\\\n')\\n\\n    # Archivos/directorios de prueba\\n    (tmp_path / 'keep').mkdir()\\n    (tmp_path / 'other').mkdir()\\n\\n    args = argparse.Namespace(\\n        exclude=[],\\n        honor_gitignore=True,\\n        exclude_from=None,\\n        verbose=0\\n    )\\n    patterns = gs_module.load_gitignore_patterns(tmp_path)\\n    lines = gs_module.ascii_tree(\\n        root=tmp_path,\\n        repo_root=tmp_path,\\n        prefix='',\\n        args=args,\\n        gitignore_patterns=patterns\\n    )\\n    output = \\\"\\\\n\\\".join(lines)\\n\\n    # \\\"other\\\" debe quedar, \\\"keep\\\" no\\n    assert 'other' in output\\n    assert 'keep' not in output\\n\\ndef test_write_atomic_creates_file(gs_module, tmp_path):\\n    # Probar que write_atomic crea y escribe correctamente\\n    out_file = tmp_path / 'out.txt'\\n    content_lines = ['line1', 'line2', 'line3']\\n\\n    gs_module.write_atomic(out_file, content_lines)\\n\\n    # Leer y comparar contenido\\n    read_back = out_file.read_text(encoding='utf-8').splitlines()\\n    assert read_back == content_lines\\n\\n    # En Unix verificar permisos 0o600\\n    if os.name != 'nt':\\n        mode = out_file.stat().st_mode & 0o777\\n        assert mode == 0o600\\n\\n```\",\"tags\":\"[[⚙️ Python]] -tests_test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250609134240612\",\"modified\":\"20250609134240612\",\"tmap.id\":\"9879cc91-5767-460b-a58a-4e3cea2b2937\"},{\"title\":\"-tests_test-rep-export-Windows_test_generate_structure_Windows.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-tests_test-rep-export-Windows_test_generate_structure_Windows.py]] [[--- Codigo]]\\n\\n```Python\\n# tests/test-rep-export-Windows/test_generate_structure_Windows.py\\n\\nimport sys\\nimport importlib.util\\nimport argparse               # ⬅️ añadido para Namespace\\nfrom pathlib import Path\\n\\nimport pytest\\n\\n\\ndef load_module():\\n    \\\"\\\"\\\"\\n    Carga dinámicamente rep-export-Windows/generate_structure.py\\n    y asegura que la carpeta rep-export-Windows/ esté en sys.path\\n    para que 'import cli_utils' funcione correctamente.\\n    \\\"\\\"\\\"\\n    project_root = Path(__file__).resolve().parents[2]\\n    module_path = project_root / \\\"rep-export-Windows\\\" / \\\"generate_structure.py\\\"\\n\\n    # Asegurarnos de poder importar cli_utils desde rep-export-Windows/\\n    windows_pkg = project_root / \\\"rep-export-Windows\\\"\\n    if str(windows_pkg) not in sys.path:\\n        sys.path.insert(0, str(windows_pkg))\\n\\n    spec = importlib.util.spec_from_file_location(\\\"generate_structure\\\", str(module_path))\\n    module = importlib.util.module_from_spec(spec)\\n    spec.loader.exec_module(module)\\n    return module\\n\\n\\n@pytest.fixture\\ndef gs_module():\\n    return load_module()\\n\\n\\ndef test_ascii_tree_filters_hidden_and_ignored(gs_module, tmp_path):\\n    gen = gs_module\\n    repo = tmp_path / \\\"repo\\\"\\n    repo.mkdir()\\n\\n    # Preparamos árbol con .gitignore que oculta __pycache__/ y secret.txt\\n    (repo / \\\".gitignore\\\").write_text(\\\"__pycache__/\\\\nsecret.txt\\\\n\\\")\\n    (repo / \\\"visible.txt\\\").write_text(\\\"ok\\\")\\n    (repo / \\\"secret.txt\\\").write_text(\\\"no\\\")\\n    (repo / \\\"__pycache__\\\").mkdir()\\n    (repo / \\\"__pycache__\\\" / \\\"ignored.pyc\\\").write_text(\\\"\\\")\\n\\n    # 1) Sin honor-gitignore -> secret.txt y __pycache__ aparecen\\n    lines_raw = gen.ascii_tree(\\n        repo,\\n        repo,\\n        args=argparse.Namespace(exclude=[], honor_gitignore=False),\\n        gitignore_spec=None\\n    )\\n    assert any(\\\"secret.txt\\\" in l for l in lines_raw)\\n    assert any(\\\"__pycache__\\\" in l for l in lines_raw)\\n\\n    # 2) Con honor-gitignore -> ambos deben desaparecer\\n    spec = gen.load_ignore_spec(repo)\\n    lines_clean = gen.ascii_tree(\\n        repo,\\n        repo,\\n        args=argparse.Namespace(exclude=[], honor_gitignore=True),\\n        gitignore_spec=spec\\n    )\\n    print(\\\"DEBUG lines_clean:\\\", lines_clean)  # <-- aquí\\n    assert all(\\\"secret.txt\\\" not in l for l in lines_clean)\\n    assert all(\\\"__pycache__\\\" not in l for l in lines_clean)\\n\\n\\ndef test_honor_gitignore(gs_module, tmp_path):\\n    gen = gs_module\\n    repo = tmp_path / \\\"repo2\\\"\\n    repo.mkdir()\\n\\n    # .gitignore que ignora *.log\\n    (repo / \\\".gitignore\\\").write_text(\\\"*.log\\\\n\\\")\\n    (repo / \\\"a.log\\\").write_text(\\\"data\\\")\\n    (repo / \\\"b.txt\\\").write_text(\\\"data\\\")\\n\\n    spec = gen.load_ignore_spec(repo)\\n    lines_clean = gen.ascii_tree(\\n        repo,\\n        repo,\\n        args=argparse.Namespace(exclude=[], honor_gitignore=True),\\n        gitignore_spec=spec\\n    )\\n    assert all(\\\"a.log\\\" not in l for l in lines_clean)\\n    assert any(\\\"b.txt\\\" in l for l in lines_clean)\\n\\n\\ndef test_write_atomic_creates_file(gs_module, tmp_path):\\n    gen = gs_module\\n    out_file = tmp_path / \\\"estructura.txt\\\"\\n    # Generamos un archivo provisional\\n    gen.write_atomic(out_file, [\\\"root\\\", \\\"└── file.txt\\\"])\\n\\n    assert out_file.exists()\\n    content = out_file.read_text(encoding=\\\"utf-8\\\")\\n    assert \\\"root\\\" in content and \\\"file.txt\\\" in content\\n\\n```\",\"tags\":\"[[⚙️ Python]] -tests_test-rep-export-Windows_test_generate_structure_Windows.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619220233451\",\"modified\":\"20250619220233451\",\"tmap.id\":\"502fefc2-af29-42a7-884c-833bd5e71a4c\"},{\"title\":\"-tests_test-rep-export-Windows_test_tiddler_exporter.py\",\"text\":\"## [[Tags]]\\n[[⚙️ Python]] [[-tests_test-rep-export-Windows_test_tiddler_exporter.py]] [[--- Codigo]]\\n\\n```Python\\n# tests/test-rep-export-Windows/test_tiddler_exporter.py\\n\\nimport sys\\nimport importlib.util\\nfrom pathlib import Path\\nimport json\\nimport pytest\\n\\n\\n@pytest.fixture\\ndef tiddler_exporter(tmp_path, monkeypatch):\\n    \\\"\\\"\\\"Prepara un entorno temporal y carga dinámicamente el módulo.\\\"\\\"\\\"\\n    # Crear estructura de proyecto falsa\\n    repo_dir = tmp_path / \\\"repo\\\"\\n    repo_dir.mkdir()\\n    (repo_dir / \\\".gitignore\\\").write_text(\\\"__pycache__/\\\\nsecret.env\\\\n\\\")\\n\\n    (repo_dir / \\\"estructura.txt\\\").write_text(\\\"estructura\\\")\\n    (repo_dir / \\\"visible.py\\\").write_text(\\\"print('ok')\\\")\\n    (repo_dir / \\\"secret.env\\\").write_text(\\\"NO_EXPORT=1\\\")\\n    (repo_dir / \\\"config.toml\\\").write_text(\\\"[project]\\\\nname = 'test'\\\")\\n\\n    # Redefinir ROOT_DIR para apuntar al repo falso\\n    module_path = Path(__file__).resolve().parents[2] / \\\"rep-export-Windows\\\" / \\\"tiddler_exporter.py\\\"\\n    spec = importlib.util.spec_from_file_location(\\\"tiddler_exporter\\\", str(module_path))\\n    mod = importlib.util.module_from_spec(spec)\\n    sys.modules[\\\"tiddler_exporter\\\"] = mod\\n    spec.loader.exec_module(mod)\\n\\n    monkeypatch.setattr(mod, \\\"ROOT_DIR\\\", repo_dir)\\n    monkeypatch.setattr(mod, \\\"OUTPUT_DIR\\\", repo_dir / \\\"tiddlers-export\\\")\\n    monkeypatch.setattr(mod, \\\"HASH_FILE\\\", repo_dir / \\\".hashes.json\\\")\\n\\n    return mod\\n\\n\\ndef test_gitignore_excludes_secret_files(tiddler_exporter):\\n    tiddler_exporter.export_tiddlers(dry_run=False)\\n    out_dir = tiddler_exporter.OUTPUT_DIR\\n    files = [f.name for f in out_dir.glob(\\\"*.json\\\")]\\n    assert all(\\\"secret\\\" not in f for f in files), \\\"Archivo ignorado fue exportado por error.\\\"\\n\\n\\ndef test_always_include_estructura_and_gitignore(tiddler_exporter):\\n    tiddler_exporter.export_tiddlers(dry_run=False)\\n    files = [f.name for f in tiddler_exporter.OUTPUT_DIR.glob(\\\"*.json\\\")]\\n    expected = [\\\"-estructura.txt.json\\\", \\\"-.gitignore.json\\\"]\\n    for name in expected:\\n        assert name in files, f\\\"{name} debería estar presente siempre.\\\"\\n\\n\\ndef test_toml_files_are_exported(tiddler_exporter):\\n    tiddler_exporter.export_tiddlers(dry_run=False)\\n    out_file = tiddler_exporter.OUTPUT_DIR / \\\"-config.toml.json\\\"\\n    assert out_file.exists(), \\\"Archivo .toml no fue exportado correctamente\\\"\\n    content = json.loads(out_file.read_text(encoding=\\\"utf-8\\\"))\\n    assert \\\"project\\\" in content[\\\"text\\\"], \\\"Contenido del archivo .toml no fue exportado correctamente\\\"\\n\\n```\",\"tags\":\"[[⚙️ Python]] -tests_test-rep-export-Windows_test_tiddler_exporter.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"created\":\"20250619220233452\",\"modified\":\"20250619220233452\",\"tmap.id\":\"8ae435d0-45e2-4596-95f8-9913cb036de5\"},{\"created\":\"20250423034500542\",\"text\":\"{\\n  \\\"id\\\": \\\"⚙️🧪 tests\\\",\\n  \\\"title\\\": \\\"⚙️🧪 tests\\\",\\n  \\\"rol\\\": \\\"tecnica\\\",\\n  \\\"tipo\\\": \\\"tests\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️🧪 tests\\\",\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- Codigo\\\"],\\n    \\\"usa\\\": [\\n      \\\"tests_test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py\\\",\\n      \\\"tests_test-rep-export-Windows_test_generate_structure_Windows.py\\\",\\n      \\\".github_workflows_python-tests.yml\\\"\\n    ],\\n    \\\"define\\\": [\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Usabilidad y Robustez\\\"\\n    ]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Análisis de las pruebas automáticas implementadas en repository-export: cobertura, estructura, CI y enfoque multiplataforma.\\\",\\n    \\\"markdown\\\": \\\"## ⚙️🧪 Tests – `repository-export`\\\\n\\\\n### ✅ Estructura de pruebas\\\\n- Dos archivos principales bajo `tests/`:\\\\n  - `tests_test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py`\\\\n  - `tests_test-rep-export-Windows_test_generate_structure_Windows.py`\\\\n- Ambos apuntan a funciones dentro de `generate_structure.py`.\\\\n\\\\n### ⚙️ CI/CD con GitHub Actions\\\\n- Archivo `.github/workflows/python-tests.yml` define el pipeline de validación:\\\\n  - Usa `actions/setup-python`.\\\\n  - Ejecuta `pytest .` al hacer push a ramas.\\\\n  - Ejecuta en sistemas con Python >= 3.7.\\\\n\\\\n### 🔍 Qué valida exactamente\\\\n- Corrección del árbol generado (`estructura.txt`).\\\\n- Existencia de rutas esperadas.\\\\n- Verificación de generación de hashes.\\\\n- Algunos scripts de test simulan entradas para probar robustez.\\\\n\\\\n### 📉 Cobertura (estimada)\\\\n- Se testea `generate_structure.py` (núcleo).\\\\n- Otros scripts (`tag_mapper.py`, `tiddler_exporter.py`, `cli_utils.py`) no están cubiertos directamente.\\\\n\\\\n### 🧪 Observaciones\\\\n- Tests mínimos, pero funcionales.\\\\n- Faltan mocks o pruebas de comportamiento para los exportadores y la lógica de etiquetas.\\\\n- Potencial de mejora con integración de `coverage.py` o pruebas por tipo de archivo.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Moderada: algunos scripts no tienen tests, lo cual limita la validación completa.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Medio-alto: las pruebas están ligadas a un núcleo, pero dejan fuera componentes complementarios.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: la estructura actual permite escalar los tests fácilmente.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.7\\\"\\n  }\\n}\\n\",\"title\":\"⚙️/🧪 tests/\",\"modified\":\"20250619190056481\",\"tags\":\"[[⚙️/🧪 tests/]] [[--- Codigo]]\",\"tmap.id\":\"1fb449db-e799-42e9-a47a-5ebac65a5fef\",\"type\":\"application/json\"},{\"created\":\"20250423151515431\",\"text\":\"{\\n  \\\"id\\\": \\\"⚙️🛠 scripts\\\",\\n  \\\"title\\\": \\\"⚙️🛠 scripts\\\",\\n  \\\"rol\\\": \\\"tecnica\\\",\\n  \\\"tipo\\\": \\\"scripts\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️🛠 scripts\\\",\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- Codigo\\\"],\\n    \\\"usa\\\": [\\n      \\\"rep-export-LINUXandMAC_generate_structure.py\\\",\\n      \\\"rep-export-Windows_generate_structure.py\\\",\\n      \\\"rep-export-LINUXandMAC_cli_utils.py\\\",\\n      \\\"rep-export-Windows_cli_utils.py\\\",\\n      \\\"rep-export-LINUXandMAC_tag_mapper.py\\\",\\n      \\\"rep-export-Windows_tag_mapper.py\\\",\\n      \\\"rep-export-LINUXandMAC_tiddler_exporter.py\\\",\\n      \\\"rep-export-Windows_tiddler_exporter.py\\\",\\n      \\\"rep-export-LINUXandMAC_scripts_export_structure_wrapper_unix.py\\\",\\n      \\\"rep-export-Windows_scripts_export_structure_wrapper_windows.py\\\"\\n    ]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Inventario de scripts principales de repository-export, clasificados por plataforma y responsabilidad.\\\",\\n    \\\"markdown\\\": \\\"## ⚙️🛠 Scripts – `repository-export`\\\\n\\\\n| Script | Plataforma | Rol / Responsabilidad |\\\\n|--------|------------|-----------------------|\\\\n| `export_structure_wrapper_unix.py` | Linux / macOS | Punto de entrada CLI: orquesta el flujo completo de exportación |\\\\n| `export_structure_wrapper_windows.py` | Windows | Idem anterior, ajustado a PowerShell / rutas Win32 |\\\\n| `generate_structure.py` | Común (copiado en cada carpeta OS) | Recorre el árbol de archivos, crea `estructura.txt` y diccionario de hashes |\\\\n| `cli_utils.py` | Común | Helpers: parseo de argumentos, validación de directorios, mensajes |\\\\n| `tag_mapper.py` | Común | Asigna etiquetas semánticas según extensión o ruta |\\\\n| `tiddler_exporter.py` | Común | Convierte la salida en tiddlers JSONL listos para TiddlyWiki |\\\\n| `*_cli_utils.py` (duplicado por OS) | OS-specific | Adapta paths y comandos auxiliares |\\\\n\\\\n### 🏗️ Organización de carpetas\\\\n```text\\\\nrep-export-LINUXandMAC/\\\\n└── scripts/\\\\n    └── export_structure_wrapper_unix.py\\\\nrep-export-Windows/\\\\n└── scripts/\\\\n    └── export_structure_wrapper_windows.py\\\\n```\\\\n\\\\n### 🔄 Flujo invocado por los scripts\\\\n1. *Wrapper* valida argumentos (CLI utils).\\\\n2. Llama a `generate_structure.py` para crear estructura y hashes.\\\\n3. Pasa la salida a `tag_mapper.py` para enriquecer con etiquetas.\\\\n4. Finalmente, `tiddler_exporter.py` produce JSONL por archivo.\\\\n\\\\n### 📌 Observaciones\\\\n- **Duplicación controlada**: los scripts por OS comparten el mismo núcleo pero varían rutas/comandos.\\\\n- **Fácil automatización**: cada wrapper es idempotente y puede integrarse a CI/CD.\\\\n- **Extensión simple**: se puede añadir soporte a otro OS copiando y ajustando un wrapper.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media: algunos nombres de CLI utils duplican lógicas; requiere refactor para consolidar.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: cada script cumple rol específico dentro del pipeline.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: modularidad facilita agregar o reemplazar scripts.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.8\\\"\\n  }\\n}\\n\",\"title\":\"⚙️/🛠 scripts/\",\"modified\":\"20250619190000641\",\"tags\":\"[[⚙️/🛠 scripts/]] [[--- Codigo]]\",\"tmap.id\":\"0d632de4-5701-4d2d-be06-940322406f0c\",\"type\":\"application/json\"},{\"created\":\"20250423145805723\",\"text\":\"{\\n  \\\"id\\\": \\\"⚙️📘 Documentacion\\\",\\n  \\\"title\\\": \\\"⚙️📘 Documentacion\\\",\\n  \\\"rol\\\": \\\"documental\\\",\\n  \\\"tipo\\\": \\\"documentacion\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️📘 Documentacion\\\",\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- Codigo\\\"],\\n    \\\"usa\\\": [\\n      \\\"README.md\\\",\\n      \\\"estructura.txt\\\",\\n      \\\"rep-export-LINUXandMAC_tiddler_exporter.py\\\",\\n      \\\"rep-export-Windows_tiddler_exporter.py\\\"\\n    ],\\n    \\\"define\\\": [\\n      \\\"🗂 Epigenética Computacional\\\",\\n      \\\"🗂 Evolución Semántica\\\"\\n    ]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Analiza cómo `repository-export` documenta su funcionamiento y cómo genera documentación automáticamente a partir del código fuente analizado.\\\",\\n    \\\"markdown\\\": \\\"## ⚙️📘 Documentación – `repository-export`\\\\n\\\\n### 📄 Documentación explícita\\\\n- **`README.md`** bien estructurado:\\\\n  - Define propósito, uso y filosofía del proyecto.\\\\n  - Incluye instrucciones claras para Linux/Mac/Windows.\\\\n  - Describe los requisitos y ejemplos de ejecución.\\\\n- **`estructura.txt`** proporciona un resumen general del diseño de carpetas y rutas involucradas.\\\\n\\\\n### 🧠 Documentación generada automáticamente\\\\n- Cada archivo procesado se convierte en un **tiddler TiddlyWiki**:\\\\n  - Contiene título semántico, etiquetas y código resaltado.\\\\n  - Se puede consultar visualmente en navegadores compatibles con TiddlyWiki.\\\\n- Documentación generada es útil para:\\\\n  - Estudio de código estructurado.\\\\n  - Versionado de la evolución semántica.\\\\n  - Creación de datasets para LLM u otros analizadores.\\\\n\\\\n### 📚 Filosofía subyacente\\\\n- El proyecto adopta el principio de **“el código debe explicar el sistema”**.\\\\n- La documentación **no es un archivo aislado**, sino parte activa del flujo (output en `tiddlers-export/`).\\\\n\\\\n> Esto convierte `repository-export` en una herramienta de documentación semántica automatizada, no solo un parser de estructuras.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Baja: la documentación es clara y funcional.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: el sistema documenta mientras analiza y exporta.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: puede integrarse a otros modelos de documentación automática.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"⚙️📘 Documentacion\",\"modified\":\"20250619185909839\",\"tags\":\"[[⚙️📘 Documentacion]] [[--- Codigo]]\",\"tmap.id\":\"4dfbf1cf-2b67-45f2-908d-42df2ac41aff\"},{\"created\":\"20250423034529818\",\"text\":\"{\\n  \\\"id\\\": \\\"⚙️🤖 Automatización\\\",\\n  \\\"title\\\": \\\"⚙️🤖 Automatización\\\",\\n  \\\"rol\\\": \\\"tecnica\\\",\\n  \\\"tipo\\\": \\\"automatizacion\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️🤖 Automatización\\\",\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- Codigo\\\"],\\n    \\\"usa\\\": [\\n      \\\".github_workflows_python-tests.yml\\\",\\n      \\\"test-rep-export-LINUXandMAC_test_generate_structure_LINUX&MAC.py\\\",\\n      \\\"test-rep-export-Windows_test_generate_structure_Windows.py\\\"\\n    ],\\n    \\\"define\\\": [\\n      \\\"🗂 Usabilidad y Robustez\\\",\\n      \\\"🗂 Calidad del Código\\\"\\n    ]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Evalúa qué partes del sistema `repository-export` están automatizadas, qué se ejecuta mediante CI, y qué tareas pueden ejecutarse sin intervención humana.\\\",\\n    \\\"markdown\\\": \\\"## ⚙️🤖 Automatización – `repository-export`\\\\n\\\\n### 🧪 Pruebas automáticas con GitHub Actions\\\\n- Archivo `.github/workflows/python-tests.yml` activa tests automáticamente al hacer push:\\\\n  - Corre `pytest` sobre scripts clave.\\\\n  - Usa `actions/setup-python@v4` con Python 3.x.\\\\n  - Verifica compatibilidad y estado funcional básico del generador.\\\\n\\\\n### 💻 Exportación manual, pero portable\\\\n- Los scripts de exportación (`wrapper_unix.py`, `wrapper_windows.py`) **no se ejecutan automáticamente**.\\\\n- El flujo requiere intervención humana para iniciar la conversión de estructuras en tiddlers.\\\\n\\\\n### 🔄 Posibilidad de automatización futura\\\\n- Los scripts son CLI-friendly y fácilmente integrables a pipelines:\\\\n  - Ejecutables desde CI/CD si se desea.\\\\n  - Sin side effects: generan solo salidas, no modifican nada.\\\\n\\\\n### 📌 Automatismos útiles\\\\n- **Control de cambios por hash**: evita re-exportar archivos sin alteración.\\\\n- **Modularidad por plataforma**: cada sistema operativo tiene su exportador encapsulado.\\\\n\\\\n> Si se quiere automatizar completamente, bastaría con llamar al wrapper desde una acción CI personalizada.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Moderada: hay automatización de pruebas, pero no de ejecución.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: los componentes automatizados están bien acoplados al flujo técnico.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: puede integrarse fácilmente en entornos CI/CD más robustos.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.9\\\"\\n  }\\n}\\n\",\"title\":\"⚙️🤖 Automatización\",\"modified\":\"20250619185827939\",\"tags\":\"[[⚙️🤖 Automatización]] [[--- Codigo]]\",\"tmap.id\":\"82432622-5ac7-4a03-8836-125d7dcf88bd\",\"type\":\"application/json\"},{\"created\":\"20250531042342198\",\"text\":\"{\\n  \\\"id\\\": \\\"⚙️🛡️ Seguridad\\\",\\n  \\\"title\\\": \\\"⚙️🛡️ Seguridad\\\",\\n  \\\"rol\\\": \\\"tecnica\\\",\\n  \\\"tipo\\\": \\\"seguridad\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️🛡️ Seguridad\\\",\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- Codigo\\\"],\\n    \\\"usa\\\": [\\\"🎯 2. Requisitos\\\", \\\"🗂 Usabilidad y Robustez\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Evalúa riesgos de ejecución, manipulación de datos o acceso indebido dentro de `repository-export`. Incluye revisión de scripts, entrada/salida y entorno de ejecución.\\\",\\n    \\\"markdown\\\": \\\"## ⚙️🛡️ Seguridad – `repository-export`\\\\n\\\\n### 🔐 Riesgos y protecciones\\\\n- **Sin ejecución de código arbitrario**: no hay `eval`, `exec`, ni ejecución dinámica insegura.\\\\n- **No procesa entrada externa de usuario**: los archivos procesados provienen del sistema de archivos local.\\\\n- **No requiere red ni internet**: lo que reduce vectores de ataque externos.\\\\n\\\\n### 📂 Acceso a archivos\\\\n- Lectura/escritura controlada:\\\\n  - Lee rutas relativas.\\\\n  - Escribe solo en subcarpetas propias (`tiddlers-export/`, `*.hashes.json`).\\\\n- No sobrescribe archivos fuera de su espacio de trabajo.\\\\n\\\\n### 🧰 Entorno de ejecución\\\\n- Requiere `Python 3.7+` y `tree` — ambas herramientas conocidas, auditables y no privilegiadas.\\\\n- No utiliza `sudo`, no modifica permisos, ni toca registros del sistema.\\\\n\\\\n### 🛡️ Buenas prácticas observadas\\\\n- **Separación por plataforma** → evita errores por entorno cruzado.\\\\n- Validaciones básicas previas a cada operación de exportación.\\\\n- Los scripts no alteran archivos fuente ni modifican el contenido del repositorio original.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Baja: el proyecto trabaja con rutas y archivos locales sin entrada insegura.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Moderado: aunque es seguro en sí, no contempla autenticación ni sandboxing.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: podría ejecutarse en entornos restringidos sin riesgo.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  }\\n}\\n\",\"tags\":\"[[--- Codigo]]\",\"title\":\"⚙️🛡️ Seguridad\",\"modified\":\"20250619185820032\",\"type\":\"application/json\",\"tmap.id\":\"60559ff0-ea44-4885-8ed8-5c9ae043a62a\"},{\"created\":\"20250619204054788\",\"text\":\"{\\n  \\\"title\\\": \\\"feat(D): integración pathspec para .gitignore y exportación segura - (V2.R3.C2 / gen=export, b=1, ∆r=+2, ∆c=+1)\\\",\\n  \\\"id\\\": \\\"rep-export-Windows_commit::2025-06-19-integracion-pathspec\\\",\\n  \\\"tags\\\": [\\n    \\\"🗂 Estructura de commits\\\",\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🌀 Desarrollo y Evolucion\\\",\\n    \\\"🌀 integración pathspec\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"rep-export-Windows_cli_utils.py:load_ignore_spec\\\",\\n      \\\"rep-export-Windows_cli_utils.py:is_ignored\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"pathspec\\\",\\n      \\\"rep-export-Windows_cli_utils.py\\\",\\n      \\\"rep-export-Windows_generate_structure.py\\\",\\n      \\\"rep-export-Windows_tiddler_exporter.py\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"pyproject.toml\\\",\\n      \\\"tests_test-rep-export-Windows_test_tiddler_exporter.py\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"___repository-export\\\"\\n    ],\\n    \\\"reemplaza\\\": [\\n      \\\"filtrado_manual_fnmatch\\\"\\n    ]\\n  },\\n  \\\"nota\\\": \\\"Se integra `pathspec` para interpretar correctamente `.gitignore` en el flujo de exportación de estructura y tiddlers. Se definen funciones `load_ignore_spec` y `is_ignored` en `cli_utils.py`, se actualiza la CLI de Windows, se ajusta el `pyproject.toml` para registrar la dependencia opcional `gitignore`, y se añade cobertura de testeo automatizado en `tests_test-rep-export-Windows_test_tiddler_exporter.py`.\\\"\\n}\\n\",\"tags\":\"___repository-export [[--- 🌀 Desarrollo y Evolucion]] [[🌀 integración pathspec]]\",\"title\":\"🌀 integración pathspec\",\"modified\":\"20250619204705309\",\"tmap.id\":\"ca03e83f-d98c-40b2-b172-fd569edf1fb9\",\"type\":\"application/json\"},{\"created\":\"20250414234000289\",\"text\":\"{\\n  \\\"id\\\": \\\"🎯 1. Objetivos\\\",\\n  \\\"title\\\": \\\"🎯 1. Objetivos\\\",\\n  \\\"rol\\\": \\\"documental\\\",\\n  \\\"tipo\\\": \\\"objetivos\\\",\\n  \\\"tags\\\": [\\\"🎯 1. Objetivos\\\", \\\"--- 🎯 Detalles del proyecto\\\"],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🎯 Detalles del proyecto\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Define el propósito principal y las metas de alto nivel del sistema repository-export.\\\",\\n    \\\"markdown\\\": \\\"## 🎯 Objetivos de `repository-export`\\\\n\\\\n- **¿Cuál es el propósito principal del repositorio?**\\\\n  Extraer y registrar la estructura de archivos de un repositorio, junto con sus hashes, para fines de trazabilidad, verificación y documentación.\\\\n\\\\n- **¿Qué problemas busca resolver?**\\\\n  - Dificultad para auditar o comparar repositorios de manera estructurada.\\\\n  - Falta de herramientas simples que generen estructuras replicables y exportables.\\\\n\\\\n- **¿Quiénes son los usuarios o beneficiarios?**\\\\n  - Auditores técnicos o equipos de arquitectura.\\\\n  - Herramientas de documentación automática.\\\\n  - Sistemas que requieren verificar integridad (hashes).\\\\n\\\\n- **¿Cuáles son los objetivos de alto nivel?**\\\\n  - 🧩 Portabilidad entre sistemas operativos.\\\\n  - ✅ Simplicidad en CLI.\\\\n  - 🧪 Verificabilidad vía SHA-256.\\\\n  - 🔄 Interoperabilidad con TiddlyWiki / OpenPages.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media. El propósito es técnico pero permite usos distintos (auditoría, verificación, documentación).\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Al integrarse con otras herramientas (tiddlers, hashes), permite trazabilidad completa de un proyecto.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta. El sistema se adapta a cualquier estructura de archivos y plataforma.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  },\\n  \\\"secciones\\\": [\\n    {\\n      \\\"section\\\": \\\"🧠 Justificación\\\",\\n      \\\"contenido\\\": \\\"repository-export permite crear snapshots de la estructura y contenido de un repositorio sin necesidad de su ejecución ni instrumentación profunda, siendo útil para auditorías, verificación legal, análisis semántico y documentación estructural.\\\"\\n    },\\n    {\\n      \\\"section\\\": \\\"🚀 Resultado Esperado\\\",\\n      \\\"contenido\\\": \\\"Estructura.txt con jerarquía de archivos, archivos .hashes.json con valores SHA-256, y salida opcional `tiddlers.jsonl` listos para cargar en OpenPages o TiddlyWiki.\\\"\\n    }\\n  ]\\n}\\n\",\"tags\":\"[[🎯 1. Objetivos]] [[🎯 2. Requisitos]] [[🎯 3. DOFA]] [[🎯 6. Componentes]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[--- 🌀 Desarrollo y Evolucion]]\",\"title\":\"🎯 1. Objetivos\",\"modified\":\"20250619183326374\",\"text/x-markdown\":\"\",\"type\":\"application/json\",\"color\":\"#00c3db\",\"tmap.id\":\"a30a6844-bece-4f9c-add6-6f2d45090b42\"},{\"created\":\"20250414235517306\",\"text\":\"{\\n  \\\"id\\\": \\\"🎯 2. Requisitos\\\",\\n  \\\"title\\\": \\\"🎯 2. Requisitos\\\",\\n  \\\"rol\\\": \\\"documental\\\",\\n  \\\"tipo\\\": \\\"requisitos\\\",\\n  \\\"tags\\\": [\\\"🎯 2. Requisitos\\\", \\\"--- 🎯 Detalles del proyecto\\\"],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🎯 Detalles del proyecto\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Checklist de condiciones necesarias para que `repository-export` funcione correctamente.\\\",\\n    \\\"markdown\\\": \\\"## 🎯 Requisitos de ejecución\\\\n\\\\n- **Dependencias externas**:\\\\n  - Python 3.x\\\\n  - Módulos estándar (`argparse`, `pathlib`, `hashlib`, `json`, `os`)\\\\n  - `pytest` para correr los tests\\\\n\\\\n- **Requisitos de entorno**:\\\\n  - SO compatibles: Linux, MacOS, Windows\\\\n  - Acceso a carpetas del repositorio objetivo\\\\n  - Permisos de lectura/escritura en el directorio de trabajo\\\\n\\\\n- **Entrada esperada**:\\\\n  - Ruta a un directorio raíz del proyecto\\\\n  - Argumentos CLI simples (ej. `--dir`, `--out`)\\\\n\\\\n- **Salida esperada**:\\\\n  - `estructura.txt`, `*.hashes.json`, y opcionalmente `tiddlers.jsonl`\\\\n\\\\n- **Restricciones**:\\\\n  - No soporta symlinks o archivos corruptos (no indicado si los ignora o los falla)\\\\n  - No está diseñado para estructuras de archivos extremadamente grandes o profundas sin adaptación\\\\n\\\\n- **Pruebas mínimas**:\\\\n  - Pasar `pytest` en Linux, Mac y Windows (`test_generate_structure_*.py`)\\\\n  - Generación de outputs válidos con hash por archivo y jerarquía textual\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media. La documentación no especifica algunos límites (profundidad de carpetas, symlinks).\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Las dependencias están claramente ligadas a la arquitectura multiplataforma.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta en entorno de ejecución (SO, CLI); baja en entradas inesperadas o casos no estándar.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  },\\n  \\\"secciones\\\": [\\n    {\\n      \\\"section\\\": \\\"🧠 Justificación\\\",\\n      \\\"contenido\\\": \\\"Los requisitos garantizan que el sistema pueda ejecutar recorridos de carpetas y generar hashes de forma predecible y compatible con su entorno objetivo. Además, los tests aseguran la calidad multiplataforma.\\\"\\n    },\\n    {\\n      \\\"section\\\": \\\"🚀 Resultado Esperado\\\",\\n      \\\"contenido\\\": \\\"Un conjunto de artefactos generados (`estructura.txt`, `.hashes.json`, opcionalmente `tiddlers.jsonl`) que reflejan fielmente la estructura y contenido del proyecto analizado, verificables mediante hash.\\\"\\n    }\\n  ]\\n}\\n\",\"title\":\"🎯 2. Requisitos\",\"modified\":\"20250619183648412\",\"type\":\"application/json\",\"tags\":\"[[🎯 2. Requisitos]] [[🎯 4. Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Desarrollo y Evolucion]] [[--- Codigo]]\",\"color\":\"#00c3db\",\"tmap.id\":\"b5be6915-32c3-4468-b4c2-768185bb58eb\"},{\"created\":\"20250417011018809\",\"text\":\"{\\n  \\\"id\\\": \\\"🎯 3. DOFA\\\",\\n  \\\"title\\\": \\\"🎯 3. DOFA\\\",\\n  \\\"rol\\\": \\\"documental\\\",\\n  \\\"tipo\\\": \\\"dofa\\\",\\n  \\\"tags\\\": [\\\"🎯 3. DOFA\\\", \\\"--- 🎯 Detalles del proyecto\\\"],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🎯 Detalles del proyecto\\\"],\\n    \\\"usa\\\": [\\\"🎯 1. Objetivos\\\", \\\"🎯 2. Requisitos\\\", \\\"🎯 5. Arquitectura\\\", \\\"🎯 6. Componentes\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Diagnóstico estratégico del sistema repository-export desde fortalezas, oportunidades, debilidades y amenazas.\\\",\\n    \\\"markdown\\\": \\\"## 🎯 DOFA – `repository-export`\\\\n\\\\n### ✅ Fortalezas\\\\n- Modularidad clara por archivo y sistema operativo\\\\n- Output estructurado y compatible con TiddlyWiki/OpenPages\\\\n- Uso de hashes para control de versiones real\\\\n- Arquitectura fácilmente portable y mantenible\\\\n- Licencia Apache 2.0 = libre uso y adaptación\\\\n\\\\n### 🌱 Oportunidades\\\\n- Automatización CI/CD ya es parcialmente funcional, puede extenderse a releases\\\\n- Integración con GPTs u otras IA para análisis semántico automatizado\\\\n- Creación de datasets educativos y técnicos para otras plataformas\\\\n- Adaptación como plugin/editor visual TiddlyWiki\\\\n\\\\n### ⚠️ Debilidades\\\\n- Repetición de lógica entre versiones Linux/Mac y Windows\\\\n- Tagging heurístico puede necesitar ajustes según dominio\\\\n- Dependencia de estructura fija (convenciones de carpeta/scripts)\\\\n- Falta de pruebas de integración entre scripts conectados (wrapper → exporter)\\\\n\\\\n### 🔥 Amenazas\\\\n- Cambios en sistemas operativos que rompan compatibilidad (e.g., Powershell vs bash)\\\\n- Proyectos con estructuras atípicas pueden romper la exportación\\\\n- Requiere usuario técnicamente competente (CLI, entorno Python activo)\\\\n- No detecta ambigüedad en rutas/tagging automáticamente\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media. El sistema es predecible, pero sensible a estructuras de entrada inusuales.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto. El DOFA conecta propósito, arquitectura, automatización y uso real.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Media-alta. Puede evolucionar fácilmente, pero requiere control en tagging y estructuras.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.8\\\"\\n  },\\n  \\\"secciones\\\": [\\n    {\\n      \\\"section\\\": \\\"🧠 Justificación\\\",\\n      \\\"contenido\\\": \\\"El análisis DOFA se basa en los módulos, su portabilidad, el control por hashes, la lógica por sistema operativo, y su alineación con flujos CI/CD modernos. Las oportunidades detectadas emergen de su potencial como generador de conocimiento estructurado.\\\"\\n    },\\n    {\\n      \\\"section\\\": \\\"🚀 Resultado Esperado\\\",\\n      \\\"contenido\\\": \\\"Guía para priorizar mejoras técnicas (reducción de redundancia), fortalecer pruebas integradas, y posicionar `repository-export` como herramienta educativa, document\\n\",\"tags\":\"[[🎯 3. DOFA]] [[🎯 2. Requisitos]] [[🎯 5. Arquitectura]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Desarrollo y Evolucion]] [[--- Codigo]]\",\"title\":\"🎯 3. DOFA\",\"modified\":\"20250619185004320\",\"type\":\"application/json\",\"color\":\"#00c3db\",\"tmap.id\":\"4fd827ad-66c0-4733-b0fb-66a83f4ad752\"},{\"created\":\"20250417011202744\",\"text\":\"{\\n  \\\"id\\\": \\\"🎯 4. Flujo de interaccion\\\",\\n  \\\"title\\\": \\\"🎯 4. Flujo de interaccion\\\",\\n  \\\"rol\\\": \\\"documental\\\",\\n  \\\"tipo\\\": \\\"flujo\\\",\\n  \\\"tags\\\": [\\\"🎯 4. Flujo de interaccion\\\", \\\"--- 🎯 Detalles del proyecto\\\"],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🎯 Detalles del proyecto\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Describe el flujo paso a paso de interacción con repository-export: entrada CLI, procesamiento y generación de estructura exportada.\\\",\\n    \\\"markdown\\\": \\\"## 🎯 Flujo de Interacción – `repository-export`\\\\n\\\\n### 🔁 Descripción general\\\\nEl usuario ejecuta un script CLI (`generate_structure.py`) que recorre un repositorio dado y genera una estructura `.json` representando jerarquía, tipos de archivo y resumen semántico.\\\\n\\\\n### 🧩 Pasos principales\\\\n1. **Invocación CLI**\\\\n```bash\\\\npython generate_structure.py --repo path/a/tu/repositorio --output salida.json\\\\n```\\\\n\\\\n2. **Procesamiento**\\\\n- Recorrido recursivo del árbol de archivos\\\\n- Identificación de tipo (`code`, `text`, `binary`)\\\\n- Extracción de nombre, path, resumen (cuando aplica)\\\\n\\\\n3. **Salida**\\\\n- Archivo `.json` con estructura, hashes (si aplica), y descripciones básicas\\\\n- Listo para ser usado por TiddlyWiki / OpenPages u otras herramientas\\\\n\\\\n### 🧠 Modo de uso\\\\n- CLI sin menú interactivo\\\\n- Sin requerimiento de UI gráfica\\\\n- Argumentos directos en consola\\\\n\\\\n### 🧪 Validaciones\\\\n- Verificación de ruta y permisos\\\\n- Exclusión de archivos no relevantes (con `--exclude`)\\\\n- Mensajes de advertencia ante fallas parciales\\\\n\\\\n### 📦 Resultado esperado\\\\n- `estructura.txt`, `*.hashes.json`, `tiddlers.jsonl` según configuración y plataforma\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Baja. El flujo es determinista y directo vía argumentos CLI.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Cada paso depende del anterior, y la salida está pensada para integración con otros sistemas como OpenPages.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: funciona con cualquier estructura de carpetas; parámetros permiten excluir carpetas o cambiar salida.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  },\\n  \\\"secciones\\\": [\\n    {\\n      \\\"section\\\": \\\"🧠 Justificación\\\",\\n      \\\"contenido\\\": \\\"Un flujo directo por CLI permite trazabilidad, control de errores y reproducción exacta. Es ideal para auditorías y pipelines automatizados.\\\"\\n    },\\n    {\\n      \\\"section\\\": \\\"🚀 Resultado Esperado\\\",\\n      \\\"contenido\\\": \\\"Un archivo `.json` estructurado que representa la arquitectura del repositorio analizado, útil para documentación técnica, análisis o verificación.\\\"\\n    }\\n  ]\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 4. Flujo de interaccion\",\"modified\":\"20250619184329265\",\"tags\":\"[[🎯 4. Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Desarrollo y Evolucion]] [[--- Codigo]]\",\"color\":\"#00c3db\",\"tmap.id\":\"72822a6f-abd7-4fd0-a517-5f3fd44caba1\"},{\"created\":\"20250417012641075\",\"text\":\"{\\n  \\\"id\\\": \\\"🎯 5. Arquitectura\\\",\\n  \\\"title\\\": \\\"🎯 5. Arquitectura\\\",\\n  \\\"rol\\\": \\\"tecnica\\\",\\n  \\\"tipo\\\": \\\"arquitectura\\\",\\n  \\\"tags\\\": [\\\"🎯 5. Arquitectura\\\", \\\"--- 🎯 Detalles del proyecto\\\"],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🎯 Detalles del proyecto\\\"],\\n    \\\"usa\\\": [\\\"🎯 6. Componentes\\\", \\\"🎯 7. Algoritmos y matematicas\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Arquitectura del sistema repository-export: separación multiplataforma, CLI como entrada, procesamiento por módulos y salida JSON tipo tiddler.\\\",\\n    \\\"markdown\\\": \\\"## 🎯 Arquitectura – `repository-export`\\\\n\\\\nEste proyecto sigue una **arquitectura modular orientada a scripts** con separación multiplataforma y control desde CLI wrappers.\\\\n\\\\n### 🔧 Componentes clave:\\\\n\\\\n- **CLI wrappers**: Entrada principal según sistema operativo.\\\\n  - `export_structure_wrapper_unix.py`\\\\n  - `export_structure_wrapper_windows.py`\\\\n\\\\n- **Módulos reutilizables**:\\\\n  - `generate_structure.py`: Recorrido de árbol y extracción por archivo\\\\n  - `cli_utils.py`: Helpers para validación, argumentos\\\\n  - `tag_mapper.py`: Asignación de etiquetas semánticas\\\\n  - `tiddler_exporter.py`: Formatea la salida final\\\\n\\\\n- **Carpeta de salida**:\\\\n  - `tiddlers-export/` con archivos `.json` por tiddler.\\\\n\\\\n### 🧱 Estructura general\\\\n```text\\\\nrep-export-PLATAFORMA/\\\\n├── cli_utils.py\\\\n├── generate_structure.py\\\\n├── tag_mapper.py\\\\n├── tiddler_exporter.py\\\\n└── scripts/\\\\n    └── export_structure_wrapper_*.py\\\\n```\\\\n\\\\n### 🔄 Flujo arquitectónico\\\\n```\\\\n[CLI wrapper] → [generate_structure + helpers] → [tiddler_exporter] → [output JSON]\\\\n```\\\\n\\\\n- **Entrada**: Argumentos de CLI (`--repo`, `--output`, etc.)\\\\n- **Núcleo**: Módulos de procesamiento por pasos\\\\n- **Salida**: Estructura exportada para TiddlyWiki/OpenPages\\\\n\\\\n---\\\\n\\\\n### 🧠 Diseño intencional:\\\\n- **Separación por OS** evita ambigüedad en rutas/comandos\\\\n- **Modularidad** facilita pruebas y mantenimiento\\\\n- **Documentación viva** como salida estructurada\\\\n- **Licencia Apache 2.0** permite extensibilidad\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media. Algunas rutas y nombres podrían variar según uso real del script.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto. Cada módulo tiene una función clara y encadena con el siguiente.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta. Es posible extender wrappers, reemplazar módulos o reusar salidas en otros sistemas.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  },\\n  \\\"secciones\\\": [\\n    {\\n      \\\"section\\\": \\\"🧠 Justificación\\\",\\n      \\\"contenido\\\": \\\"Una arquitectura CLI-módulos-salida permite desacoplamiento, trazabilidad, control y adaptación por plataforma sin duplicar lógica excesiva.\\\"\\n    },\\n    {\\n      \\\"section\\\": \\\"🚀 Resultado Esperado\\\",\\n      \\\"contenido\\\": \\\"Un sistema que produce salidas predecibles y estructuradas a partir de cualquier código fuente, con trazabilidad directa desde CLI hasta output.\\\"\\n    }\\n  ]\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 5. Arquitectura\",\"modified\":\"20250619184747437\",\"tags\":\"[[🎯 5. Arquitectura]] [[🎯 6. Componentes]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🎯 3. DOFA]] [[🎯 4. Flujo de interaccion]] [[🎯 7. Algoritmos y matematicas]] [[🎯 1. Objetivos]] [[🎯 2. Requisitos]] [[--- 🌀 Desarrollo y Evolucion]] [[--- Codigo]]\",\"color\":\"#00c3db\",\"tmap.id\":\"5350baec-c84e-487d-bd02-ea09e1cd5268\"},{\"created\":\"20250417013128906\",\"text\":\"{\\n  \\\"id\\\": \\\"🎯 6. Componentes\\\",\\n  \\\"title\\\": \\\"🎯 6. Componentes\\\",\\n  \\\"rol\\\": \\\"tecnica\\\",\\n  \\\"tipo\\\": \\\"componentes\\\",\\n  \\\"tags\\\": [\\\"🎯 6. Componentes\\\", \\\"--- 🎯 Detalles del proyecto\\\"],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🎯 Detalles del proyecto\\\"],\\n    \\\"usa\\\": [\\\"🎯 5. Arquitectura\\\", \\\"🎯 7. Algoritmos y matematicas\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Listado y descripción de los principales módulos funcionales del sistema repository-export. Incluye entradas, salidas y relaciones entre ellos.\\\",\\n    \\\"markdown\\\": \\\"## 🎯 Componentes – `repository-export`\\\\n\\\\n### 🧩 Estructura modular del sistema\\\\nCada componente tiene una responsabilidad única en el flujo de exportación:\\\\n\\\\n#### 1. `generate_structure.py`\\\\n- Función: Recorrer directorio, extraer metadatos por archivo\\\\n- Entrada: Ruta base del repositorio\\\\n- Salida: Diccionario estructurado con información de archivos (nombre, tipo, path, etc.)\\\\n\\\\n#### 2. `cli_utils.py`\\\\n- Función: Validaciones, argumentos CLI, helpers de consola\\\\n- Entrada: Parámetros del usuario\\\\n- Salida: Diccionarios y flujos de ejecución controlada\\\\n\\\\n#### 3. `tag_mapper.py`\\\\n- Función: Asignar etiquetas semánticas o contextuales por tipo de archivo\\\\n- Entrada: Extensión, nombre o ruta del archivo\\\\n- Salida: Lista de tags (`['.py', 'scripts', 'tests']`, etc.)\\\\n\\\\n#### 4. `tiddler_exporter.py`\\\\n- Función: Convertir la estructura en tiddlers para TiddlyWiki\\\\n- Entrada: Diccionario estructurado generado por `generate_structure.py`\\\\n- Salida: Archivos `.json` uno por tiddler con título, texto, tags, fechas\\\\n\\\\n#### 5. `export_structure_wrapper_*.py`\\\\n- Función: Script principal por sistema operativo (Linux/macOS o Windows)\\\\n- Entrada: Ruta CLI, flags opcionales (`--exclude`, etc.)\\\\n- Salida: Ejecuta secuencia completa de procesamiento y exportación\\\\n\\\\n#### 6. `*.hashes.json`\\\\n- Función: Registro de hashes SHA256 por archivo para evitar duplicados o detectar cambios reales\\\\n- Uso: Control de versiones y CI/CD\\\\n\\\\n#### 7. `estructura.txt`\\\\n- Función: Exportación visual en texto plano del árbol del repositorio\\\\n- Complementa visualmente los `.json`\\\\n\\\\n---\\\\n### 🧭 Relación entre componentes\\\\n```\\\\n[CLI wrapper] \\\\n   → [cli_utils + generate_structure] \\\\n   → [tag_mapper] \\\\n   → [tiddler_exporter] \\\\n   → [output JSON + hashes + estructura.txt]\\\\n```\\\\n\\\\n> Cada paso es **determinista y componible**: los outputs intermedios pueden validarse o extenderse sin romper el flujo general.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media. Algunos componentes son reutilizables y su salida puede cambiar según input externo.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto. La estructura modular encaja en un flujo coherente y testeable.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta. Nuevos componentes podrían añadirse sin romper la arquitectura.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  },\\n  \\\"secciones\\\": [\\n    {\\n      \\\"section\\\": \\\"🧠 Justificación\\\",\\n      \\\"contenido\\\": \\\"Una separación clara de funciones por componente mejora el mantenimiento, facilita el testing y permite evolución independiente por plataforma o propósito.\\\"\\n    },\\n    {\\n      \\\"section\\\": \\\"🚀 Resultado Esperado\\\",\\n      \\\"contenido\\\": \\\"Un sistema donde cada módulo contribuye de forma directa a producir documentación semántica a partir de cualquier estructura de código.\\\"\\n    }\\n  ]\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 6. Componentes\",\"modified\":\"20250619184834037\",\"tags\":\"[[🎯 6. Componentes]] [[🎯 2. Requisitos]] [[🎯 7. Algoritmos y matematicas]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[--- 🌀 Desarrollo y Evolucion]]\",\"color\":\"#00c3db\",\"tmap.id\":\"05ad41c1-67f3-4447-8237-6e3ebc92fdcd\"},{\"created\":\"20250417013235155\",\"text\":\"{\\n  \\\"id\\\": \\\"🎯 7. Algoritmos y matematicas\\\",\\n  \\\"title\\\": \\\"🎯 7. Algoritmos y matemáticas\\\",\\n  \\\"rol\\\": \\\"tecnica\\\",\\n  \\\"tipo\\\": \\\"logica\\\",\\n  \\\"tags\\\": [\\\"🎯 7. Algoritmos y matematicas\\\", \\\"--- 🎯 Detalles del proyecto\\\"],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🎯 Detalles del proyecto\\\"],\\n    \\\"usa\\\": [\\\"🎯 6. Componentes\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Técnicas computacionales usadas en repository-export para recorrer árboles de archivos, calcular hashes y clasificar semánticamente contenido.\\\",\\n    \\\"markdown\\\": \\\"## 🎯 Algoritmos y matemáticas – `repository-export`\\\\n\\\\nEste sistema emplea operaciones deterministas simples, centradas en eficiencia y trazabilidad:\\\\n\\\\n### 🔁 1. Recorrido de árbol de archivos\\\\n- Algoritmo: Recursivo tipo **walk**\\\\n- Implementación: `os.walk`, `Path().rglob('*')`\\\\n- Uso: Detecta archivos, subcarpetas y relaciones jerárquicas\\\\n- Output: Lista estructurada de archivos con metadatos\\\\n\\\\n### 🔐 2. Hashing (SHA256)\\\\n- Algoritmo: `hashlib.sha256()`\\\\n- Uso: Verificación de cambios reales, evitar redundancia en exportación\\\\n- Output: Diccionario `{filename: hash}` por sesión\\\\n\\\\n### 🏷️ 3. Asignación de tags\\\\n- Algoritmo: Heurística basada en extensión, ruta y nombre\\\\n- Implementación: `tag_mapper.py`\\\\n- Uso: Enriquecer semánticamente cada tiddler\\\\n- Ejemplo: `rep-export-Windows_tag_mapper.py` produce: `['python', 'cli', 'scripts']`\\\\n\\\\n### 🧪 4. Validaciones\\\\n- Checks internos: existencia de rutas, legibilidad de archivos\\\\n- Control de errores silenciosos por sistema operativo\\\\n\\\\n### 🗂️ 5. Construcción de tiddlers\\\\n- Mapeo de campos: `title`, `tags`, `text`, `created`, `modified`\\\\n- Output: Formato `.json` compatible con TiddlyWiki/OpenPages\\\\n- No usa serialización matemática compleja, pero depende de lógica de campos homogénea\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Baja. Las operaciones son definidas con claridad y no dependen de interpretación subjetiva.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto. Cada algoritmo alimenta al siguiente paso en la cadena de exportación.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta. Las heurísticas pueden ajustarse o reemplazarse sin alterar la estructura global.\\\",\\n    \\\"Vector de certeza\\\": \\\"3\\\"\\n  },\\n  \\\"secciones\\\": [\\n    {\\n      \\\"section\\\": \\\"🧠 Justificación\\\",\\n      \\\"contenido\\\": \\\"El uso de operaciones simples, deterministas y comprobables asegura que el sistema sea auditable, portable y libre de dependencias externas costosas.\\\"\\n    },\\n    {\\n      \\\"section\\\": \\\"🚀 Resultado Esperado\\\",\\n      \\\"contenido\\\": \\\"Un conjunto de archivos `.json` ricos semánticamente, reproducibles a partir de cualquier estructura de código, con verificación por hashing y etiquetas automáticas.\\\"\\n    }\\n  ]\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 7. Algoritmos y matematicas\",\"modified\":\"20250619184916239\",\"tags\":\"[[🎯 7. Algoritmos y matematicas]] [[🎯 6. Componentes]] [[🎯 2. Requisitos]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🎯 5. Arquitectura]] [[--- Codigo]] [[--- 🌀 Desarrollo y Evolucion]]\",\"color\":\"#00c3db\",\"tmap.id\":\"b6627e77-1d0b-450e-94c9-a89ed66a8b66\"},{\"created\":\"20250417134213439\",\"text\":\"{\\n  \\\"id\\\": \\\"🗂 Calidad del Código\\\",\\n  \\\"title\\\": \\\"🗂 Calidad del Código\\\",\\n  \\\"rol\\\": \\\"principios\\\",\\n  \\\"tipo\\\": \\\"calidad\\\",\\n  \\\"tags\\\": [\\n    \\\"🗂 Calidad del Código\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🗂 Principios de programación\\\"],\\n    \\\"usa\\\": [\\\"🎯 6. Componentes\\\", \\\"🎯 7. Algoritmos y matematicas\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Evalúa legibilidad, pruebas, estilo y mantenimiento del código fuente de repository-export.\\\",\\n    \\\"markdown\\\": \\\"## 🗂 Calidad del Código – `repository-export`\\\\n\\\\n### 🔍 Legibilidad y estilo\\\\n- Uso consistente de *snake_case* y convenciones PEP-8 en la mayoría de los scripts.\\\\n- Funciones breves (≈20-30 líneas) con responsabilidad única.\\\\n- Docstrings presentes en módulos principales (`generate_structure.py`, `cli_utils.py`).\\\\n\\\\n### 🧪 Cobertura de pruebas\\\\n- Tests PyTest para Linux/Mac y Windows (`test_generate_structure_*.py`).\\\\n- Workflow CI (`python-tests.yml`) ejecuta tests en cada *push* con badge en README.\\\\n- Cobertura aproximada: alta en núcleo (`generate_structure.py`) pero baja en wrappers.\\\\n\\\\n### 🛠️ Mantenibilidad\\\\n- Código duplicado entre wrappers → **área de mejora**.\\\\n- Helpers centralizados en `cli_utils.py` reducen repetición.\\\\n- Licencia Apache 2.0 permite refactor abierto.\\\\n\\\\n### ⚠️ Issues potenciales\\\\n| Área | Observación |\\\\n|------|-------------|\\\\n| Linting | No se incluye configuración `flake8` / `ruff` |\\\\n| Tipado  | No usa *type hints*, podría mejorar auto-documentación |\\\\n| Logs    | Falta logging estructurado; solo `print()` |\\\\n| Duplicación | Lógica repetida OS-specific |\\\\n\\\\n> **Resumen**: código claro y testeado, pero con espacio para linting automatizado, reducción de duplicación y mayores *type hints*.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media: ausencia de linting puede ocultar pequeños problemas de estilo.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"El núcleo mantiene calidad; los wrappers requieren refactor.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: estructura simple facilita mejoras de linting o tipado.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.7\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Calidad del Código\",\"modified\":\"20250619185229344\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Calidad del Código]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]]\",\"color\":\"#db5f00\",\"tmap.id\":\"edcd8959-4fd3-47c3-8d26-2d5635409ba8\"},{\"created\":\"20250417134125921\",\"text\":\"{\\n  \\\"id\\\": \\\"🗂 Diseño\\\",\\n  \\\"title\\\": \\\"🗂 Diseño\\\",\\n  \\\"rol\\\": \\\"principios\\\",\\n  \\\"tipo\\\": \\\"principio\\\",\\n  \\\"tags\\\": [\\n    \\\"🗂 Diseño\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🗂 Principios de programación\\\"],\\n    \\\"usa\\\": [\\\"🎯 5. Arquitectura\\\", \\\"🎯 6. Componentes\\\"],\\n    \\\"define\\\": [\\\"🗂 Modularidad y Estado\\\", \\\"🗂 Calidad del Código\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Evalúa cómo se distribuyen las responsabilidades, la claridad de roles por script, y la separación por sistema operativo dentro del sistema repository-export.\\\",\\n    \\\"markdown\\\": \\\"## 🗂 Diseño en `repository-export`\\\\n\\\\n### 🧱 Modularidad estructural\\\\n- Scripts están separados por plataforma: `rep-export-LINUXandMAC/` y `rep-export-Windows/`\\\\n- Cada archivo tiene una responsabilidad clara:\\\\n  - `generate_structure.py`: generación de hashes + árbol de archivos\\\\n  - `tag_mapper.py`: enriquecimiento semántico (tags)\\\\n  - `tiddler_exporter.py`: salida JSONL (TiddlyWiki)\\\\n  - `cli_utils.py`: validaciones, menú, helpers reutilizables\\\\n\\\\n### 🔄 Diseño por flujo\\\\n- Wrappers (`*_wrapper*.py`) se encargan de componer el flujo CLI completo según SO\\\\n- Se usa control condicional por OS para mantener compatibilidad\\\\n- Los scripts principales son agnósticos del sistema operativo (interfaz común)\\\\n\\\\n### 🎯 Coherencia entre partes\\\\n- Nombres de archivos mantienen convención clara\\\\n- Estructura pensada para reusabilidad e integración por etapas\\\\n- Todos los scripts siguen un patrón `main()` centralizado para ejecución\\\\n\\\\n### 🔁 Patrones visibles\\\\n- Patrón *pipeline modular*: validación → procesamiento → exportación\\\\n- Patrones CLI (parser interactivo simple, `argparse` manual, menú textual)\\\\n- Principio KISS (Keep It Simple, Stupid): pocos argumentos, funciones breves, lógica secuencial\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media. Algunos flujos no están explícitamente documentados, pero la estructura los revela.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto. El diseño modular permite comprensión y mantenimiento por capas.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta. Agregar nuevos exportadores o validaciones requeriría mínimo esfuerzo.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.8\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Diseño\",\"modified\":\"20250619185139267\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Diseño]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]]\",\"color\":\"#db5f00\",\"tmap.id\":\"e5b186ac-9ddc-4f40-a57e-d6bcbbe7900d\"},{\"created\":\"20250424000251908\",\"text\":\"{\\n  \\\"id\\\": \\\"🗂 Epigenética Computacional\\\",\\n  \\\"title\\\": \\\"🗂 Epigenética Computacional\\\",\\n  \\\"rol\\\": \\\"principios\\\",\\n  \\\"tipo\\\": \\\"principio\\\",\\n  \\\"tags\\\": [\\n    \\\"🗂 Epigenética Computacional\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🌀 Desarrollo y Evolucion\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🗂 Principios de programación\\\"],\\n    \\\"usa\\\": [\\\"🎯 4. Flujo de interaccion\\\", \\\"🎯 5. Arquitectura\\\"],\\n    \\\"define\\\": [\\\"🗂 Evolución Semántica\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Explora cómo el sistema `repository-export` incorpora o posibilita la modificación evolutiva de sus salidas, sin romper compatibilidad previa. Refleja inteligencia acumulativa y trazabilidad en el diseño.\\\",\\n    \\\"markdown\\\": \\\"## 🗂 Epigenética Computacional – `repository-export`\\\\n\\\\n### 🧬 Rasgos epigenéticos\\\\n- El sistema **no destruye información**: conserva rutas, contenido original, timestamps y hashes SHA-256 por archivo.\\\\n- Los **tiddlers generados** están estructurados para permitir acumulación: cada salida `.json` puede ser versionada, extendida o usada como base para documentación futura.\\\\n- Compatible con múltiples fuentes: al reutilizar los mismos nombres/tags, permite aprendizaje progresivo o comparación entre versiones.\\\\n\\\\n### 🧠 Inteligencia estructural acumulativa\\\\n- Al convertir cada archivo en un *tiddler modular*, se habilita trazabilidad por archivo, por carpeta o por contexto semántico.\\\\n- Conserva el `vector hash` como identidad digital del archivo exportado.\\\\n- Cambios futuros en el repositorio original pueden ser detectados sin reinterpretar toda la estructura, gracias a la **diferencia de hashes**.\\\\n\\\\n### ♻️ Capacidad de refactor sin ruptura\\\\n- Los scripts están diseñados para dejar intacta la estructura previa del export (cuando no hay cambios).\\\\n- No hay sobrescritura destructiva, y puede integrarse con mecanismos de control de versiones semánticos externos (como OpenPages).\\\\n\\\\n### 🧠 Metaaprendizaje desde la estructura\\\\n- Estructura generada (`estructura.txt`, `*.hashes.json`, `tiddlers-export/`) puede alimentar modelos LLM u otros sistemas adaptativos.\\\\n- Se conserva no solo el contenido, sino la **semántica de relaciones entre partes**.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Baja: las reglas de exportación son deterministas.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Muy alto: el sistema permite integración evolutiva sin pérdida.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: formato tiddler puede ser versionado, anotado o extendido.\\\",\\n    \\\"Vector de certeza\\\": \\\"3.0\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Epigenética Computacional\",\"modified\":\"20250619185325979\",\"tags\":\"[[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🗂 Epigenética Computacional]] [[--- Codigo]]\",\"tmap.id\":\"1b6a1e0c-b6eb-4a7b-a207-dfde0737d7cc\",\"color\":\"#db5f00\"},{\"created\":\"20250417134249385\",\"text\":\"{\\n  \\\"id\\\": \\\"🗂 Estructura de commits\\\",\\n  \\\"title\\\": \\\"🗂 Estructura de commits\\\",\\n  \\\"rol\\\": \\\"principios\\\",\\n  \\\"tipo\\\": \\\"historial\\\",\\n  \\\"tags\\\": [\\n    \\\"🗂 Estructura de commits\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🌀 Desarrollo y Evolucion\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🗂 Principios de programación\\\"],\\n    \\\"usa\\\": [\\\"🎯 3. DOFA\\\", \\\"🎯 6. Componentes\\\"],\\n    \\\"define\\\": [\\\"🗂 Evolución Semántica\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Describe las convenciones visibles en el historial de cambios del proyecto, su granularidad, uso de ramas y claridad de los mensajes de commit.\\\",\\n    \\\"markdown\\\": \\\"## 🗂 Estructura de commits – `repository-export`\\\\n\\\\n### 📅 Patrón general\\\\n- Aunque no se inspeccionó directamente `git log`, la presencia de `CI`, `pytest`, y los scripts duplicados por OS sugiere **ciclos de trabajo iterativos por plataforma**.\\\\n- Separación explícita de scripts por OS (Windows vs Linux/Mac) revela que las ramas o commits probablemente siguieron líneas paralelas.\\\\n\\\\n### ✍️ Convenciones implícitas\\\\n- El badge CI indica integración automática tras push → sugiere flujo de trabajo `feature → push → test`.\\\\n- Archivos nombrados `test-*` por OS indican que los commits agrupaban funcionalidades completas + tests.\\\\n\\\\n### 🧪 Madurez técnica\\\\n- Wrapper, CLI y validaciones están desarrollados de forma coherente → implican un historial con al menos tres ciclos:\\\\n  1. **Versión inicial funcional mínima**\\\\n  2. **Separación multiplataforma**\\\\n  3. **Automatización y pruebas**\\\\n\\\\n### 📦 CI/CD\\\\n- Presencia de `python-tests.yml` y `dependabot.yml` apunta a rutina continua de actualización y revisión.\\\\n- No hay signos de cambios masivos destructivos.\\\\n\\\\n> Recomendación: complementar este análisis con `git log --oneline --graph --decorate` para visualizar ramas y evolución real.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media: sin acceso al historial real, se infiere desde estructura.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: organización de carpetas y scripts sugiere un flujo claro de versiones.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: el diseño modular favorece commits pequeños y refactor graduales.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.6\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Estructura de commits\",\"modified\":\"20250619185407739\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Estructura de commits]] [[--- Codigo]]\",\"color\":\"#db5f00\",\"tmap.id\":\"bf7ef23c-b5b2-4035-8622-71c1635ce7e0\"},{\"created\":\"20250423003522758\",\"text\":\"{\\n  \\\"id\\\": \\\"🗂 Evolución Semántica\\\",\\n  \\\"title\\\": \\\"🗂 Evolución Semántica\\\",\\n  \\\"rol\\\": \\\"principios\\\",\\n  \\\"tipo\\\": \\\"semántica\\\",\\n  \\\"tags\\\": [\\n    \\\"🗂 Evolución Semántica\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🌀 Desarrollo y Evolucion\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🗂 Principios de programación\\\"],\\n    \\\"usa\\\": [\\\"🗂 Epigenética Computacional\\\", \\\"🗂 Estructura de commits\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Describe cómo los conceptos, funciones o estructuras de `repository-export` han cambiado su significado o propósito sin romper la continuidad del sistema.\\\",\\n    \\\"markdown\\\": \\\"## 🗂 Evolución Semántica – `repository-export`\\\\n\\\\n### 🧠 Rasgos clave\\\\n- El proyecto **mantiene continuidad semántica** entre versiones multiplataforma (Windows vs Unix) a pesar de los cambios técnicos en ejecución.\\\\n- Las funciones `generate_structure.py`, `tag_mapper.py` y `tiddler_exporter.py` evolucionan de forma convergente: distintas implementaciones pero mismo objetivo semántico.\\\\n\\\\n### 🔄 Refactor sin ruptura de intención\\\\n- Separación de `cli_utils.py` muestra un cambio conceptual: de funcionalidad dispersa → a unidad de soporte modular.\\\\n- Wrappers como `export_structure_wrapper_*.py` retoman la intención original del CLI pero reencapsulada según OS.\\\\n\\\\n### ♻️ Evolución por contexto, no por sintaxis\\\\n- Aunque el código cambia, los archivos generados `.json` (tiddlers) siguen teniendo la **misma estructura, tags y semántica**.\\\\n- Esto permite comparar versiones, hacer *diff semántico* o combinar salidas sin ambigüedad.\\\\n\\\\n### 🧩 Compatibilidad interpretativa\\\\n- La salida del sistema siempre representa \\\\\\\"archivo → tiddler\\\\\\\", sin cambiar la relación conceptual.\\\\n- Los cambios que han ocurrido (nombres de scripts, paths, CLI) **no afectan el significado funcional de la herramienta**.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Baja: los conceptos se mantienen estables en nomenclatura y función.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: los cambios estructurales no rompen la continuidad semántica.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Muy alta: diseño de salida JSON permite reinterpretación, comparación y reutilización.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.9\\\"\\n  }\\n}\\n\",\"title\":\"🗂 Evolución Semántica\",\"modified\":\"20250619185444150\",\"type\":\"application/json\",\"tmap.id\":\"21bf1538-2546-4a2d-a53b-1c27b8b83f94\",\"color\":\"#db5f00\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Evolución Semántica]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]]\"},{\"created\":\"20250417134313258\",\"text\":\"{\\n  \\\"id\\\": \\\"🗂 Modularidad y Estado\\\",\\n  \\\"title\\\": \\\"🗂 Modularidad y Estado\\\",\\n  \\\"rol\\\": \\\"principios\\\",\\n  \\\"tipo\\\": \\\"estructura\\\",\\n  \\\"tags\\\": [\\n    \\\"🗂 Modularidad y Estado\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🗂 Principios de programación\\\"],\\n    \\\"usa\\\": [\\\"🎯 5. Arquitectura\\\", \\\"🎯 6. Componentes\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Analiza el grado de separación de responsabilidades entre scripts, la claridad en los límites de cada módulo, y cómo se maneja el estado interno en tiempo de ejecución.\\\",\\n    \\\"markdown\\\": \\\"## 🗂 Modularidad y Estado – `repository-export`\\\\n\\\\n### 🧱 Separación funcional\\\\n- Cada script cumple una **función clara y específica**:\\\\n  - `generate_structure.py`: escaneo de archivos y estructura.\\\\n  - `cli_utils.py`: interacción con el usuario.\\\\n  - `tag_mapper.py`: asignación semántica de etiquetas.\\\\n  - `tiddler_exporter.py`: generación de archivos `.json` estilo TiddlyWiki.\\\\n  - `*_wrapper.py`: orquestación CLI por plataforma.\\\\n\\\\n### 🧭 Modularidad por plataforma\\\\n- Existe duplicación entre `LINUXandMAC` y `Windows`, pero se mantiene la **coherencia funcional**.\\\\n- Cada plataforma reutiliza componentes internos comunes (misma interfaz esperada).\\\\n\\\\n### 🧠 Manejo del estado\\\\n- El estado **no se persiste entre ejecuciones**; toda lógica se basa en el contenido del sistema de archivos en tiempo real.\\\\n- Se utilizan variables locales y estructuras temporales en memoria (listas, diccionarios) sin side effects globales.\\\\n- Archivos como `*.hashes.json` permiten validar si hubo cambios reales.\\\\n\\\\n### ♻️ Refactorabilidad\\\\n- Los scripts pueden migrarse fácilmente a una estructura de módulos Python (`src/`) o empaquetado con `__init__.py`, sin romper funcionalidad actual.\\\\n- Separación CLI–lógica facilita pruebas y mantenimiento.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media: algunos scripts repiten lógica en distintas versiones.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: diseño modular favorece adaptación multiplataforma.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: funciones desacopladas, estado no persistente, estructura clara.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.8\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Modularidad y Estado\",\"modified\":\"20250619185522111\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Modularidad y Estado]] [[--- Codigo]]\",\"color\":\"#db5f00\",\"tmap.id\":\"ebb5625d-d730-44ac-bf4c-61e53f3c079a\"},{\"created\":\"20250417134339248\",\"text\":\"{\\n  \\\"id\\\": \\\"🗂 Usabilidad y Robustez\\\",\\n  \\\"title\\\": \\\"🗂 Usabilidad y Robustez\\\",\\n  \\\"rol\\\": \\\"principios\\\",\\n  \\\"tipo\\\": \\\"resiliencia\\\",\\n  \\\"tags\\\": [\\n    \\\"🗂 Usabilidad y Robustez\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\\"--- 🗂 Principios de programación\\\"],\\n    \\\"usa\\\": [\\\"🎯 2. Requisitos\\\", \\\"🎯 4. Flujo de interaccion\\\", \\\"--- Codigo\\\"]\\n  },\\n  \\\"content\\\": {\\n    \\\"plain\\\": \\\"Evalúa qué tan accesible es el sistema para el usuario y qué mecanismos de defensa o validación implementa para evitar errores o pérdidas.\\\",\\n    \\\"markdown\\\": \\\"## 🗂 Usabilidad y Robustez – `repository-export`\\\\n\\\\n### 🧑‍💻 Usabilidad CLI\\\\n- La ejecución se basa en un **único comando por plataforma**, facilitando su uso incluso sin conocimiento previo del código.\\\\n- Menús interactivos (`cli_utils.py`) permiten seleccionar opciones sin tener que recordar argumentos complejos.\\\\n- El README proporciona un flujo claro, multiplataforma, paso a paso.\\\\n\\\\n### ✅ Validaciones implementadas\\\\n- **Verificación de existencia** de archivos antes de exportar.\\\\n- Uso de archivos `*.hashes.json` para evitar re-exportar sin cambios → reduce procesamiento innecesario.\\\\n- Dependencias mínimas (`tree`, Python 3.7+) documentadas y comprobables.\\\\n\\\\n### 📉 Gestión de errores y caídas\\\\n- Aunque no se documenta explícitamente el manejo de excepciones, la estructura modular permite envolver cada bloque en `try/except` de forma aislada.\\\\n- Separación por sistema operativo evita colisiones de entorno.\\\\n\\\\n### 💡 Robustez por diseño\\\\n- La salida (`tiddlers-export/`) es siempre **inofensiva y aislada**.\\\\n- No modifica el repositorio escaneado.\\\\n- Cada ejecución es autónoma: se puede correr en paralelo o repetir sin impacto.\\\"\\n  },\\n  \\\"metacognition\\\": {\\n    \\\"Tolerancia a la ambigüedad\\\": \\\"Media: parte de las validaciones se infieren, no todas están explícitas.\\\",\\n    \\\"Pensamiento sistémico\\\": \\\"Alto: la robustez emerge de la estructura modular y los mecanismos de prevención.\\\",\\n    \\\"Adaptabilidad\\\": \\\"Alta: el sistema puede adaptarse a distintos entornos sin grandes cambios.\\\",\\n    \\\"Vector de certeza\\\": \\\"2.7\\\"\\n  }\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Usabilidad y Robustez\",\"modified\":\"20250619185557175\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Usabilidad y Robustez]] [[--- Codigo]]\",\"color\":\"#db5f00\",\"tmap.id\":\"a65af17f-6a20-419b-b5f9-360d03355131\"}]\n```",
  "tags": "[[⚙️ JSON]] [[-rep_export_Windows_tiddler_tag_doc_windows_(Estudiar)(Repository Export).json]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250620153254470",
  "modified": "20250620153254470"
}