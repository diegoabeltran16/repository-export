{
  "title": "-tests_test-rep-export-LINUXandMAC_test_tiddler_exporter_UNIX.py",
  "text": "## [[Tags]]\n[[⚙️ Python]] [[-tests_test-rep-export-LINUXandMAC_test_tiddler_exporter_UNIX.py]] [[--- Codigo]]\n\n```Python\nimport sys\nfrom pathlib import Path\n\nproject_root = Path(__file__).resolve().parents[2]\nif str(project_root) not in sys.path:\n    sys.path.insert(0, str(project_root))\n\nwindows_dir = project_root / \"rep-export-Windows\"\nlinuxmac_dir = project_root / \"rep_export_LINUXandMAC\"\n\nif str(windows_dir) in sys.path:\n    sys.path.remove(str(windows_dir))\nif \"cli_utils\" in sys.modules:\n    del sys.modules[\"cli_utils\"]\nif str(linuxmac_dir) not in sys.path:\n    sys.path.insert(0, str(linuxmac_dir))\n\nfrom rep_export_LINUXandMAC import tag_mapper\nimport importlib.util\nimport json\nimport pytest\nfrom cli_utils_UNIX import load_ignore_spec, is_ignored\n\n\n@pytest.fixture\ndef tiddler_exporter(tmp_path, monkeypatch):\n    \"\"\"Prepara un entorno temporal y carga dinámicamente el módulo.\"\"\"\n    # Crear estructura de proyecto falsa\n    repo_dir = tmp_path / \"repo\"\n    repo_dir.mkdir()\n    (repo_dir / \".gitignore\").write_text(\"__pycache__/\\nsecret.env\\n\")\n\n    (repo_dir / \"estructura.txt\").write_text(\"estructura\")\n    (repo_dir / \"visible.py\").write_text(\"print('ok')\")\n    (repo_dir / \"secret.env\").write_text(\"NO_EXPORT=1\")\n    (repo_dir / \"config.toml\").write_text(\"[project]\\nname = 'test'\")\n\n    # Redefinir ROOT_DIR para apuntar al repo falso\n    project_root = Path(__file__).resolve().parents[2]\n    tag_mapper_path = project_root / \"tag_mapper.py\"\n    if str(project_root) not in sys.path:\n        sys.path.insert(0, str(project_root))\n    # Si tag_mapper.py está en otro subdirectorio, agrega ese subdirectorio también\n    if tag_mapper_path.exists():\n        pass  # Ya está cubierto por project_root\n    else:\n        # Si está en un subdirectorio, por ejemplo \"rep-export-LINUXandMAC/tag_mapper.py\"\n        alt_path = project_root / \"rep_export_LINUXandMAC\"\n        if str(alt_path) not in sys.path:\n            sys.path.insert(0, str(alt_path))\n\n    module_path = project_root / \"rep_export_LINUXandMAC\" / \"tiddler_exporter.py\"\n    spec = importlib.util.spec_from_file_location(\"tiddler_exporter\", str(module_path))\n    mod = importlib.util.module_from_spec(spec)\n    sys.modules[\"tiddler_exporter\"] = mod\n    spec.loader.exec_module(mod)\n\n    monkeypatch.setattr(mod, \"ROOT_DIR\", repo_dir)\n    monkeypatch.setattr(mod, \"OUTPUT_DIR\", repo_dir / \"tiddlers-export\")\n    monkeypatch.setattr(mod, \"HASH_FILE\", repo_dir / \".hashes.json\")\n\n    return mod\n\ndef test_gitignore_excludes_secret_files(tiddler_exporter):\n    tiddler_exporter.export_tiddlers(dry_run=False)\n    out_dir = tiddler_exporter.OUTPUT_DIR\n    files = [f.name for f in out_dir.glob(\"*.json\")]\n    assert all(\"secret\" not in f for f in files), \"Archivo ignorado fue exportado por error.\"\n\ndef test_always_include_estructura_and_gitignore(tiddler_exporter):\n    tiddler_exporter.export_tiddlers(dry_run=False)\n    files = [f.name for f in tiddler_exporter.OUTPUT_DIR.glob(\"*.json\")]\n    expected = [\"-estructura.txt.json\", \"-.gitignore.json\"]\n    for name in expected:\n        assert name in files, f\"{name} debería estar presente siempre.\"\n\ndef test_toml_files_are_exported(tiddler_exporter):\n    tiddler_exporter.export_tiddlers(dry_run=False)\n    out_file = tiddler_exporter.OUTPUT_DIR / \"-config.toml.json\"\n    assert out_file.exists(), \"Archivo .toml no fue exportado correctamente\"\n    content = json.loads(out_file.read_text(encoding=\"utf-8\"))\n    assert \"project\" in content[\"text\"], \"Contenido del archivo .toml no fue exportado correctamente\"\n```",
  "tags": "[[⚙️ Python]] [[-tests_test-rep-export-LINUXandMAC_test_tiddler_exporter_UNIX.py]] [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250620153254477",
  "modified": "20250620153254477"
}