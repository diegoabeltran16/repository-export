{
  "title": "-rep_export_LINUXandMAC_tag_mapper_UNIX.py",
  "text": "RELATIONS:\n{\n  \"parte_de\": [\n    \"--- Codigo\",\n    \"rep_export_LINUXandMAC\"\n  ],\n  \"usa\": [\n    \"Any\",\n    \"Dict\",\n    \"List\",\n    \"Path\",\n    \"ignore\",\n    \"json\",\n    \"os\",\n    \"pathlib\",\n    \"pathspec\",\n    \"sys\",\n    \"typing\"\n  ]\n}\n\n```Python\n#!/usr/bin/env python3\n\"\"\"\nüì¶ M√≥dulo: tag_mapper_UNIX.py (Linux/macOS)\nüéØ Plataforma: Linux / macOS\n\nFunci√≥n:\nGenera tags sem√°nticos para archivos del repositorio.\nOrden de precedencia:\n1. Tags personalizados desde JSON en `tiddler_tag_doc/`.\n2. Tag derivado por extensi√≥n o nombre especial.\n3. Fallback `--- üß¨ Por Clasificar`.\n\nTambi√©n provee:\n- `load_ignore_spec(repo_root)` para interpretar `.gitignore`.\n- `detect_language(file_path)` para syntax highlighting.\n\nSalida:\nList[str] con tags en sintaxis TiddlyWiki (`[[TagName]]`).\n\"\"\"\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import List, Dict, Any\n\n# Intentar importar pathspec para respetar .gitignore\ntry:\n    import pathspec  # type: ignore\nexcept ImportError:\n    pathspec = None  # type: ignore\n\n# ========================================\n# Rutas y carga de JSON personalizados\n# ========================================\nTIDDLER_TAG_DIR = Path(__file__).resolve().parent / \"tiddler_tag_doc\"\n\n# Mapa de t√≠tulo a tags personalizados\ntitle_to_tags: Dict[str, List[str]] = {}\nif TIDDLER_TAG_DIR.is_dir():\n    for json_file in sorted(TIDDLER_TAG_DIR.glob(\"*.json\")):\n        try:\n            data = json.loads(json_file.read_text(encoding=\"utf-8\"))\n            if isinstance(data, list):\n                for item in data:\n                    title = item.get(\"title\", \"\").strip()\n                    tags_str = item.get(\"tags\", \"\").strip()\n                    if title and tags_str:\n                        title_to_tags[title] = tags_str.split()\n        except Exception as e:\n            print(f\"‚ö†Ô∏è Error leyendo {json_file.name}: {e}\")\n\n# ========================================\n# Mapeo extensi√≥n ‚Üí Tag\n# ========================================\nEXTENSION_TAG_MAP: Dict[str, str] = {\n    # Code\n    \".py\": \"Python\", \".js\": \"JavaScript\", \".ts\": \"TypeScript\", \".go\": \"Go\", \".rs\": \"Rust\",\n    \".java\": \"Java\", \".c\": \"C\", \".cpp\": \"C++\", \".cc\": \"C++\", \".hpp\": \"C++\",\n    \".rb\": \"Ruby\", \".php\": \"PHP\", \".kt\": \"Kotlin\", \".swift\": \"Swift\",\n    # Scripting\n    \".sh\": \"Shell\", \".bash\": \"Shell\", \".ps1\": \"PowerShell\", \".bat\": \"Batch\",\n    # Markup/data\n    \".md\": \"Markdown\", \".html\": \"HTML\", \".css\": \"CSS\", \".xml\": \"XML\",\n    \".json\": \"JSON\", \".yml\": \"YAML\", \".yaml\": \"YAML\", \".toml\": \"TOML\",\n    \".csv\": \"CSV\", \".sql\": \"SQL\", \".txt\": \"Text\"\n}\n\nSPECIAL_FILENAMES: Dict[str, str] = {\n    \"Dockerfile\": \"Dockerfile\",\n    \"Makefile\": \"Makefile\",\n    \"README\": \"README\",\n    \"LICENSE\": \"License\",\n    \".gitignore\": \"Git\"\n}\n\nDEFAULT_TAG = \"--- üß¨ Por Clasificar\"\n\n# ========================================\n# Funci√≥n para interpretar .gitignore\n# ========================================\ndef load_ignore_spec(repo_root: Path) -> Any:\n    \"\"\"\n    Retorna un PathSpec para ignorar rutas seg√∫n .gitignore.\n    Si pathspec no est√° disponible, nunca ignora nada.\n    \"\"\"\n    if pathspec:\n        gitignore = repo_root / '.gitignore'\n        if gitignore.is_file():\n            patterns = gitignore.read_text(encoding='utf-8').splitlines()\n            return pathspec.PathSpec.from_lines('gitwildmatch', patterns)\n    # Dummy spec que no ignora\n    class DummySpec:\n        def match_file(self, file_path: str) -> bool:\n            return False\n    return DummySpec()\n\n# ========================================\n# Mapeo para syntax highlighting\n# ========================================\nHIGHLIGHT_MAP: Dict[str, str] = {\n    '.py': 'python', '.js': 'javascript', '.ts': 'typescript', '.go': 'go', '.rs': 'rust',\n    '.java': 'java', '.c': 'c', '.cpp': 'cpp', '.txt': 'text', '.md': 'markdown',\n    '.json': 'json', '.html': 'html', '.css': 'css', '.yml': 'yaml', '.xml': 'xml'\n}\n\nSPECIAL_HIGHLIGHT: Dict[str, str] = {\n    '.gitignore': 'gitignore',\n    'Dockerfile': 'dockerfile',\n    'Makefile': 'makefile',\n    'README': 'markdown',\n    'LICENSE': 'text'\n}\n\n# ========================================\n# Funciones principales\n# ========================================\n\ndef detect_language(file_path: Path) -> str:\n    \"\"\"Devuelve la etiqueta de lenguaje para bloques Markdown.\"\"\"\n    name = file_path.name\n    if name in SPECIAL_HIGHLIGHT:\n        return SPECIAL_HIGHLIGHT[name]\n    return HIGHLIGHT_MAP.get(file_path.suffix.lower(), 'text')\n\ndef get_tags_for_file(file_path: Path) -> List[str]:\n    \"\"\"Devuelve lista de tags TiddlyWiki para `file_path`.\"\"\"\n    # Construir t√≠tulo basado en ruta\n    try:\n        repo_root = Path(__file__).resolve().parents[1]\n        rel = file_path.relative_to(repo_root)\n        title = '-' + str(rel).replace(os.sep, '_')\n    except Exception:\n        title = '-' + file_path.name\n\n    # Cargar tags personalizados si existen\n    if title in title_to_tags:\n        tags = title_to_tags[title].copy()\n    else:\n        # Derivar tag de tipo con emoji\n        name = file_path.name\n        ext = file_path.suffix.lower()\n        if name in SPECIAL_FILENAMES:\n            base = SPECIAL_FILENAMES[name]\n        elif ext in EXTENSION_TAG_MAP:\n            base = EXTENSION_TAG_MAP[ext]\n        else:\n            base = DEFAULT_TAG\n        if base == DEFAULT_TAG:\n            tags = [f\"[[{base}]]\"]\n        else:\n            tags = [f\"[[‚öôÔ∏è {base}]]\"]\n\n    # Tag basado en nombre de archivo (sin emoji)\n    tags.append(f\"[[{title}]]\")\n    # Tag de grupo sin emoji\n    tags.append(\"[[--- Codigo]]\")\n\n    return tags\n\n# CLI para pruebas r√°pidas\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) < 2:\n        print(\"Uso: python tag_mapper_UNIX.py <ruta_archivo>\")\n        sys.exit(1)\n    result = get_tags_for_file(Path(sys.argv[1]))\n    print(result)\n\n```",
  "type": "text",
  "tags": "[[‚öôÔ∏è Python]] [[-rep_export_LINUXandMAC_tag_mapper_UNIX.py]] [[--- Codigo]] [[parte_de:--- Codigo]] [[parte_de:rep_export_LINUXandMAC]] [[usa:Any]] [[usa:Dict]] [[usa:List]] [[usa:Path]] [[usa:ignore]] [[usa:json]] [[usa:os]] [[usa:pathlib]] [[usa:pathspec]] [[usa:sys]] [[usa:typing]]",
  "tags_list": [
    "[[‚öôÔ∏è Python]]",
    "[[-rep_export_LINUXandMAC_tag_mapper_UNIX.py]]",
    "[[--- Codigo]]",
    "[[parte_de:--- Codigo]]",
    "[[parte_de:rep_export_LINUXandMAC]]",
    "[[usa:Any]]",
    "[[usa:Dict]]",
    "[[usa:List]]",
    "[[usa:Path]]",
    "[[usa:ignore]]",
    "[[usa:json]]",
    "[[usa:os]]",
    "[[usa:pathlib]]",
    "[[usa:pathspec]]",
    "[[usa:sys]]",
    "[[usa:typing]]"
  ],
  "relations": {
    "parte_de": [
      "--- Codigo",
      "rep_export_LINUXandMAC"
    ],
    "usa": [
      "Any",
      "Dict",
      "List",
      "Path",
      "ignore",
      "json",
      "os",
      "pathlib",
      "pathspec",
      "sys",
      "typing"
    ]
  }
}